<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu18.04 Server搭建和使用记录</title>
    <url>/2020/10/03/%E6%90%AD%E5%BB%BAUbuntu18.4servers%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>记录自己搭建Ubuntu18.04 Server的全部过程，有不足之处请见谅！！！</p>
</blockquote>
<h2 id="1、前置工作"><a href="#1、前置工作" class="headerlink" title="1、前置工作"></a>1、前置工作</h2><p>本文做出以下假设：</p>
<ul>
<li>您已熟悉Linux操作系统</li>
<li>您拥有(或能够独立创建)一台Ubuntu Server</li>
</ul>
<p>本文采用Vmware 虚拟机创建Ubuntu 18.04 Server</p>
<ul>
<li>镜像获取：<a href="http://cdimage.ubuntu.com/ubuntu/releases/18.04/release/?_ga=2.128866185.407240186.1601692120-588330145.1601692120">Ubuntu 18.04.5 LTS (Bionic Beaver)</a></li>
<li>Vmware：<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">VMware15.5</a></li>
<li>SecureCRT：<a href="https://www.vandyke.com/download/securecrt/6.7/index.html">SecureCRT</a></li>
</ul>
<p>搭建Ubuntu18.04 Server 教程：<a href="https://blog.csdn.net/qq_41971768/article/details/108908496">VMware 安装 Ubuntu Server 18.04.5 LTS</a></p>
<blockquote>
<a id="more"></a>
</blockquote>
<h2 id="2、Server准备工作"><a href="#2、Server准备工作" class="headerlink" title="2、Server准备工作"></a>2、Server准备工作</h2><ul>
<li><p>设置root密码：<code>sudo passwd root</code></p>
</li>
<li><p>更改镜像源：</p>
<ul>
<li><p>备份源配置文件： <code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</code></p>
</li>
<li><p>在源配置文件前添加阿里云镜像源配置 : <code>sudo vim /etc/apt/sources.list</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br> <br>deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br> <br>deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br> <br>deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br> <br>deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>执行更新命令 : <code>sudo apt-get clean</code>  、<code>sudo apt-get update</code></p>
</li>
<li><p>查看Java、Python、MySql、Tomcat、nginx、SqlServer环境</p>
</li>
<li><p>Java: <code>java -version</code></p>
</li>
<li><p>Python: <code>python 或 python3</code></p>
</li>
<li><p>MySql：<code>mysql -version</code></p>
</li>
<li><p>Redis： <code>redis-server -v</code>  </p>
</li>
<li><p>Tomcat：{待补充}</p>
</li>
<li><p>Docker：<code>docker -v</code></p>
</li>
<li><p>nginx：{待补充}</p>
</li>
<li><p>SqlServer：{待补充}</p>
</li>
</ul>
<h3 id="2-0-安装文件上传工具"><a href="#2-0-安装文件上传工具" class="headerlink" title="2.0 安装文件上传工具"></a>2.0 安装文件上传工具</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">安装命令：apt-get install lrzsz -y<br><br>使用命令：rz # 上传<br><br></code></pre></td></tr></table></figure>

<h3 id="2-1-安装Mysql环境"><a href="#2-1-安装Mysql环境" class="headerlink" title="2.1 安装Mysql环境"></a>2.1 安装Mysql环境</h3><ul>
<li><p>安装Mysql：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">apt-get install mysql-server<br>apt-get install mysql-client<br></code></pre></td></tr></table></figure>
</li>
<li><p>检测安装是否成功：<code>mysql</code> </p>
</li>
<li><p>修改bind-address（允许远程主机访问）： <code>vim /etc/mysql/mysql.conf.d/mysqld.cnf</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><br>[mysqld_safe]<br>socket          = /var/run/mysqld/mysqld.sock<br>nice            = 0<br><br>[mysqld]<br><span class="hljs-meta">#</span><br><span class="hljs-meta">#</span><span class="bash"> * Basic Settings</span><br><span class="hljs-meta">#</span><br>user            = mysql<br>pid-file        = /var/run/mysqld/mysqld.pid<br>socket          = /var/run/mysqld/mysqld.sock<br>port            = 3306<br>basedir         = /usr<br>datadir         = /var/lib/mysql<br>tmpdir          = /tmp<br>lc-messages-dir = /usr/share/mysql<br>skip-external-locking<br><span class="hljs-meta">#</span><br><span class="hljs-meta">#</span><span class="bash"> Instead of skip-networking the default is now to listen only on</span><br><span class="hljs-meta">#</span><span class="bash"> localhost <span class="hljs-built_in">which</span> is more compatible and is not less secure.</span><br><span class="hljs-meta">#</span><span class="bash"> bind-address          = 127.0.0.1</span><br><span class="hljs-meta">#</span><span class="bash"> 注释掉绑定的ip地址</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>mysql -u root -p123456    默认安装的话密码是任何字符都可以，也就是没有密码。</p>
</blockquote>
</li>
<li><p>修改默认编码格式：<code>vim  /etc/mysql/mysql.conf.d/mysqld.cnf</code></p>
<ul>
<li>更改前编码：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> STATUS</span><br>--------------<br>mysql  Ver 14.14 Distrib 5.7.31, for Linux (x86_64) using  EditLine wrapper<br><br>Connection id:          6<br>Current database:<br>Current user:           root@localhost<br>SSL:                    Not in use<br>Current pager:          stdout<br>Using outfile:          &#x27;&#x27;<br>Using delimiter:        ;<br>Server version:         5.7.31-0ubuntu0.18.04.1 (Ubuntu)<br>Protocol version:       10<br>Connection:             Localhost via UNIX socket<br>Server characterset:    latin1     # <br>Db     characterset:    latin1	   # 默认编码，需要修改为utf-8<br>Client characterset:    utf8<br>Conn.  characterset:    utf8<br>UNIX socket:            /var/run/mysqld/mysqld.sock<br>Uptime:                 26 min 3 sec<br><br>Threads: 1  Questions: 15  Slow queries: 0  Opens: 105  Flush tables: 1  Open tables: 98  Queries per second avg: 0.009<br>--------------<br><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> </span><br></code></pre></td></tr></table></figure>

<pre><code>* 更改：`root@ubuntu:vim  /etc/mysql/mysql.conf.d/mysqld.cnf`</code></pre>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[mysqld]<br><span class="hljs-meta">#</span><br><span class="hljs-meta">#</span><span class="bash"> * Basic Settings</span><br><span class="hljs-meta">#</span><br>user            = mysql<br>pid-file        = /var/run/mysqld/mysqld.pid<br>socket          = /var/run/mysqld/mysqld.sock<br>port            = 3306<br>basedir         = /usr<br>datadir         = /var/lib/mysql<br>tmpdir          = /tmp<br>lc-messages-dir = /usr/share/mysql<br>skip-external-locking<br>character-set-server=utf8    # 添加该句<br><span class="hljs-meta">#</span><br><span class="hljs-meta">#</span><span class="bash"> Instead of skip-networking the default is now to listen only on</span><br><span class="hljs-meta">#</span><span class="bash"> localhost <span class="hljs-built_in">which</span> is more compatible and is not less secure.</span><br><span class="hljs-meta">#</span><span class="bash"> bind-address          = 127.0.0.1</span><br></code></pre></td></tr></table></figure>

<ul>
<li>重启服务，更改后编码：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">mysql&gt; STATUS<br>--------------<br>mysql  Ver 14.14 Distrib 5.7.31, for Linux (x86_64) using  EditLine wrapper<br><br>Connection id:          2<br>Current database:<br>Current user:           root@localhost<br>SSL:                    Not in use<br>Current pager:          stdout<br>Using outfile:          &#39;&#39;<br>Using delimiter:        ;<br>Server version:         5.7.31-0ubuntu0.18.04.1 (Ubuntu)<br>Protocol version:       10<br>Connection:             Localhost via UNIX socket<br>Server characterset:    utf8<br>Db     characterset:    utf8<br>Client characterset:    utf8<br>Conn.  characterset:    utf8<br>UNIX socket:            &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock<br>Uptime:                 5 sec<br><br>Threads: 1  Questions: 5  Slow queries: 0  Opens: 105  Flush tables: 1  Open tables: 98  Queries per second avg: 1.000<br>--------------<br><br>mysql&gt; <br></code></pre></td></tr></table></figure>
</li>
<li><p>授权远程登录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br><br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">mysql&gt; FLUSH PRIVILEGES;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure>
</li>
<li><p>进行远程连接: 使用Navicat进行连接，如果不能连接；请百度开放Ubuntu的3306端口。</p>
</li>
<li><p>修改MySql用户密码：<a href="https://blog.csdn.net/qq_42410605/article/details/96496394">{待补充}</a></p>
</li>
</ul>
<h3 id="2-2-安装Java环境"><a href="#2-2-安装Java环境" class="headerlink" title="2.2 安装Java环境"></a>2.2 安装Java环境</h3><ul>
<li>下载JDK</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">https://www.oracle.com/technetwork/java/javase/downloads/index.html<br></code></pre></td></tr></table></figure>

<ul>
<li><p>安装JDK</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">上传jdk到/<span class="hljs-built_in">export</span>/software路径下去，井解压</span><br><br>tar -zxvf jdk-8u161-linux-x64.tar.gz -C /export/servers/<br><br>mv jdk1.8.0_161 jdk<br></code></pre></td></tr></table></figure>
</li>
<li><p>配置JDK环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vi /etc/profile<br><br>添加以下内容：<br><br>export JAVA_HOME=/export/servers/jdk<br><br>export PATH=$PATH:$JAVA_HOME/bin<br><br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br><br>修改完成之后记得source /etc/profle生效<br><br>source /etc/profile<br></code></pre></td></tr></table></figure>
</li>
<li><p>JDK环境验证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">java -version<br></code></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="2-3-配置python环境"><a href="#2-3-配置python环境" class="headerlink" title="2.3 配置python环境"></a>2.3 配置python环境</h3><ul>
<li><p>检测python3、pip3：<code>python3</code>、<code>pip3 install numpy</code></p>
</li>
<li><p>安装python3、pip3：<code>apt-get install python3</code>、<code>apt-get install python3-pip</code></p>
</li>
<li><p>收集和安装依赖：</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pip： <br><br>pip freeze &gt; requirements.txt<br>pip install -r requirements.txt<br><br>conda：<br><br>conda list -e &gt; requirements.txt<br>conda install --yes --file requirements.txt<br><br></code></pre></td></tr></table></figure>



<ul>
<li><p>安装conda环境：<a href="https://www.anaconda.com/products/individual">官网</a></p>
<ul>
<li><p>选择合适的Anaconda版本地址：<a href="https://repo.anaconda.com/archive/Anaconda3-2020.07-Linux-x86_64.sh">https://repo.anaconda.com/archive/Anaconda3-2020.07-Linux-x86_64.sh</a></p>
</li>
<li><p>下载安装包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd /export/software/<br>wget https://repo.continuum.io/archive/Anaconda3-4.4.0-Linux-x86_64.sh<br>bash Anaconda3-4.4.0-Linux-x86_64.sh<br></code></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<blockquote>
<p>一路回车；</p>
</blockquote>
<ul>
<li><p>修改环境变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vi ~/.bashrc<br></code></pre></td></tr></table></figure>

<blockquote>
<p> 在bashrc文件的最后添加：export PATH=”/home/用户名/anaconda3/bin:$PATH”。（vi编辑器中按i进入编辑模式） </p>
<p>如：<code>export PATH=&quot;/root/anaconda3/bin:$PATH&quot;</code></p>
</blockquote>
</li>
<li><p>更新 <code>.bashrc</code> 使得环境变量生效： <code>source ~/.bashrc</code> </p>
</li>
<li><p>更改镜像源：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">修改了清华源，<br><br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br>conda config --set show_channel_urls yes<br></code></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>升级conda：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">conda update conda<br>conda update anaconda<br>conda update python<br></code></pre></td></tr></table></figure>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/22678445">conda管理python环境</a>：</p>
<ul>
<li><p>环境管理：</p>
</li>
<li><p>conda常用命令</p>
<ul>
<li>查看当前系统下的环境</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">conda info -e<br></code></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>创建新的环境</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text"># 指定python版本为2.7，注意至少需要指定python版本或者要安装的包# 后一种情况下，自动安装最新python版本<br>conda create -n env_name python=2.7<br># 同时安装必要的包<br>conda create -n env_name numpy matplotlib python=2.7<br></code></pre></td></tr></table></figure>

<ul>
<li>环境切换</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">  # 切换到新环境# linux/Mac下需要使用source activate env_name<br>  activate env_name<br>  #退出环境，也可以使用`activate root`切回root环境<br>deactivate env_name<br></code></pre></td></tr></table></figure>

<ul>
<li><p>移除环境</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">conda remove -n env_name --all<br></code></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>给某个特定环境安装package </p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">conda install -n env_name pandas<br></code></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查看已经安装的package</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">  conda list<br>  # 指定查看某环境下安装的package<br>conda list -n env_name<br></code></pre></td></tr></table></figure>
</li>
<li><p>查找包</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">conda search pyqtgraph<br></code></pre></td></tr></table></figure>

</li>
</ul>
<ul>
<li><p>更新包</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">conda update numpy<br>conda update anaconda<br></code></pre></td></tr></table></figure>

<ul>
<li>卸载包</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">conda remove numpy<br></code></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="2-4-Redis环境配置-here"><a href="#2-4-Redis环境配置-here" class="headerlink" title="2.4 Redis环境配置:here"></a>2.4 Redis环境配置:<a href="https://www.cnblogs.com/pinuocao/p/12402225.html">here</a></h3><ul>
<li><p>安装redis：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo apt-get install redis-server</span><br></code></pre></td></tr></table></figure>

<ul>
<li>或者：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br>解压：tar -zxf redis-5.0.5.tar.gz<br>进入redis目录：cd redis-5.0.5<br>编译：make<br></code></pre></td></tr></table></figure>
</li>
<li><p>配置：参照<a href="https://www.cnblogs.com/pinuocao/p/12402225.html">here</a></p>
</li>
</ul>
<h3 id="2-5-Tomcat-：官网"><a href="#2-5-Tomcat-：官网" class="headerlink" title="2.5 Tomcat ：官网"></a>2.5 Tomcat ：<a href="http://tomcat.apache.org/">官网</a></h3><ul>
<li><p>下载Tomcat 9.0.38:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">wget https://mirror.bit.edu.cn/apache/tomcat/tomcat-9/v9.0.38/bin/apache-tomcat-9.0.38.tar.gz<br></code></pre></td></tr></table></figure>
</li>
<li><p>解压到指定目录：<code> tar -zxvf apache-tomcat-9.0.38.tar.gz -C /export/servers/</code></p>
</li>
<li><p>重命名文件名：<code>mv apache-tomcat-9.0.38/ tomcat9</code></p>
</li>
<li><p>更改启动脚本<code>startup.sh</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">set</span> java environment</span><br>export JAVA_HOME=/export/servers/jdk<br>export JRE_HOME=$&#123;JAVA_HOME&#125;/jre<br>export CLASSPATH=.:%&#123;JAVA_HOME&#125;/lib:%&#123;JRE_HOME&#125;/lib<br>export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH<br><br><span class="hljs-meta">#</span><span class="bash">tomcat</span><br>export TOMCAT_HOME=/export/servers/tomcat9<br></code></pre></td></tr></table></figure>
</li>
<li><p>启动Tomcat： <code>./startup.sh </code></p>
</li>
</ul>
<h3 id="2-6-Docker-环境安装"><a href="#2-6-Docker-环境安装" class="headerlink" title="2.6 Docker 环境安装"></a>2.6 Docker 环境安装</h3><p>安装参考：<a href="https://www.runoob.com/docker/ubuntu-docker-install.html">菜鸟教程</a></p>
<ul>
<li><p>查看Linux的IP地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ip addr<br></code></pre></td></tr></table></figure>
</li>
<li><p>使用客户端连接Linux</p>
</li>
</ul>
<h4 id="2-6-1-在Linux上安装docker"><a href="#2-6-1-在Linux上安装docker" class="headerlink" title="2.6.1 在Linux上安装docker"></a>2.6.1 <strong>在Linux上安装docker</strong></h4><p>步骤：</p>
<ul>
<li><p>检查内核版本，必须是3.10及以上：<code>uname -r</code></p>
</li>
<li><p>安装docker： <code>yum install docker</code>  或  <a href="https://www.runoob.com/docker/ubuntu-docker-install.html">参考菜鸟教程</a>  、<a href="https://blog.csdn.net/sun_hui_/article/details/100581161">使用阿里云镜像</a></p>
</li>
<li><p>启动docker：<code>systemctl start docker</code></p>
</li>
<li><p>查看docker版本： <code>docker -v</code></p>
</li>
<li><p>开机启动docker: <code>systemctl enable docker</code></p>
</li>
<li><p>停止docker： <code>systemctl stop docker</code></p>
</li>
</ul>
<h4 id="2-6-2-Docker常用命令-amp-操作"><a href="#2-6-2-Docker常用命令-amp-操作" class="headerlink" title="2.6.2 Docker常用命令&amp;操作"></a>2.6.2 <strong>Docker常用命令&amp;操作</strong></h4><h5 id="2-6-2-1-镜像操作"><a href="#2-6-2-1-镜像操作" class="headerlink" title="2.6.2.1 镜像操作"></a>2.6.2.1 <strong>镜像操作</strong></h5><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>检索</td>
<td>docker search 关键字 eg：docker search redis</td>
<td>我们经常要去docker hub上检索镜像的详细信息，如镜像的tag</td>
</tr>
<tr>
<td>拉取</td>
<td>docker pull 镜像名:tag</td>
<td>:tag是可选的，tag表示标签</td>
</tr>
<tr>
<td>列表</td>
<td>docker images</td>
<td>查看所有的本地镜像</td>
</tr>
<tr>
<td>删除</td>
<td>docker rmi images-id</td>
<td>删除指定的本地镜像</td>
</tr>
</tbody></table>
<p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<h5 id="2-6-2-2-容器操作"><a href="#2-6-2-2-容器操作" class="headerlink" title="2.6.2.2 容器操作"></a>2.6.2.2 容器操作</h5><p>软件镜像（QQ安装程序)—-运行镜像—-产生一个容器(正在运行的软件，运行的QQ) ;</p>
<p>步骤：</p>
<ul>
<li>搜索镜像：<code>docker search tomcat</code></li>
<li>拉取镜像：<code>docker pull tomcat</code></li>
<li>根据镜像启动容器： <code>docker run --name mytomcat -d tomcat:latest</code></li>
<li>查看运行中的容器：<code>docker ps</code></li>
<li>停止运行中的容器：<code>docker stop 容器的id</code></li>
<li>查看所有的容器： <code>docker ps -a</code></li>
<li>启动容器： <code>docker start 容器id</code></li>
<li>删除一个容器：<code>docker rm 容器id</code></li>
<li>启动一个做了端口映射的tomcat： <code>docker run -d -p 8888:8080 tomcat</code><ul>
<li>-d:后台运行</li>
<li>-p：将主机端口映射到容器的一个端口   主机端口:容器内部端口</li>
</ul>
</li>
<li>关闭Linux的防火墙：<ul>
<li>查看防火墙状态：<code>service firewalld status</code></li>
<li>关闭防火墙：<code>service firewalld stop</code></li>
</ul>
</li>
<li>查看容器的日志： <code>docker logs container-name/container-id</code></li>
<li>更多命令参看：[https: //docs.docker .com/engine/reference/commandline/docker/](https: //docs.docker .com/engine/reference/commandline/docker/)<ul>
<li>可以参考每一个镜像的文档</li>
</ul>
</li>
</ul>
<h5 id="2-6-2-3-安装MySql示例"><a href="#2-6-2-3-安装MySql示例" class="headerlink" title="2.6.2.3 安装MySql示例"></a>2.6.2.3 安装MySql示例</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker pull mysql<br></code></pre></td></tr></table></figure>

<ul>
<li>错误的启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run --name mysql01 -d mysql<br></code></pre></td></tr></table></figure>

<ul>
<li>正确的启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run --name mysql101 -e MYSQL_ROOT_PASSWORD=123456 -d mysql<br></code></pre></td></tr></table></figure>

<ul>
<li>做了端口映射</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -p3306:3306 --name mysql102 -e MYSQL_ROOT_PASSWORD=123456 -d mysql<br></code></pre></td></tr></table></figure>

<ul>
<li>几个其他的高级操作</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run --name mysql03 -v /conf/mysql:/etc/mysq1/conf.d -e MSQL_ROOT_PASSMORD=my-secret-pw-d mysql:tag<br><br><span class="hljs-meta">#</span><span class="bash"> 把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysq1/conf.d文件夹里面改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下(/conf/mysql)</span><br><br>docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci<br><span class="hljs-meta">#</span><span class="bash"> 指定mysql的一些配置参数</span><br><br></code></pre></td></tr></table></figure>

<h5 id="2-6-2-4-安装zookeeper"><a href="#2-6-2-4-安装zookeeper" class="headerlink" title="2.6.2.4 安装zookeeper"></a>2.6.2.4 安装zookeeper</h5><blockquote>
<p>CAP原则又称CAP定理，指的是在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。CAP 原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。</p>
</blockquote>
<ul>
<li>zookeeper 是CP 强一致性的</li>
</ul>
<blockquote>
<p> 访问<a href="https://hub.docker.com/">hub.docker.com</a> 主要是获得安装软件的信息及文档 </p>
</blockquote>
<ul>
<li>安装步骤：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">klein@klein:~$ docker -v   # 查看docker版本<br>klein@klein:~$ docker search zookeeper   # 搜索镜像<br>klein@klein:~$ sudo docker pull zookeeper   # 拉取镜像<br>klein@klein:~$ docker images  # 查看已安装镜像<br>root@klein:/home/klein# docker start zookeeper #启动zookeeper<br>root@klein:/home/klein# docker ps -a    # 查看启动镜像进程<br></code></pre></td></tr></table></figure>

<ul>
<li>进入zookeeper shell终端</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">(base) root@klein:/home/klein# docker exec -it zk0 bash<br></code></pre></td></tr></table></figure>

<ul>
<li>启动zookeeper 服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">root@73dd67ae6722:/apache-zookeeper-3.6.2-bin# cd bin/<br>root@73dd67ae6722:/apache-zookeeper-3.6.2-bin/bin# ./zkServer.sh start<br>ZooKeeper JMX enabled by default<br>Using config: /conf/zoo.cfg<br>Starting zookeeper ... already running as process 120.<br></code></pre></td></tr></table></figure>

<ul>
<li>启动客户端： </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">root@73dd67ae6722:/apache-zookeeper-3.6.2-bin/bin# ./zkCli.sh <br></code></pre></td></tr></table></figure>

<ul>
<li>在客户端操作</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[zk: localhost:2181(CONNECTED) 0] ls /<br>[services, zookeeper]<br>[zk: localhost:2181(CONNECTED) 1] ls<br>ls [-s] [-w] [-R] path<br>[zk: localhost:2181(CONNECTED) 2] ls /services <br>[cloud-provider-payment]<br>[zk: localhost:2181(CONNECTED) 3] ls /services/cloud-provider-payment <br>[305ca35d-55fc-4b21-a8c8-74582694c48c]<br>[zk: localhost:2181(CONNECTED) 4] ls /services/cloud-provider-payment/305ca35d-55fc-4b21-a8c8-74582694c48c <br>[]<br>[zk: localhost:2181(CONNECTED) 5] get /services/cloud-provider-payment/305ca35d-55fc-4b21-a8c8-74582694c48c <br>&#123;&quot;name&quot;:&quot;cloud-provider-payment&quot;,&quot;id&quot;:&quot;305ca35d-55fc-4b21-a8c8-74582694c48c&quot;,&quot;address&quot;:&quot;DESKTOP-AUK8T9H&quot;,&quot;port&quot;:8004,&quot;sslPort&quot;:null,&quot;payload&quot;:&#123;&quot;@class&quot;:&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;,&quot;id&quot;:&quot;application-1&quot;,&quot;name&quot;:&quot;cloud-provider-payment&quot;,&quot;metadata&quot;:&#123;&#125;&#125;,&quot;registrationTimeUTC&quot;:1606791533908,&quot;serviceType&quot;:&quot;DYNAMIC&quot;,&quot;uriSpec&quot;:&#123;&quot;parts&quot;:[&#123;&quot;value&quot;:&quot;scheme&quot;,&quot;variable&quot;:true&#125;,&#123;&quot;value&quot;:&quot;://&quot;,&quot;variable&quot;:false&#125;,&#123;&quot;value&quot;:&quot;address&quot;,&quot;variable&quot;:true&#125;,&#123;&quot;value&quot;:&quot;:&quot;,&quot;variable&quot;:false&#125;,&#123;&quot;value&quot;:&quot;port&quot;,&quot;variable&quot;:true&#125;]&#125;&#125;<br>[zk: localhost:2181(CONNECTED) 6] <br></code></pre></td></tr></table></figure>

<ul>
<li>json解析后的内容</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;cloud-provider-payment&quot;</span>,<br>  <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;305ca35d-55fc-4b21-a8c8-74582694c48c&quot;</span>,<br>  <span class="hljs-attr">&quot;address&quot;</span>: <span class="hljs-string">&quot;DESKTOP-AUK8T9H&quot;</span>,<br>  <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">8004</span>,<br>  <span class="hljs-attr">&quot;sslPort&quot;</span>: <span class="hljs-literal">null</span>,<br>  <span class="hljs-attr">&quot;payload&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;@class&quot;</span>: <span class="hljs-string">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span>,<br>    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;application-1&quot;</span>,<br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;cloud-provider-payment&quot;</span>,<br>    <span class="hljs-attr">&quot;metadata&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;registrationTimeUTC&quot;</span>: <span class="hljs-number">1606791533908</span>,<br>  <span class="hljs-attr">&quot;serviceType&quot;</span>: <span class="hljs-string">&quot;DYNAMIC&quot;</span>,<br>  <span class="hljs-attr">&quot;uriSpec&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;parts&quot;</span>: [<br>      &#123;<br>        <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;scheme&quot;</span>,<br>        <span class="hljs-attr">&quot;variable&quot;</span>: <span class="hljs-literal">true</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;://&quot;</span>,<br>        <span class="hljs-attr">&quot;variable&quot;</span>: <span class="hljs-literal">false</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;address&quot;</span>,<br>        <span class="hljs-attr">&quot;variable&quot;</span>: <span class="hljs-literal">true</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;:&quot;</span>,<br>        <span class="hljs-attr">&quot;variable&quot;</span>: <span class="hljs-literal">false</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;port&quot;</span>,<br>        <span class="hljs-attr">&quot;variable&quot;</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="3、Linux系统目录结构"><a href="#3、Linux系统目录结构" class="headerlink" title="3、Linux系统目录结构"></a>3、Linux系统目录结构</h2><table>
<thead>
<tr>
<th><strong>目录</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td>虚拟目录的根目录，通常不会在这里存储文件</td>
</tr>
<tr>
<td>/bin</td>
<td>二进制目录，存放用户级的GNU工具</td>
</tr>
<tr>
<td>/boot</td>
<td>启动目录，存放启动文件</td>
</tr>
<tr>
<td>/dev</td>
<td>设备目录，系统在这里创建设备节点</td>
</tr>
<tr>
<td>/etc</td>
<td>系统配置文件目录</td>
</tr>
<tr>
<td>/home</td>
<td>主目录，系统在这里创建用户目录</td>
</tr>
<tr>
<td>/lib</td>
<td>库目录，存放系统和应用程序的库文件</td>
</tr>
<tr>
<td>/media</td>
<td>媒体目录，可移动媒体设备的常用挂载点</td>
</tr>
<tr>
<td>/mnt</td>
<td>挂载目录，另一个可移动媒体设备的常用挂载点</td>
</tr>
<tr>
<td>/opt</td>
<td>可选目录，常用于存放第三方软件包和数据文件</td>
</tr>
<tr>
<td>/proc</td>
<td>进程目录，存放现有硬件及当前进程的相关信息</td>
</tr>
<tr>
<td>/root</td>
<td>root用户的主目录</td>
</tr>
<tr>
<td>/sbin</td>
<td>系统二进制目录，存放许多gnu管理员级工具</td>
</tr>
<tr>
<td>/run</td>
<td>运行目录，存放系统运作时的运行时数据</td>
</tr>
<tr>
<td>/srv</td>
<td>服务目录，存放本地服务的相关文件</td>
</tr>
<tr>
<td>/sys</td>
<td>系统目录，存放系统硬件信息的相关文件</td>
</tr>
<tr>
<td>/tmp</td>
<td>临时目录，可以在该目录中创建删除临时工作文件</td>
</tr>
<tr>
<td>/usr</td>
<td>用户二进制目录，大量用户级的gnu工具和数据文件存储</td>
</tr>
<tr>
<td>/var</td>
<td>可变目录，用以存放经常变化的文件，比如日志文件</td>
</tr>
</tbody></table>
<ul>
<li><p>个人目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir -p /export/data      # 存放一些数据文件<br><br>mkdir -p /export/software  # 存放安装包<br><br>mkdir -p /export/servers   # 软件安装目录：jdk、tomcat等<br><br>cd /home/username/         # 进入用户个人空间<br></code></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Tomcat Debug</title>
    <url>/2021/12/16/20210923-Tomcat%20debug/</url>
    <content><![CDATA[<h1 id="Tomcat-Debug"><a href="#Tomcat-Debug" class="headerlink" title="Tomcat Debug"></a>Tomcat Debug</h1><blockquote>
<p>记录一次Tomcat Debug操作</p>
</blockquote>
<h2 id="1、搭建环境"><a href="#1、搭建环境" class="headerlink" title="1、搭建环境"></a>1、搭建环境</h2><ul>
<li>准备 <code>centos7</code> 服务器</li>
<li>安装<code>Jdk8</code></li>
<li>安装tomcat</li>
</ul>
<a id="more"></a>

<ul>
<li>安装<code>socat</code>：<code>sudo yum install socat</code></li>
<li>本地新建Web项目，并打包</li>
</ul>
<h2 id="2、配置Debug"><a href="#2、配置Debug" class="headerlink" title="2、配置Debug"></a>2、配置Debug</h2><ul>
<li>新建脚本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br><span class="hljs-meta">#</span><span class="bash"> tomcat的bin目录下</span><br>export JAVA_OPTS=$JAVA_OPTS&quot; -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=127.0.0.1:50001&quot;<br></code></pre></td></tr></table></figure>

<ul>
<li>修改：catalina.sh</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 添加：目的是添加第一步的环境变量</span><br>if [ -r &quot;$CATALINA_BASE/bin/setenv.sh&quot; ]; then<br>   . &quot;$CATALINA_BASE/bin/setenv.sh&quot;<br>elif [ -r &quot;$CATALINA_HOME/bin/setenv.sh&quot; ]; then<br>   . &quot;$CATALINA_HOME/bin/setenv.sh&quot;<br>fi<br></code></pre></td></tr></table></figure>

<ul>
<li>停掉tomcat</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">./shutdown.sh<br></code></pre></td></tr></table></figure>

<ul>
<li>重新启动tomcat</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">./startup.sh  <br></code></pre></td></tr></table></figure>

<ul>
<li>判断第一步变量是否设置成功：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ps -ef | grep tomcat<br></code></pre></td></tr></table></figure>

<p><img src="/images/blog-images/tomcat-debug//image-20210924113321293.png" alt="image-20210924113321293"></p>
<ul>
<li>起socat监听：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 192.168.204.5：是本地ip</span><br><span class="hljs-meta">#</span><span class="bash"> 127.0.0.1:50001 是服务器上监听的端口，与第一步的配置一致</span><br>sudo socat TCP4-LISTEN:60001,fork,range=192.168.204.5/32 TCP4:127.0.0.1:50001<br></code></pre></td></tr></table></figure>

<h2 id="3、开始Debug"><a href="#3、开始Debug" class="headerlink" title="3、开始Debug"></a>3、开始Debug</h2><h3 id="3-1-配置"><a href="#3-1-配置" class="headerlink" title="3.1 配置"></a>3.1 配置</h3><p><img src="/images/blog-images/tomcat-debug//image-20210924113718963.png"></p>
<h3 id="3-2-开启"><a href="#3-2-开启" class="headerlink" title="3.2 开启"></a>3.2 开启</h3><p><img src="/images/blog-images/tomcat-debug//image-20210924113751114.png"></p>
]]></content>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis Generator 详细配置 demo</title>
    <url>/2020/12/16/MyBatis-Generator/</url>
    <content><![CDATA[<h1 id="MyBatis-Generator-详细配置-demo"><a href="#MyBatis-Generator-详细配置-demo" class="headerlink" title="MyBatis Generator 详细配置 demo"></a><a href="https://www.cnblogs.com/xuxiaobai13/p/11846772.html">MyBatis Generator 详细配置 demo</a></h1><blockquote>
<p>MyBatis Generator 是 MyBatis 提供的一个代码生成工具。可以帮我们生成 表对应的持久化对象(po)、操作数据库的接口(dao)、CRUD sql的xml(mapper)。</p>
<p>MyBatis Generator 是一个独立工具，你可以下载它的jar包来运行、也可以在 Ant 和 maven 运行。</p>
</blockquote>
<blockquote>
<p>目前已知的代码生成器有两种： <a href="https://baomidou.com/">MyBatis-Plus</a>  和 <a href="http://mybatis.org/generator/index.html">MyBatis Generator</a> ;前者是后者的加强版，对于MyBatis-Plus的使用可以参见： <a href="https://blog.csdn.net/qq_41971768/article/details/111178082">MyBatis-Plus 3.4.1 代码生成器 配置demo</a> </p>
</blockquote>
<a id="more"></a>

<h2 id="0、使用环境"><a href="#0、使用环境" class="headerlink" title="0、使用环境"></a>0、使用环境</h2><ul>
<li>开发工具：IDEA</li>
<li>数据库：mysql</li>
<li>包管理工具：maven</li>
</ul>
<h2 id="1、配置-MyBatis-Generator-Config"><a href="#1、配置-MyBatis-Generator-Config" class="headerlink" title="1、配置 MyBatis Generator Config"></a>1、<a href="https://blog.csdn.net/testcs_dn/article/details/79295065">配置 MyBatis Generator Config</a></h2><blockquote>
<p>MyBatis Generator 插件启动后，会根据你在 pom 中配置都路径找到该配置文件。</p>
<p>这个配置文件才是详细都配置 MyBatis Generator 生成代码的各种细节。</p>
<p>其中最重要的就是 <strong>context</strong> ，你的配置文件至少得包含一个<strong>context</strong></p>
</blockquote>
<ul>
<li><p>配置示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入配置文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;generator.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 一个数据库一个context,context的子元素必须按照它给出的顺序</span><br><span class="hljs-comment">        property*,plugin*,commentGenerator?,jdbcConnection,javaTypeResolver?,</span><br><span class="hljs-comment">        javaModelGenerator,sqlMapGenerator?,javaClientGenerator?,table+</span><br><span class="hljs-comment">    --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MySqlContext&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span> <span class="hljs-attr">defaultModelType</span>=<span class="hljs-string">&quot;flat&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;beginningDelimiter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;`&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;endingDelimiter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;`&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;javaFileEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 为模型生成序列化方法--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.generator.plugins.SerializablePlugin&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 为生成的Java模型创建一个toString方法 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 注释 --&gt;</span><br>        <span class="hljs-comment">&lt;!--注释生成配置--&gt;</span><br>        <span class="hljs-comment">&lt;!--可以自定义生成model的代码注释--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commentGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.macro.mall.tiny.mbg.CommentGenerator&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressAllComments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressDate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addRemarkComments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">commentGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--配置数据库连接--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;$&#123;jdbc.driverClass&#125;&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;$&#123;jdbc.connectionURL&#125;&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;$&#123;jdbc.userId&#125;&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--解决mysql驱动升级到8.0后不生成指定数据库代码的问题--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;nullCatalogMeansCurrent&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--实体类配置--&gt;</span><br>        <span class="hljs-comment">&lt;!--指定生成model的路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.macro.mall.tiny.mbg.model&quot;</span></span><br><span class="hljs-tag">                            <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;mall-tiny-01\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--映射文件的配置--&gt;</span><br>        <span class="hljs-comment">&lt;!--指定生成mapper.xml的路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.macro.mall.tiny.mbg.mapper&quot;</span></span><br><span class="hljs-tag">                         <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;mall-tiny-01\src\main\resources&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--指定生成mapper接口的的路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.macro.mall.tiny.mbg.mapper&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;mall-tiny-01\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- schema为数据库名，oracle需要配置，mysql不需要配置。</span><br><span class="hljs-comment">            tableName为对应的数据库表名</span><br><span class="hljs-comment">            domainObjectName 是要生成的实体类名(可以不指定，默认按帕斯卡命名法将表名转换成类名)</span><br><span class="hljs-comment">            enableXXXByExample 默认为 true， 为 true 会生成一个对应Example帮助类，帮助你进行条件查询，不想要可以设为false</span><br><span class="hljs-comment">            --&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;table schema=&quot;&quot; tableName=&quot;t_admin&quot; domainObjectName=&quot;Admin&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--               enableCountByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--               enableUpdateByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--        &gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &amp;lt;!&amp;ndash;是否使用实际列名,默认为false&amp;ndash;&amp;gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &amp;lt;!&amp;ndash;&lt;property name=&quot;useActualColumnNames&quot; value=&quot;false&quot; /&gt;&amp;ndash;&amp;gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;/table&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--生成全部表tableName设为%--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;pms_brand&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">generatedKey</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">sqlStatement</span>=<span class="hljs-string">&quot;MySql&quot;</span> <span class="hljs-attr">identity</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2、使用MyBatis-Generator"><a href="#2、使用MyBatis-Generator" class="headerlink" title="2、使用MyBatis Generator"></a>2、使用MyBatis Generator</h2><h3 id="2-1-使用-Maven-插件运行"><a href="#2-1-使用-Maven-插件运行" class="headerlink" title="2.1 使用 Maven 插件运行"></a>2.1 使用 Maven 插件运行</h3><blockquote>
<p>pom.xml 添加配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--mybatis的代码生成器的配置文件--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>src/main/resources/mybatis-generator-config.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--允许移动生成的文件 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">verbose</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--允许覆盖生成的文件--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--将当前pom的依赖项添加到生成器的类路径中--&gt;</span><br>                <span class="hljs-comment">&lt;!--&lt;includeCompileDependencies&gt;true&lt;/includeCompileDependencies&gt;--&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>Generate MyBatis Artifacts<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>generate<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--mybatis-generator插件的依赖包--&gt;</span><br>                <span class="hljs-comment">&lt;!--&lt;dependency&gt;--&gt;</span><br>                    <span class="hljs-comment">&lt;!--&lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;--&gt;</span><br>                    <span class="hljs-comment">&lt;!--&lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;--&gt;</span><br>                    <span class="hljs-comment">&lt;!--&lt;version&gt;1.3.7&lt;/version&gt;--&gt;</span><br>                <span class="hljs-comment">&lt;!--&lt;/dependency&gt;--&gt;</span><br>                <span class="hljs-comment">&lt;!-- mysql的JDBC驱动 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>  <br></code></pre></td></tr></table></figure>



<blockquote>
<p>配置好后，双击 maven 中的 MyBatis Generator 运行 </p>
</blockquote>
<h4 id="2-1-1-引入-MyBatis-Generator-插件"><a href="#2-1-1-引入-MyBatis-Generator-插件" class="headerlink" title="2.1.1 引入 MyBatis Generator 插件"></a>2.1.1 引入 MyBatis Generator 插件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="2-1-2-配置-MyBatis-Generator-config-文件路径"><a href="#2-1-2-配置-MyBatis-Generator-config-文件路径" class="headerlink" title="2.1.2 配置 MyBatis Generator config 文件路径"></a>2.1.2 配置 MyBatis Generator config 文件路径</h4><p>MyBatis Generator 插件需要根据一个 <strong>MyBatis Generator config</strong> 文件，来具体运行</p>
<p>配置如下，版本我用的是目前最新的版本 1.3.7</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--mybatis的代码生成器的配置文件--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>src/main/resources/mybatis-generator-config.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p> 注意，这个路径是你的配置文件相对于该 pom 文件的路径 </p>
</blockquote>
<h4 id="2-1-3-允许覆盖生成的文件"><a href="#2-1-3-允许覆盖生成的文件" class="headerlink" title="2.1.3 允许覆盖生成的文件"></a>2.1.3 允许覆盖生成的文件</h4><blockquote>
<p>有时候我们的数据库表添加了新字段，需要重新生成对应的文件。常规做法是手动删除旧文件，然后在用 MyBatis Generator 生成新文件。当然你也可以选择让 MyBatis Generator 覆盖旧文件，省下手动删除的步骤。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--mybatis的代码生成器的配置文件--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>src/main/resources/mybatis-generator-config.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--允许覆盖生成的文件--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p> 值得注意的是，MyBatis Generator 只会覆盖旧的 po、dao、而 *mapper.xml 不会覆盖，而是追加，这样做的目的是防止用户自己写的 sql 语句一不小心都被 MyBatis Generator 给覆盖了 </p>
</blockquote>
<ul>
<li>问题解决</li>
</ul>
<blockquote>
<p>以前一直以为是MyBatis Generator生成的问题，直接删除mapper.xml所在文件夹，重新生成就好了,现在提供一种MyBatis Generator官方提供的解决方法。</p>
</blockquote>
<ul>
<li>升级MyBatis Generator的版本</li>
</ul>
<p>MyBatis Generator 在1.3.7版本提供了解决方案，我们目前使用的版本为1.3.3。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- MyBatis 生成器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>在generatorConfig.xml文件中添加覆盖mapper.xml的插件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--生成mapper.xml时覆盖原文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="2-1-4-添加数据库驱动依赖"><a href="#2-1-4-添加数据库驱动依赖" class="headerlink" title="2.1.4 添加数据库驱动依赖"></a>2.1.4 添加数据库驱动依赖</h4><blockquote>
<p>MyBatis Generator 需要链接数据库，肯定是需要对应数据库驱动的依赖的。</p>
</blockquote>
<blockquote>
<p>如下，给 MyBatis Generator 添加数据库驱动依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--mybatis的代码生成器的配置文件--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>src/main/resources/mybatis-generator-config.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--允许覆盖生成的文件--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- mysql的JDBC驱动 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p> 大部分情况下，我们的项目中已经配置过了对应数据库的JDBC驱动。</p>
<p>现在在插件中又配置一次，感觉有些冗余，maven 提供了 <strong>includeCompileDependencies</strong> 属性，让我们在插件中引用 dependencies 的依赖，这样就不需要重复配置了。 </p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--mybatis的代码生成器的配置文件--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>src/main/resources/mybatis-generator-config.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--允许覆盖生成的文件--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--将当前pom的依赖项添加到生成器的类路径中--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includeCompileDependencies</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">includeCompileDependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="2-1-5-添加其他依赖"><a href="#2-1-5-添加其他依赖" class="headerlink" title="2.1.5 添加其他依赖"></a>2.1.5 添加其他依赖</h4><blockquote>
<p>一般配置了 <strong>includeCompileDependencies</strong> 后就不需要配置其他依赖了，因为 <strong>includeCompileDependencies</strong> 会将当前 pom 的 <strong>dependencies</strong> 中所以 <strong>Compile</strong> 期的依赖全部添加到生成器的类路径中。</p>
</blockquote>
<blockquote>
<p>但有的人不想配置 <strong>includeCompileDependencies</strong> ，或者想在MyBatis Generator插件中使用另一个版本的依赖，就可以配置 <strong>dependencies</strong></p>
</blockquote>
<h3 id="2-2-Java-代码运行"><a href="#2-2-Java-代码运行" class="headerlink" title="2.2 Java 代码运行"></a>2.2 Java 代码运行</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.macro.mall.tiny.mbg;<br><br><span class="hljs-keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;<br><span class="hljs-keyword">import</span> org.mybatis.generator.config.Configuration;<br><span class="hljs-keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;<br><span class="hljs-keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用于生产MBG的代码</span><br><span class="hljs-comment"> * Created by macro on 2018/4/26.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//MBG 执行过程中的警告信息</span><br>        List&lt;String&gt; warnings = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        <span class="hljs-comment">//当生成的代码重复时，覆盖原代码</span><br>        <span class="hljs-keyword">boolean</span> overwrite = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-comment">//读取我们的 MBG 配置文件</span><br>        InputStream is = Generator.class.getResourceAsStream(<span class="hljs-string">&quot;/generatorConfig.xml&quot;</span>);<br>        ConfigurationParser cp = <span class="hljs-keyword">new</span> ConfigurationParser(warnings);<br>        Configuration config = cp.parseConfiguration(is);<br>        is.close();<br><br>        DefaultShellCallback callback = <span class="hljs-keyword">new</span> DefaultShellCallback(overwrite);<br>        <span class="hljs-comment">//创建 MBG</span><br>        MyBatisGenerator myBatisGenerator = <span class="hljs-keyword">new</span> MyBatisGenerator(config, callback, warnings);<br>        <span class="hljs-comment">//执行生成代码</span><br>        myBatisGenerator.generate(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">//输出警告信息</span><br>        <span class="hljs-keyword">for</span> (String warning : warnings) &#123;<br>            System.out.println(warning);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>



<h2 id="3、自定义注释生成器"><a href="#3、自定义注释生成器" class="headerlink" title="3、自定义注释生成器"></a>3、自定义注释生成器</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.macro.mall.tiny.mbg;<br><br><span class="hljs-keyword">import</span> org.mybatis.generator.api.IntrospectedColumn;<br><span class="hljs-keyword">import</span> org.mybatis.generator.api.IntrospectedTable;<br><span class="hljs-keyword">import</span> org.mybatis.generator.api.dom.java.Field;<br><span class="hljs-keyword">import</span> org.mybatis.generator.internal.DefaultCommentGenerator;<br><span class="hljs-keyword">import</span> org.mybatis.generator.internal.util.StringUtility;<br><br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义注释生成器</span><br><span class="hljs-comment"> * Created by macro on 2018/4/26.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommentGenerator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DefaultCommentGenerator</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> addRemarkComments = <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置用户配置的参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addConfigurationProperties</span><span class="hljs-params">(Properties properties)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.addConfigurationProperties(properties);<br>        <span class="hljs-keyword">this</span>.addRemarkComments = StringUtility.isTrue(properties.getProperty(<span class="hljs-string">&quot;addRemarkComments&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 给字段添加注释</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addFieldComment</span><span class="hljs-params">(Field field, IntrospectedTable introspectedTable,</span></span><br><span class="hljs-function"><span class="hljs-params">                                IntrospectedColumn introspectedColumn)</span> </span>&#123;<br>        String remarks = introspectedColumn.getRemarks();<br>        <span class="hljs-comment">//根据参数和备注信息判断是否添加备注信息</span><br>        <span class="hljs-keyword">if</span> (addRemarkComments &amp;&amp; StringUtility.stringHasValue(remarks)) &#123;<br>            addFieldJavaDoc(field, remarks);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 给model的字段添加注释</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addFieldJavaDoc</span><span class="hljs-params">(Field field, String remarks)</span> </span>&#123;<br>        <span class="hljs-comment">//文档注释开始</span><br>        field.addJavaDocLine(<span class="hljs-string">&quot;/**&quot;</span>);<br>        <span class="hljs-comment">//获取数据库字段的备注信息</span><br>        String[] remarkLines = remarks.split(System.getProperty(<span class="hljs-string">&quot;line.separator&quot;</span>));<br>        <span class="hljs-keyword">for</span> (String remarkLine : remarkLines) &#123;<br>            field.addJavaDocLine(<span class="hljs-string">&quot; * &quot;</span> + remarkLine);<br>        &#125;<br>        addJavadocTag(field, <span class="hljs-keyword">false</span>);<br>        field.addJavaDocLine(<span class="hljs-string">&quot; */&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus 代码生成器</title>
    <url>/2020/12/14/MyBatis-plus%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p> 全新的 <code>MyBatis-Plus</code> 3.0 版本基于 JDK8，提供了 <code>lambda</code> 形式的调用，所以安装集成 MP3.0 要求如下： </p>
<p> <a href="https://mybatis.plus/guide/config.html">官方文档</a></p>
</blockquote>
<a id="more"></a>

<ul>
<li><p>Spring Boot:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>Spring MVC:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>



</li>
</ul>
<h1 id="MyBatis-Plus-代码生成器"><a href="#MyBatis-Plus-代码生成器" class="headerlink" title="MyBatis-Plus 代码生成器"></a><a href="https://mybatis.plus/guide/generator.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5">MyBatis-Plus 代码生成器</a></h1><h2 id="1、添加依赖："><a href="#1、添加依赖：" class="headerlink" title="1、添加依赖："></a>1、添加依赖：</h2><p> MyBatis-Plus 从 <code>3.0.3</code> 之后移除了代码生成器与模板引擎的默认依赖，需要手动添加相关依赖： </p>
<ul>
<li>添加 代码生成器 依赖 </li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li><p>添加 模板引擎 依赖： MyBatis-Plus 支持 Velocity（默认）、Freemarker、Beetl</p>
<p><strong>Velocity</strong></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.velocity<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>velocity-engine-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>​     <strong>Freemarker</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>​    <strong>Beetl</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.ibeetl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>beetl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="2、编写配置：参考"><a href="#2、编写配置：参考" class="headerlink" title="2、编写配置：参考"></a>2、编写配置：<a href="https://mybatis.plus/config/generator-config.html#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE">参考</a></h2><ul>
<li><p>创建生成器对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1、代码生成器</span><br>      AutoGenerator mpg = <span class="hljs-keyword">new</span> AutoGenerator();<br></code></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>配置 GlobalConfig ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2、全局配置</span><br>GlobalConfig gc = <span class="hljs-keyword">new</span> GlobalConfig();<br>String projectPath = System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>log.info(projectPath);<br>gc.setOutputDir(projectPath+<span class="hljs-string">&quot;/src/main/java&quot;</span>);<br>gc.setAuthor(<span class="hljs-string">&quot;dell&quot;</span>);<br>gc.setOpen(<span class="hljs-keyword">false</span>);<br>gc.setFileOverride(<span class="hljs-keyword">false</span>);                      <span class="hljs-comment">//重新生成时文件是否覆盖</span><br>gc.setServiceName(<span class="hljs-string">&quot;%sService&quot;</span>);	                <span class="hljs-comment">//去掉Service接口的首字母I</span><br>gc.setIdType(IdType.ID_WORKER_STR);             <span class="hljs-comment">//主键策略</span><br>gc.setDateType(DateType.ONLY_DATE);             <span class="hljs-comment">//定义生成的实体类中日期类型</span><br>gc.setSwagger2(<span class="hljs-keyword">true</span>);                           <span class="hljs-comment">//开启Swagger2模式</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>配置数据源：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 3、数据源配置</span><br>DataSourceConfig dsc = <span class="hljs-keyword">new</span> DataSourceConfig();<br>dsc.setUrl(<span class="hljs-string">&quot;jdbc:mysql://192.168.121.152:3306/newbee_mall_db?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;</span>);<br>dsc.setDriverName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>dsc.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>dsc.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>dsc.setDbType(DbType.MYSQL);<br>mpg.setDataSource(dsc);<br></code></pre></td></tr></table></figure>
</li>
<li><p>包配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// 4、包配置</span><br>        PackageConfig pc = <span class="hljs-keyword">new</span> PackageConfig();<br><span class="hljs-comment">//        pc.setModuleName(&quot;provider&quot;);    //模块名</span><br>        pc.setParent(<span class="hljs-string">&quot;edu.lsl&quot;</span>);<br>        pc.setController(<span class="hljs-string">&quot;controller&quot;</span>);<br>        pc.setEntity(<span class="hljs-string">&quot;bean&quot;</span>);<br>        pc.setService(<span class="hljs-string">&quot;service&quot;</span>);<br>        pc.setMapper(<span class="hljs-string">&quot;mapper&quot;</span>);<br>        mpg.setPackageInfo(pc);<br></code></pre></td></tr></table></figure>
</li>
<li><p>策略配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// 5、策略配置</span><br>        StrategyConfig strategy = <span class="hljs-keyword">new</span> StrategyConfig();<br>        strategy.setNaming(NamingStrategy.underline_to_camel);          <span class="hljs-comment">//数据库表映射到实体的命名策略</span><br>        strategy.setColumnNaming(NamingStrategy.underline_to_camel);    <span class="hljs-comment">//数据库表字段映射到实体的命名策略</span><br>        strategy.setEntityLombokModel(<span class="hljs-keyword">true</span>);                            <span class="hljs-comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span><br>        strategy.setRestControllerStyle(<span class="hljs-keyword">true</span>);                          <span class="hljs-comment">//restful api风格控制器</span><br>        strategy.setControllerMappingHyphenStyle(<span class="hljs-keyword">true</span>);                 <span class="hljs-comment">//url中驼峰转连字符</span><br>        <span class="hljs-comment">// 公共父类</span><br><span class="hljs-comment">//        strategy.setSuperControllerClass(&quot;你自己的父类控制器,没有就不用设置!&quot;);</span><br>        <span class="hljs-comment">// 写于父类中的公共字段</span><br>        strategy.setSuperEntityColumns(<span class="hljs-string">&quot;id&quot;</span>);<br><span class="hljs-comment">//        strategy.setInclude(scanner(&quot;表名，多个英文逗号分割&quot;).split(&quot;,&quot;));</span><br>        strategy.setInclude(<span class="hljs-string">&quot;tb_newbee_mall_admin_user&quot;</span>);<br>        strategy.setControllerMappingHyphenStyle(<span class="hljs-keyword">true</span>);<br><span class="hljs-comment">//        strategy.setTablePrefix(pc.getModuleName() + &quot;_&quot;);            //生成实体时去掉表前缀</span><br>        strategy.setTablePrefix(<span class="hljs-string">&quot;tb_newbee_&quot;</span>);                          <span class="hljs-comment">//生成实体时去掉表前缀</span><br>        mpg.setStrategy(strategy);<br></code></pre></td></tr></table></figure>
</li>
<li><p>模板配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">mpg.setTemplateEngine(<span class="hljs-keyword">new</span> FreemarkerTemplateEngine());          <span class="hljs-comment">// 添加 模板引擎</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 6、执行</span><br>mpg.execute();<br></code></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3、Demo测试"><a href="#3、Demo测试" class="headerlink" title="3、Demo测试"></a>3、Demo测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> edu.lsl.mbg;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span>: Mybatis-plus</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: Mybatis-plus 代码生成器demo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SongLin.Lu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/12/14 - 15:56</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CodeGenerator</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String DataBaseName = <span class="hljs-string">&quot;newbee_mall_db&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String Url = <span class="hljs-string">&quot;jdbc:mysql://192.168.121.152:3306/&quot;</span>+DataBaseName+<span class="hljs-string">&quot;?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String DriverName = <span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String Username = <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String Password = <span class="hljs-string">&quot;123456&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String projectPath = System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 1、代码生成器</span><br>        AutoGenerator mpg = <span class="hljs-keyword">new</span> AutoGenerator();<br><br>        <span class="hljs-comment">// 2、全局配置</span><br>        GlobalConfig gc = <span class="hljs-keyword">new</span> GlobalConfig()<br>                .setAuthor(<span class="hljs-string">&quot;dell&quot;</span>)<br>                .setDateType(DateType.ONLY_DATE)            <span class="hljs-comment">//定义生成的实体类中日期类型</span><br>                .setFileOverride(<span class="hljs-keyword">false</span>)                     <span class="hljs-comment">//重新生成时文件是否覆盖</span><br>                .setIdType(IdType.ID_WORKER_STR)            <span class="hljs-comment">//主键策略</span><br>                .setOpen(<span class="hljs-keyword">false</span>)<br>                .setOutputDir(projectPath+<span class="hljs-string">&quot;/src/main/java&quot;</span>) <span class="hljs-comment">//输出路径</span><br>                .setServiceName(<span class="hljs-string">&quot;%sService&quot;</span>)                <span class="hljs-comment">//去掉Service接口的首字母I</span><br>                .setSwagger2(<span class="hljs-keyword">true</span>)                          <span class="hljs-comment">//开启Swagger2模式</span><br>                .setActiveRecord(<span class="hljs-keyword">false</span>)<br>                .setControllerName(<span class="hljs-keyword">null</span>);<br>        mpg.setGlobalConfig(gc);<br><br>        <span class="hljs-comment">// 3、数据源配置</span><br>        DataSourceConfig dsc = <span class="hljs-keyword">new</span> DataSourceConfig()<br><span class="hljs-comment">//                .setDbQuery()               // 数据库信息查询类</span><br><span class="hljs-comment">//                .setSchemaName()</span><br><span class="hljs-comment">//                .setTypeConvert()</span><br>                .setDbType(DbType.MYSQL)<br>                .setDriverName(DriverName)<br>                .setPassword(Password)<br>                .setUrl(Url)<br>                .setUsername(Username);<br>        mpg.setDataSource(dsc);<br><br>        <span class="hljs-comment">// 4、包配置</span><br>        PackageConfig pc = <span class="hljs-keyword">new</span> PackageConfig()<br>                .setParent(<span class="hljs-string">&quot;edu.lsl&quot;</span>)<br>                .setController(<span class="hljs-string">&quot;controller&quot;</span>)<br>                .setEntity(<span class="hljs-string">&quot;bean&quot;</span>)<br>                .setMapper(<span class="hljs-string">&quot;mapper&quot;</span>)<br>                .setService(<span class="hljs-string">&quot;service&quot;</span>)<br>                .setModuleName(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-comment">//                .setPathInfo()              // 路径配置信息</span><br>                .setServiceImpl(<span class="hljs-string">&quot;service.impl&quot;</span>)<br>                .setXml(<span class="hljs-string">&quot;mapper.xml&quot;</span>);<br>        mpg.setPackageInfo(pc);<br><br>        <span class="hljs-comment">// 5、策略配置</span><br>        StrategyConfig strategy = <span class="hljs-keyword">new</span> StrategyConfig()<br>                .setControllerMappingHyphenStyle(<span class="hljs-keyword">true</span>)                  <span class="hljs-comment">//url中驼峰转连字符</span><br>                .setColumnNaming(NamingStrategy.underline_to_camel)     <span class="hljs-comment">//数据库表映射到实体的命名策略</span><br>                .setNaming(NamingStrategy.underline_to_camel)<br>                .setEntityLombokModel(<span class="hljs-keyword">true</span>)<br>                .setRestControllerStyle(<span class="hljs-keyword">true</span>)                           <span class="hljs-comment">//restful api风格控制器</span><br>                .setTablePrefix(<span class="hljs-string">&quot;tb_newbee_&quot;</span>)                            <span class="hljs-comment">//生成实体时去掉表前缀</span><br><span class="hljs-comment">//                .setSuperControllerClass()                              //公共父类 , 你自己的父类控制器,没有就不用设置!</span><br><span class="hljs-comment">//                .setSuperEntityClass()                                  //自定义继承的Entity类全称，带包名</span><br><span class="hljs-comment">//                .setSuperEntityColumns()                                //写于父类中的公共字段</span><br>                .setInclude(<br>                        <span class="hljs-string">&quot;tb_newbee_mall_admin_user&quot;</span>,<br>                        <span class="hljs-string">&quot;tb_newbee_mall_carousel&quot;</span><br>                );<br>        mpg.setStrategy(strategy);<br><br>        <span class="hljs-comment">// 6、添加模板引擎</span><br>        mpg.setTemplateEngine(<span class="hljs-keyword">new</span> FreemarkerTemplateEngine());          <span class="hljs-comment">// 添加 模板引擎</span><br><br>        <span class="hljs-comment">// 7、执行</span><br>        mpg.execute();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<h2 id="4、参考博客："><a href="#4、参考博客：" class="headerlink" title="4、参考博客："></a>4、参考博客：</h2><ul>
<li><a href="https://www.cnblogs.com/l-y-h/p/12859477.html">[累成一条狗]</a></li>
</ul>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware 虚拟机给Ubuntu根分区扩容</title>
    <url>/2020/11/13/VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%99Ubuntu%E6%A0%B9%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9/</url>
    <content><![CDATA[<blockquote>
<p>用VMware安装了Ubuntu service 18.04 ，刚开始给了30G磁盘空间，使用发现空间不够了，想对磁盘进行扩容。但是直接在VMware点击扩展后发现Ubuntu容量并没有变化，原因是需要在Ubuntu里面进行处理：对分区进行合并。</p>
</blockquote>
<a id="more"></a>

<h1 id="1、改变虚拟磁盘大小"><a href="#1、改变虚拟磁盘大小" class="headerlink" title="1、改变虚拟磁盘大小"></a>1、改变虚拟磁盘大小</h1><ul>
<li>关闭Ubuntu</li>
<li>右键—&gt;设置—&gt;硬盘—-&gt;实用工具—&gt;扩展 </li>
<li>填入扩展后的分区大小</li>
<li>确定</li>
</ul>
<h1 id="2、查看磁盘使用情况"><a href="#2、查看磁盘使用情况" class="headerlink" title="2、查看磁盘使用情况"></a>2、查看磁盘使用情况</h1><ul>
<li><p>开启Ubuntu</p>
</li>
<li><p>输入：<code>df -h</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">klein@klein:~$ df -h<br>Filesystem      Size  Used Avail Use% Mounted on<br>udev            955M     0  955M   0% /dev<br>tmpfs           198M  1.3M  196M   1% /run<br>/dev/sda2        30G   14G   15G  48% /<br>tmpfs           986M     0  986M   0% /dev/shm<br>tmpfs           5.0M     0  5.0M   0% /run/lock<br>tmpfs           986M     0  986M   0% /sys/fs/cgroup<br>/dev/loop0       98M   98M     0 100% /snap/core/10185<br>/dev/loop1      205M  205M     0 100% /snap/microk8s/1710<br>/dev/loop2       98M   98M     0 100% /snap/core/10126<br>/dev/loop3      205M  205M     0 100% /snap/microk8s/1769<br>tmpfs           198M     0  198M   0% /run/user/1000<br></code></pre></td></tr></table></figure>



</li>
</ul>
<h1 id="3、在Ubuntu-shell进行分区扩容操作"><a href="#3、在Ubuntu-shell进行分区扩容操作" class="headerlink" title="3、在Ubuntu shell进行分区扩容操作"></a>3、在Ubuntu shell进行分区扩容操作</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">klein@klein:~$ sudo fdisk /dev/sda<br><br>Welcome to fdisk (util-linux 2.31.1).<br>Changes will remain in memory only, until you decide to write them.<br>Be careful before using the write command.<br></code></pre></td></tr></table></figure>

<ul>
<li><p>打印查看分区划分情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Command (m for help): p<br>Disk /dev/sda: 40 GiB, 42949672960 bytes, 83886080 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disklabel type: gpt<br>Disk identifier: BB1002CF-D749-4A1F-8DF7-EF0945D4DF0E<br><br>Device     Start      End  Sectors Size Type<br>/dev/sda1   2048     4095     2048   1M BIOS boot<br>/dev/sda2   4096 83886046 83881951  40G Linux filesystem<br></code></pre></td></tr></table></figure>
</li>
<li><p>删除需要扩容的分区，这里是2，完成后不要执行 w 写入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Command (m for help): d<br>Partition number (1,2, default 2): 2<br><br><br>Command (m for help): p<br>Disk /dev/sda: 100 GiB, 107374182400 bytes, 209715200 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disklabel type: gpt<br>Disk identifier: 0976B291-839E-463D-BD05-936253587234<br><br>Device     Start   End Sectors Size Type<br>/dev/sda1   2048  4095    2048   1M BIOS boot<br></code></pre></td></tr></table></figure>
</li>
<li><p>创建新分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建新分区 ，First和Last sector直接回车默认值，因为我是把剩下所有空闲的空间全部分配到扩容的新分区内</span><br><span class="hljs-meta">#</span><span class="bash"> 若是部分分配，请在Last sector输入对应的值</span><br>Command (m for help): n<br>Partition number (2-128, default 2):<br>First sector (4096-209715166, default 4096):<br>Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (4096-209715166, default 209715166):<br><br>Created a new partition 2 of type &#x27;Linux filesystem&#x27; and of size 100 GiB.<br>Partition &#x27;#2&#x27; contains a ext4 signature.<br><br><span class="hljs-meta">#</span><span class="bash"> No</span><br>Do you want to remove the signature? [Y]es/[N]o: n<br></code></pre></td></tr></table></figure>
</li>
<li><p>查看新分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Command (m for help): p<br><br>Disk /dev/sda: 100 GiB, 107374182400 bytes, 209715200 sectors<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disklabel type: gpt<br>Disk identifier: 0976B291-839E-463D-BD05-936253587234<br><br>Device     Start       End   Sectors  Size Type<br>/dev/sda1   2048      4095      2048    1M BIOS boot<br>/dev/sda2   4096 209715166 209711071  100G Linux filesystem<br></code></pre></td></tr></table></figure>
</li>
<li><p>确认无误后 w 写入操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Command (m for help): w<br><br>The partition table has been altered.<br>Syncing disks.<br></code></pre></td></tr></table></figure>
</li>
<li><p>需要重启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">klein@klein:~$ sudo reboot<br></code></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="4、执行扩容操作"><a href="#4、执行扩容操作" class="headerlink" title="4、执行扩容操作"></a>4、执行扩容操作</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 执行扩容操作</span><br>klein@klein:~$ sudo resize2fs /dev/sda2<br></code></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>auto.js蚂蚁森林收能量</title>
    <url>/2020/11/01/auto.js%E8%9A%82%E8%9A%81%E6%A3%AE%E6%9E%97%E6%94%B6%E8%83%BD%E9%87%8F/</url>
    <content><![CDATA[<ul>
<li>在网上看了一些自动收能量的脚本</li>
<li>写了一个脚本</li>
<li>使用AutoJs运行<ul>
<li>AutoJS下载地址 :<a href="https://github.com/kleinlsl/auto_alipay/releases/download/auto_alipay_v1.0/Auto.js.apk">here</a></li>
</ul>
</li>
</ul>
<a id="more"></a>

<ul>
<li><p>运行步骤如下：</p>
<ul>
<li>1.解锁（点亮屏幕，切换到输入密码界面，输入密码）</li>
<li>2.打开支付宝</li>
<li>3.找到蚂蚁森林</li>
<li>4.收取自己的能量</li>
<li>5.偷取他人能量</li>
</ul>
</li>
<li><p>参考资料：</p>
<ul>
<li><a href="https://github.com/hyb1996">https://github.com/hyb1996</a></li>
<li><a href="https://github.com/congwulong/alipay_autojs">https://github.com/congwulong/alipay_autojs</a> </li>
</ul>
</li>
<li><p>源码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">var</span> morningTime = <span class="hljs-string">&quot;07:22&quot;</span>;<span class="hljs-comment">//自己运动能量生成时间</span><br><span class="hljs-keyword">var</span> startTime = <span class="hljs-string">&quot;07:00&quot;</span>;<br><span class="hljs-keyword">var</span> endTime = <span class="hljs-string">&quot;7:35&quot;</span>;<br><span class="hljs-keyword">var</span> screen_width = <span class="hljs-number">1080</span>;  <span class="hljs-comment">//设置屏幕的宽度，像素值</span><br><span class="hljs-keyword">var</span> screen_height = <span class="hljs-number">2340</span>; <span class="hljs-comment">//设置屏幕的高度，像素值</span><br><br>sleep(<span class="hljs-number">2000</span>);<br>unlock();<br>sleep(<span class="hljs-number">2000</span>);<br><br>threads.start(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//在子线程中调用observeKey()从而使按键事件处理在子线程执行</span><br>    events.observeKey();<br>    events.on(<span class="hljs-string">&quot;key_down&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">keyCode, events</span>)</span>&#123;<br>        <span class="hljs-comment">//音量键关闭脚本</span><br>        <span class="hljs-keyword">if</span>(keyCode == keys.volume_down)&#123;<br>            toast(<span class="hljs-string">&quot;您选择退出脚本！&quot;</span>)<br>            sleep(<span class="hljs-number">2000</span>);<br>            exit();<br>        &#125;<br>    &#125;);<br>&#125;);<br><br>mainEntrence();<br><br><span class="hljs-comment">//程序主入口</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mainEntrence</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>    <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-comment">//尝试打开支付宝</span><br>        <span class="hljs-keyword">if</span> (!openAlipay()) &#123;<br>            toastLog(<span class="hljs-string">&quot;打开支付宝失败，退出程序&quot;</span>);<br>            exit();<br>        &#125;<br>        <span class="hljs-comment">// 尝试进入自己的蚂蚁森林，若失败跳过</span><br>        <span class="hljs-keyword">if</span>(!enterMyMainPage())&#123;<br>            toastLog(<span class="hljs-string">&quot;尝试进入自己的蚂蚁森林，若失败退出程序&quot;</span>);<br>            exit();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!collectEnergy(<span class="hljs-string">&quot;收取自己能量中&quot;</span>))&#123;<br>            toastLog(<span class="hljs-string">&quot;如果不在蚂蚁森林，退出程序&quot;</span>);<br>            exit();<br>        &#125;<br>        <span class="hljs-comment">// 找能量</span><br>        <span class="hljs-keyword">while</span>(findOthers())&#123;<br>            back();<br>            sleep(<span class="hljs-number">300</span>);<br>        &#125;<br>        <span class="hljs-comment">// 执行返回 4 次</span><br>        whenComplete(<span class="hljs-number">4</span>);<br>        <span class="hljs-comment">// 睡眠 1 秒，等待下一次收集</span><br>        sleep(<span class="hljs-number">1000</span>);<br>    &#125;<span class="hljs-keyword">while</span>(checkTime());<br>    <br>    exit();<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 收其他人能量</span><br><span class="hljs-comment">* return 是否有能量可收</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findOthers</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>    <span class="hljs-keyword">if</span>(textEndsWith(<span class="hljs-string">&quot;种树&quot;</span>).exists())&#123;<br>        <span class="hljs-comment">// 到了自己能量时间</span><br>        <span class="hljs-keyword">if</span>(myEnergyTime())&#123;<br>            collectEnergy(<span class="hljs-string">&quot;收取自己能量&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 点击按钮寻找能量，不同手机需要更改位置参数</span><br>        click(<span class="hljs-number">960</span>,<span class="hljs-number">1570</span>);<br>        sleep(<span class="hljs-number">500</span>);<br>        <span class="hljs-keyword">return</span> collectEnergy(<span class="hljs-string">&quot;收其他人能量中&quot;</span>);<br>    &#125;<br>    toastLog(<span class="hljs-string">&quot;没有能量了&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解锁函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unlock</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!device.isScreenOn())&#123;<br>        <span class="hljs-comment">//点亮屏幕</span><br>        device.wakeUp();<br>        <span class="hljs-comment">//由于MIUI的解锁有变速检测，因此要点开时间以进入密码界面</span><br>        sleep(<span class="hljs-number">1000</span>);<br>        swipe(<span class="hljs-number">500</span>, <span class="hljs-number">0</span>, <span class="hljs-number">500</span>, <span class="hljs-number">1900</span>, <span class="hljs-number">2000</span>);<br>        click(<span class="hljs-number">100</span>,<span class="hljs-number">150</span>); <br>        <span class="hljs-comment">//输入屏幕解锁密码，其他密码请自行修改</span><br>        sleep(<span class="hljs-number">2000</span>);<br>        click(<span class="hljs-number">250</span>,<span class="hljs-number">1440</span>);<br>        sleep(<span class="hljs-number">500</span>);<br>       <br>        click(<span class="hljs-number">550</span>,<span class="hljs-number">1640</span>);<br>        sleep(<span class="hljs-number">500</span>);<br>        <br>        click(<span class="hljs-number">250</span>,<span class="hljs-number">1440</span>);<br>        sleep(<span class="hljs-number">500</span>);<br>        <br>        click(<span class="hljs-number">840</span>,<span class="hljs-number">1640</span>);<br>        sleep(<span class="hljs-number">500</span>);    <br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 收能量函数</span><br><span class="hljs-comment"> * return 是否收取成功</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">collectEnergy</span>(<span class="hljs-params">info</span>) </span>&#123;<br>    <span class="hljs-comment">// 判断是否在蚂蚁森林</span><br>    <span class="hljs-keyword">if</span>(!textContains(<span class="hljs-string">&quot;最新动态&quot;</span>).exists())&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> row=screen_height*<span class="hljs-number">0.256</span>;row&lt;screen_height*<span class="hljs-number">0.376</span>;row+=<span class="hljs-number">80</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> col=screen_width*<span class="hljs-number">0.185</span>;col&lt;screen_width*<span class="hljs-number">0.815</span>;col+=<span class="hljs-number">80</span>)&#123;<br>            sleep(<span class="hljs-number">100</span>);<br>            click(col,row);<br>        &#125;<br>    &#125;<br>    toastLog(info);<br>    sleep(<span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从支付宝主页进入蚂蚁森林我的主页</span><br><span class="hljs-comment"> * return 是否进入</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">enterMyMainPage</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//五次尝试蚂蚁森林入</span><br>    <span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 拉至顶端</span><br>    swipe(screen_width*<span class="hljs-number">0.5</span>,screen_height*<span class="hljs-number">0.5</span>,screen_width*<span class="hljs-number">0.5</span>,screen_height*<span class="hljs-number">0.25</span>,<span class="hljs-number">500</span>);<br>    sleep(<span class="hljs-number">500</span>);<br>    swipe(screen_width*<span class="hljs-number">0.5</span>,screen_height*<span class="hljs-number">0.25</span>,screen_width*<span class="hljs-number">0.5</span>,screen_height*<span class="hljs-number">0.5</span>,<span class="hljs-number">500</span>);<br>    <br>    <span class="hljs-keyword">while</span> (!textEndsWith(<span class="hljs-string">&quot;蚂蚁森林&quot;</span>).exists() &amp;&amp; !descEndsWith(<span class="hljs-string">&quot;蚂蚁森林&quot;</span>).exists() &amp;&amp; i&lt;=<span class="hljs-number">5</span>)&#123;<br>        sleep(<span class="hljs-number">1000</span>);<br>        i++;   <br>    &#125;  <br>    <span class="hljs-keyword">if</span>(i&gt;=<span class="hljs-number">5</span>)&#123;<br>        toastLog(<span class="hljs-string">&quot;没有找到蚂蚁森林入口，尝试中&quot;</span>);<br>        clickByTextDesc(<span class="hljs-string">&quot;全部&quot;</span>,<span class="hljs-number">0</span>);<br>        sleep(<span class="hljs-number">2000</span>);<br>        swipe(screen_width*<span class="hljs-number">0.5</span>,screen_height*<span class="hljs-number">0.3</span>,screen_width*<span class="hljs-number">0.5</span>,screen_height*<span class="hljs-number">0.7</span>,<span class="hljs-number">1000</span>);<br>        sleep(<span class="hljs-number">2000</span>);<br>        swipe(screen_width*<span class="hljs-number">0.5</span>,screen_height*<span class="hljs-number">0.3</span>,screen_width*<span class="hljs-number">0.5</span>,screen_height*<span class="hljs-number">0.7</span>,<span class="hljs-number">1000</span>);<br>        sleep(<span class="hljs-number">2000</span>);<br>    &#125;<br>    clickByTextDesc(<span class="hljs-string">&quot;蚂蚁森林&quot;</span>,<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">//等待进入自己的主页,10次尝试</span><br>    sleep(<span class="hljs-number">3000</span>);<br>    i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!textEndsWith(<span class="hljs-string">&quot;种树&quot;</span>).exists() &amp;&amp; !descEndsWith(<span class="hljs-string">&quot;种树&quot;</span>).exists() &amp;&amp; i&lt;=<span class="hljs-number">10</span>)&#123;<br>        sleep(<span class="hljs-number">1000</span>);<br>        i++;<br>    &#125;<br>    toastLog(<span class="hljs-string">&quot;第&quot;</span>+i+<span class="hljs-string">&quot;次尝试进入自己主页&quot;</span>);<br>    <span class="hljs-keyword">if</span>(i&gt;=<span class="hljs-number">10</span>)&#123;<br>        toastLog(<span class="hljs-string">&quot;进入自己能量主页失败&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义的点击函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>energyType </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>paddingY </span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clickByTextDesc</span>(<span class="hljs-params">energyType,paddingY</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> clicked = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(descEndsWith(energyType).exists())&#123;<br>        descEndsWith(energyType).find().forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">pos</span>)</span>&#123;<br>            <span class="hljs-keyword">var</span> posb=pos.bounds();<br>            <span class="hljs-keyword">if</span>(posb.centerX()&lt;<span class="hljs-number">0</span> || posb.centerY()-paddingY&lt;<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-comment">//toastLog(pos.id());</span><br>            <span class="hljs-keyword">var</span> str = pos.id();<br>            <span class="hljs-keyword">if</span>(str != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">if</span>(str.search(<span class="hljs-string">&quot;search&quot;</span>) == <span class="hljs-number">-1</span>)&#123;<br>                    click(posb.centerX(),posb.centerY()-paddingY);<br>                     <span class="hljs-comment">//toastLog(&quot;get it 1&quot;);</span><br>                     clicked = <span class="hljs-literal">true</span>;   <br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                click(posb.centerX(),posb.centerY()-paddingY);<br>                <span class="hljs-comment">//toastLog(&quot;get it 2&quot;);</span><br>                clicked = <span class="hljs-literal">true</span>;<br>            &#125;<br>            sleep(<span class="hljs-number">100</span>);<br>        &#125;);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(textEndsWith(energyType).exists() &amp;&amp; clicked == <span class="hljs-literal">false</span>)&#123;<br>        textEndsWith(energyType).find().forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">pos</span>)</span>&#123;<br>            <span class="hljs-keyword">var</span> posb=pos.bounds();<br>            <span class="hljs-keyword">if</span>(posb.centerX()&lt;<span class="hljs-number">0</span> || posb.centerY()-paddingY&lt;<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-comment">//toastLog(pos.id());</span><br>            <span class="hljs-keyword">var</span> str = pos.id();<br>            <span class="hljs-keyword">if</span>(str != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">if</span>(str.search(<span class="hljs-string">&quot;search&quot;</span>) == <span class="hljs-number">-1</span>)&#123;<br>                    click(posb.centerX(),posb.centerY()-paddingY); <br>                    <span class="hljs-comment">//toastLog(&quot;get it 3&quot;); </span><br>                    clicked = <span class="hljs-literal">true</span>;  <br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                click(posb.centerX(),posb.centerY()-paddingY);<br>                <span class="hljs-comment">//toastLog(&quot;get it 4&quot;);</span><br>                clicked = <span class="hljs-literal">true</span>;<br>            &#125;<br>            sleep(<span class="hljs-number">100</span>);<br>        &#125;);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> clicked;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 结束后返回主页面</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>value ： 返回次数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">whenComplete</span>(<span class="hljs-params">value</span>) </span>&#123;<br>    toastLog(<span class="hljs-string">&quot;结束&quot;</span>);<br>    <span class="hljs-keyword">while</span>(value&gt;<span class="hljs-number">0</span>)&#123;<br>        back();<br>        sleep(<span class="hljs-number">1500</span>);<br>        value--;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 检测当前时间是否在指定范围内</span><br><span class="hljs-comment"> * return 是：否</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkTime</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> now =<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-keyword">var</span> hour=now.getHours();<br>    <span class="hljs-keyword">var</span> minu=now.getMinutes();<br>    <span class="hljs-keyword">var</span> time_a=startTime.split(<span class="hljs-string">&quot;:&quot;</span>);<br>    <span class="hljs-keyword">var</span> time_b=endTime.split(<span class="hljs-string">&quot;:&quot;</span>);<br>    <span class="hljs-keyword">var</span> timea = <span class="hljs-number">60</span>*<span class="hljs-built_in">Number</span>(time_a[<span class="hljs-number">0</span>])+<span class="hljs-built_in">Number</span>(time_a[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">var</span> timeb = <span class="hljs-number">60</span>*<span class="hljs-built_in">Number</span>(time_b[<span class="hljs-number">0</span>])+<span class="hljs-built_in">Number</span>(time_b[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">var</span> time  = <span class="hljs-number">60</span>*hour + minu;<br>    <span class="hljs-keyword">if</span>(time&gt;=timea &amp;&amp; time&lt;=timeb)&#123;<br>        <span class="hljs-comment">//sleep(2000);</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;   <br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否到了收自己能量的时间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myEnergyTime</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> now =<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-keyword">var</span> hour=now.getHours();<br>    <span class="hljs-keyword">var</span> minu=now.getMinutes();<br>    <span class="hljs-keyword">var</span> mytime=morningTime.split(<span class="hljs-string">&quot;:&quot;</span>);<br>    <br>    <span class="hljs-keyword">if</span>(mytime[<span class="hljs-number">0</span>]==hour &amp;&amp; (mytime[<span class="hljs-number">1</span>]==minu || mytime[<span class="hljs-number">1</span>]==minu<span class="hljs-number">-1</span>) )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;   <br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 唤醒支付宝</span><br><span class="hljs-comment"> * return 是否成功</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">openAlipay</span>(<span class="hljs-params"></span>)</span>&#123;<br>    launchApp(<span class="hljs-string">&quot;支付宝&quot;</span>);<br>    toastLog(<span class="hljs-string">&quot;等待支付宝启动&quot;</span>);<br>    <span class="hljs-comment">// sleep(3000);</span><br>    <span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span> (!textEndsWith(<span class="hljs-string">&quot;扫一扫&quot;</span>).exists() &amp;&amp; !descEndsWith(<span class="hljs-string">&quot;扫一扫&quot;</span>).exists() &amp;&amp; i&lt;=<span class="hljs-number">5</span>)&#123;<br>        sleep(<span class="hljs-number">2000</span>);<br>        <span class="hljs-comment">// 点击首页，防止进入后在其他菜单</span><br>        clickByTextDesc(<span class="hljs-string">&quot;首页&quot;</span>,<span class="hljs-number">0</span>);<br>        i++;<br>    &#125;<br>    toastLog(<span class="hljs-string">&quot;第&quot;</span>+i+<span class="hljs-string">&quot;次尝试进入支付宝主页&quot;</span>);<br>    <span class="hljs-keyword">if</span>(i&gt;=<span class="hljs-number">5</span>)&#123;<br>        toastLog(<span class="hljs-string">&quot;没有找到支付宝首页&quot;</span>);<br>        sleep(<span class="hljs-number">1000</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>    <br><br><br></code></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>进程防杀笔记</title>
    <url>/2020/10/23/%E8%BF%9B%E7%A8%8B%E9%98%B2%E6%9D%80%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一、Linux的信号量（signal）"><a href="#一、Linux的信号量（signal）" class="headerlink" title="一、Linux的信号量（signal）"></a>一、Linux的信号量（signal）</h2><blockquote>
<p>信号是进程之间相互传递消息的一种方法，信号被称为软中断信号，是进程控制的一部分，用来通知进程发生了异步事件， 进程之间可以互相通过系统调用 <code>kill</code> 发送软中断信号。</p>
<p>信号只是用来通知某进程发生了什么，并不给进程传递数据。</p>
</blockquote>
<a id="more"></a>

<blockquote>
<p><a href="https://blog.csdn.net/c453787298/article/details/23844017">signal-01</a> 、<a href="https://blog.csdn.net/weixin_42350212/article/details/80588973">signal-02</a></p>
</blockquote>
<ul>
<li><p>接收信号的进程对各种信号有三种不同的处理方式：</p>
<ul>
<li><p>对需要处理的信号，进程指定特定的函数进行处理</p>
</li>
<li><p>忽略某个信号</p>
</li>
<li><p>对信号的处理保留系统默认值，大部分信号的处理是终止程序</p>
</li>
</ul>
</li>
<li><p>Linux系统的两大信号：</p>
<ul>
<li>POSIX标准的规则信号（regular signal 1-31 编号）</li>
<li>实时信号（real-time signal 32-63）</li>
</ul>
</li>
<li><p>规则信号表</p>
<table>
<thead>
<tr>
<th align="left">信号编号</th>
<th align="left">名称</th>
<th align="left">默认动作</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">SIGHUP</td>
<td align="left">终止</td>
<td align="left">终止控制终端或进程</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">SIGINT</td>
<td align="left">终止</td>
<td align="left">由键盘引起的终端(Ctrl-c)</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">SIGQUIT</td>
<td align="left">dump</td>
<td align="left">控制终端发送给进程的信号, 键盘产生的退出(Ctrl-),</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">GIGILL</td>
<td align="left">dusmp</td>
<td align="left">非法指令引起</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">SIGTRAP</td>
<td align="left">dump</td>
<td align="left">debug中断</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">SIGABRT/SIGIOT</td>
<td align="left">dump</td>
<td align="left">异常中止</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">SIGBUS/SIGEMT</td>
<td align="left">dump</td>
<td align="left">总线异常/EMT指令</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">SIGFPE</td>
<td align="left">dump</td>
<td align="left">浮点运算溢出</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">SIGKILL</td>
<td align="left">终止</td>
<td align="left">强制杀死进程(大招, 进程不可捕获)</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left">SIGUSR1</td>
<td align="left">终止</td>
<td align="left">用户信号, 进程可自定义用途</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left">SIGSEGV</td>
<td align="left">dump</td>
<td align="left">非法内存地址引起</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left">SIGUSR2</td>
<td align="left">终止</td>
<td align="left">用户信号, 进程可自定义用途</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left">SIGPIPE</td>
<td align="left">终止</td>
<td align="left">向某个没有读取的管道中写入数据</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left">SIGALRM</td>
<td align="left">终止</td>
<td align="left">时钟中断(闹钟)</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left">SIGTERM</td>
<td align="left">终止</td>
<td align="left">进程终止(进程可捕获)</td>
</tr>
<tr>
<td align="left">16</td>
<td align="left">SIGSTKFLT</td>
<td align="left">终止</td>
<td align="left">协处理器栈错误</td>
</tr>
<tr>
<td align="left">17</td>
<td align="left">SIGCHLD</td>
<td align="left">忽略</td>
<td align="left">子进程退出或中断</td>
</tr>
<tr>
<td align="left">18</td>
<td align="left">SIGCONT</td>
<td align="left">继续</td>
<td align="left">如进程停止状态则开始运行</td>
</tr>
<tr>
<td align="left">19</td>
<td align="left">SIGSTOP</td>
<td align="left">停止</td>
<td align="left">停止进程运行</td>
</tr>
<tr>
<td align="left">20</td>
<td align="left">SIGSTP</td>
<td align="left">停止</td>
<td align="left">键盘产生的停止</td>
</tr>
<tr>
<td align="left">21</td>
<td align="left">SIGTTIN</td>
<td align="left">停止</td>
<td align="left">后台进程请求输入</td>
</tr>
<tr>
<td align="left">22</td>
<td align="left">SIGTTOU</td>
<td align="left">停止</td>
<td align="left">后台进程请求输出</td>
</tr>
<tr>
<td align="left">23</td>
<td align="left">SIGURG</td>
<td align="left">忽略</td>
<td align="left">socket发送紧急情况</td>
</tr>
<tr>
<td align="left">24</td>
<td align="left">SIGXCPU</td>
<td align="left">dump</td>
<td align="left">CPU时间限制被打破</td>
</tr>
<tr>
<td align="left">25</td>
<td align="left">SIGXFSZ</td>
<td align="left">dump</td>
<td align="left">文件大小限制被打破</td>
</tr>
<tr>
<td align="left">26</td>
<td align="left">SIGVTALRM</td>
<td align="left">终止</td>
<td align="left">虚拟定时时钟</td>
</tr>
<tr>
<td align="left">27</td>
<td align="left">SIGPROF</td>
<td align="left">终止</td>
<td align="left">profile timer clock</td>
</tr>
<tr>
<td align="left">28</td>
<td align="left">SIGWINCH</td>
<td align="left">忽略</td>
<td align="left">窗口尺寸调整</td>
</tr>
<tr>
<td align="left">29</td>
<td align="left">SIGIO/SIGPOLL</td>
<td align="left">终止</td>
<td align="left">I/O可用</td>
</tr>
<tr>
<td align="left">30</td>
<td align="left">SIGPWR</td>
<td align="left">终止</td>
<td align="left">电源异常</td>
</tr>
<tr>
<td align="left">31</td>
<td align="left">SIGSYS/SYSUNUSED</td>
<td align="left">dump</td>
<td align="left">系统调用异常</td>
</tr>
</tbody></table>
</li>
<li><p>各种默认处理动作的含义是：</p>
<ul>
<li>终止程序是指进程退出；</li>
<li>忽略该信号是将该信号丢弃，不做处理；</li>
<li>停止程序是指程序挂起，进入停止状况以后还能重新进行下去，一般是在调试的过程中（例如ptrace系统调用）；</li>
<li>内核映像转储是指将进程数据在内存的映像和进程在内核结构中存储的部分内容以一定格式转储到文件系统，并且进程退出执行，这样做的好处是为程序员提供了方便，使得他们可以得到进程当时执行时的数据值，允许他们确定转储的原因，并且可以调试他们的程序。</li>
</ul>
</li>
<li><p>注意 ：</p>
<ul>
<li>信号<code>SIGKILL</code>和<code>SIGSTOP</code>既不能被捕捉，也不能被忽略。</li>
<li>信号SIGIOT与SIGABRT是一个信号，可以看出，同一个信号在不同的系统中值可能不一样，所以建议最好使用为信号定义的名字，而不要直接使用信号的值。  </li>
</ul>
</li>
<li><p>python处理信号量：</p>
<ul>
<li>demo测试</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> atexit<br><span class="hljs-keyword">import</span> signal<br><span class="hljs-keyword">import</span> traceback<br><br><span class="hljs-comment"># 一个是捕捉kill信号，另一个是注册atexit函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">term_sig_handler</span>(<span class="hljs-params">signum, frame</span>):</span><br>    print(<span class="hljs-string">&#x27;catched singal: %d&#x27;</span> % signum)<br>    sys.exit()<br> <br><span class="hljs-meta">@atexit.register</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">atexit_fun</span>():</span><br>    print(<span class="hljs-string">&#x27;i am exit, stack track:&#x27;</span>)<br> <br>    exc_type, exc_value, exc_tb = sys.exc_info()<br>    traceback.print_exception(exc_type, exc_value, exc_tb)<br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># catch term signal</span><br>    signal.signal(signal.SIGTERM, term_sig_handler)<br>    signal.signal(signal.SIGINT, term_sig_handler)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;hello&#x27;</span><br>        time.sleep(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure>

<ul>
<li>监听的是 SIGTERM 信号:kill pid</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"> <br><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br> <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    当我们运行该程序时因为 while True 所以会持续的运行. </span><br><span class="hljs-string">    这里监听的是 SIGTERM 信号, 所以当我们在终端输入 kill pid (linux kill</span><br><span class="hljs-string">    默认是发送SIGTERM)时, </span><br><span class="hljs-string">    程序就会输出: 收到信号 15 &lt;frame object at 0x7ff695738050&gt; 0</span><br><span class="hljs-string">    当超过3次时就强制把自己杀死.</span><br><span class="hljs-string">    所以 SIGTERM 很适合用来做一些清理的工作</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br> <br><span class="hljs-keyword">import</span> sys<br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> signal<br> <br>receive_times = <span class="hljs-number">0</span><br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">handler</span>(<span class="hljs-params">signalnum, frame</span>):</span><br>    <span class="hljs-keyword">global</span> receive_times<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">u&quot;收到信号&quot;</span>, signalnum, frame, receive_times<br>    receive_times += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> receive_times &gt; <span class="hljs-number">3</span>:<br>        exit(<span class="hljs-number">0</span>) <span class="hljs-comment"># 自己走</span><br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;pid:&quot;</span>, os.getpid()<br>    signal.signal(signal.SIGTERM, handler)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">pass</span><br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>

<ul>
<li>刚才我们说过SIGKILL不能被监听. </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"> <br>signal.signal(signal.SIGKILL, handler) <br># 这里系统会直接跑错 AttributeError: &#39;module&#39; object has no attribute &#39;SIGKILL&#39;<br></code></pre></td></tr></table></figure>

<ul>
<li><p>总结：</p>
<blockquote>
<p>可以通过监控信号量来防止除<code>SIGKILL</code>以外的信号杀死进程。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="二、linux-kill-9-杀不掉的进程"><a href="#二、linux-kill-9-杀不掉的进程" class="headerlink" title="二、linux kill -9 杀不掉的进程"></a>二、linux kill -9 杀不掉的进程</h2><p>kill -9 发送SIGKILL信号给进程，将其终止，但对于以下两种情况不适用</p>
<ul>
<li><p>该进程是僵尸进程（STAT z），此时进程已经释放所有的资源，但是没有被父进程释放。僵尸进程要等到父进程结束，或者重启系统才可以被释放。</p>
</li>
<li><p>进程处于“核心态”，并且在等待不可获得的资源，处于“核心态 ”的资源默认忽略所有信号。只能重启系统。</p>
</li>
<li><p>kill 只能杀死用户态的进程</p>
</li>
</ul>
<p>案例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc ,<span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">pid_t</span> pid;<br><br>    pid = fork();<br>    <span class="hljs-keyword">if</span>(pid&lt;<span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">&quot;fork&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am a child\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>            sleep(<span class="hljs-number">100</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">gcc a.c</span><br><span class="hljs-meta">$</span><span class="bash">./a.out</span><br></code></pre></td></tr></table></figure>

<ul>
<li><p>查看进程信息：ps -aux | grep “Z”  ，尝试杀掉当前进程；</p>
</li>
<li><p>查看进程详细信息：cat /proc/4385/status    ，  若杀不掉，则查看进程详细信息，尝试杀死其父进程。</p>
</li>
<li><p>还不行，就重启吧！！！！</p>
</li>
</ul>
<h2 id="三、redis-进程"><a href="#三、redis-进程" class="headerlink" title="三、redis 进程"></a>三、redis 进程</h2><ul>
<li><p><a href="https://blog.csdn.net/hzlarm/article/details/99432240">安装<code>redis</code>:</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo apt-get install redis-server</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>查看进程：<code>ps -aux|grep redis</code>  可以看到<code>redis</code>服务所在用户组和PID</p>
</li>
<li><p>查看服务状态：<code>netstat -nlt|grep 6379</code></p>
</li>
<li><p>使用kill -9 杀死 redis：<code>发现杀死后会重新启动服务</code></p>
</li>
<li><p>总结：</p>
<ul>
<li><code>redis</code>会在系统创建用户和用户组: <code>redis</code></li>
<li><code>redis</code>无法完全杀死，可以使用命令：<ul>
<li><code>/etc/init.d/redis-server stop</code>停止服务。</li>
<li><code> /etc/init.d/redis-server restart</code>重启服务。</li>
<li><code>/etc/init.d/redis-server start</code>停止服务。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Linux 守护进程原理及实例（Redis、Nginx）</strong>：<a href="https://blog.csdn.net/yangbodong22011/article/details/78650896">here</a>、<a href="https://blog.csdn.net/qq570437459/article/details/87094870">here</a></p>
<ul>
<li>Linux系统中常见的守护进程有：<ul>
<li>cron 进程定期执行<code>crontab</code>设置的定时任务。</li>
<li>kswap守护进程定期将物理脏页写回磁盘来回收页面。</li>
<li>rsyslogd记录日志信息。</li>
<li>还有一些常见的服务器程序，例如Redis、Nginx、MySQL等等。</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p> 实现一个进程交给Systemd去管理，继续以前面守护进程打开<code>/tmp/log</code>并且写入<code>Hello World</code>为例: <a href="https://blog.csdn.net/yangbodong22011/article/details/78650896">here</a></p>
</blockquote>
<ul>
<li><p>Systemd配置文件内容：<a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html">here01</a>、<a href="https://www.ibm.com/developerworks/cn/linux/1407_liuming_init3/index.html">here02</a></p>
<blockquote>
<p>推荐参考here02</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Type=forking<br>ExecStart=/usr/bin/redis-server /etc/redis/redis.conf   # 启动命令<br>ExecStop=/bin/kill -s TERM $MAINPID     # 退出命令<br>PIDFile=/var/run/redis/redis-server.pid   # 进程id<br>TimeoutStopSec=0<br>Restart=always  # 允许重启<br>User=redis     # 所属用户<br>Group=redis    # 所属用户组<br>RuntimeDirectory=redis    # 运行时目录<br>RuntimeDirectoryMode=2755<br><br>UMask=007<br>PrivateTmp=yes<br>LimitNOFILE=65535<br>PrivateDevices=yes<br>ProtectHome=yes<br>ReadOnlyDirectories=/<br>ReadWriteDirectories=-/var/lib/redis<br>ReadWriteDirectories=-/var/log/redis<br>ReadWriteDirectories=-/var/run/redis<br><br>NoNewPrivileges=true<br>CapabilityBoundingSet=CAP_SETGID CAP_SETUID CAP_SYS_RESOURCE<br>MemoryDenyWriteExecute=true<br>ProtectKernelModules=true<br>ProtectKernelTunables=true<br>ProtectControlGroups=true<br>RestrictRealtime=true<br>RestrictNamespaces=true<br>RestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX<br><br><span class="hljs-meta">#</span><span class="bash"> redis-server can write to its own config file when <span class="hljs-keyword">in</span> cluster mode so we</span><br><span class="hljs-meta">#</span><span class="bash"> permit writing there by default. If you are not using this feature, it is</span><br><span class="hljs-meta">#</span><span class="bash"> recommended that you replace the following lines with <span class="hljs-string">&quot;ProtectSystem=full&quot;</span>.</span><br>ProtectSystem=true<br>ReadWriteDirectories=-/etc/redis<br><br>[Install]<br>WantedBy=multi-user.target<br>Alias=redis.service    # 设置别名<br></code></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="四、守护进程"><a href="#四、守护进程" class="headerlink" title="四、守护进程"></a><a href="https://www.zhihu.com/question/38609004">四、守护进程</a></h2><blockquote>
<p>守护进程（daemon）是生存期长的一种进程，没有控制终端。它们常常在系统引导装入时启动，仅在系统关闭时才终止。UNIX系统有很多守护进程，守护进程程序的名称通常以字母“d”结尾：例如，<a href="https://link.zhihu.com/?target=https://zh.wikipedia.org/wiki/Syslog">syslogd</a> 就是指管理系统日志的守护进程。</p>
<p>通过ps进程查看器 <code>ps -efj</code> 的输出实例，内核守护进程的名字出现在方括号中，大致输出如下：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">UID         PID   PPID   PGID    SID  C STIME TTY          TIME CMD                                                                                                       <br>root          2      0      0      0  0 14:53 ?        00:00:00 [kthreadd]                                      <br>root          4      2      0      0  0 14:53 ?        00:00:00 [kworker/0:0H]                                                                        <br>root          6      2      0      0  0 14:53 ?        00:00:00 [mm_percpu_wq]      <br>root          7      2      0      0  0 14:53 ?        00:00:02 [ksoftirqd/0]  <br>root          8      2      0      0  0 14:53 ?        00:00:02 [rcu_sched]                       <br>root          9      2      0      0  0 14:53 ?        00:00:00 [rcu_bh]                                     <br>root         10      2      0      0  0 14:53 ?        00:00:00 [migration/0]<br>root         11      2      0      0  0 14:53 ?        00:00:00 [watchdog/0] <br>root         12      2      0      0  0 14:53 ?        00:00:00 [cpuhp/0]    <br>root         13      2      0      0  0 14:53 ?        00:00:00 [cpuhp/1]<br>......省略部分输出<br></code></pre></td></tr></table></figure>

<blockquote>
<p>需要注意的是，用户层守护进程的父进程是 init进程（进程ID为1），从上面的输出<code>PPID</code>一列也可以看出，内核守护进程的父进程并非是 init进程。</p>
<p>对于用户层守护进程， 因为它真正的父进程在 fork 出子进程后就先于子进程 exit 退出了，所以它是一个由 init 继承的孤儿进程。</p>
</blockquote>
<h3 id="4-1-创建守护进程的过程："><a href="#4-1-创建守护进程的过程：" class="headerlink" title="4.1 创建守护进程的过程："></a>4.1 <strong>创建守护进程的过程：</strong></h3><ol>
<li>调用fork创建子进程。父进程终止，让子进程在后台继续执行。</li>
<li>子进程调用setsid产生新会话期并失去控制终端调用setsid()使子进程进程成为新会话组长和新的进程组长，同时失去控制终端。</li>
<li>忽略SIGHUP信号。会话组长进程终止会向其他进程发该信号，造成其他进程终止。</li>
<li>调用fork再创建子进程。子进程终止，子子进程继续执行，由于子子进程不再是会话组长，从而禁止进程重新打开控制终端。</li>
<li>改变当前工作目录为根目录。一般将工作目录改变到根目录，这样进程的启动目录也可以被卸掉。</li>
<li>关闭打开的文件描述符，打开一个空设备，并复制到标准输出和标准错误上。 避免调用的一些库函数依然向屏幕输出信息。</li>
<li>重设文件创建掩码清除从父进程那里继承来的文件创建掩码，设为0。</li>
<li>用openlog函数建立与syslogd的连接。</li>
</ol>
<h3 id="4-2-创建示例："><a href="#4-2-创建示例：" class="headerlink" title="4.2 创建示例："></a>4.2 <strong>创建示例：</strong></h3><blockquote>
<p>通过python的daemon库进行创建</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> atexit<br><span class="hljs-keyword">import</span> signal<br><span class="hljs-keyword">import</span> traceback<br><br><span class="hljs-comment">#为当前进程重命名</span><br><span class="hljs-keyword">import</span> setproctitle<br>setproctitle.setproctitle(<span class="hljs-string">&quot;signum&quot;</span>)<br><br><span class="hljs-comment"># 保存进程id</span><br>PIDFile = <span class="hljs-string">&quot;/var/run/signum/signum-server.pid&quot;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(os.path.dirname(PIDFile)):<br>    print(os.path.dirname(PIDFile))<br>    os.makedirs(os.path.dirname(PIDFile))<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">with</span> open(PIDFile,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        pid=os.getpid()<br>        f.write(str(pid)+<span class="hljs-string">&quot;\n&quot;</span>)<br>        f.close()<br><span class="hljs-keyword">except</span>:<br>    os.remove(PIDFile)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">term_sig_handler</span>(<span class="hljs-params">signum, frame</span>):</span><br>    print(<span class="hljs-string">&quot;catched singal: %d &quot;</span> % signum)<br><br><br><span class="hljs-meta">@atexit.register</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">atexit_fun</span>():</span><br>    print(<span class="hljs-string">&quot;i am exit. stack track:&quot;</span>)<br><br>    exc_type, exc_value, exc_tb = sys.exc_info()<br>    traceback.print_exception(exc_type, exc_value, exc_tb)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 设置信号量的处理函数</span><br>    signal.signal(signal.SIG_IGN, term_sig_handler)<br>    signal.signal(signal.SIGTERM, term_sig_handler)<br>    signal.signal(signal.SIGINT, term_sig_handler)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        print(<span class="hljs-string">&quot;hello&quot;</span>)<br>        <span class="hljs-comment"># sys.exit(0)</span><br>        time.sleep(<span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> daemon<br><span class="hljs-keyword">from</span> logzero <span class="hljs-keyword">import</span> logger<br><span class="hljs-keyword">import</span> psutil<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 启动命令</span><br>ExecStart = <span class="hljs-string">&quot;python /home/k/PycharmProjects/pythonProject/signum.py &quot;</span><br><span class="hljs-comment"># 停止命令</span><br>ExecStop = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># 进程id文件</span><br>PIDFile = <span class="hljs-string">&quot;/var/run/signum/signum-server.pid&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">start</span>():</span><br>    <span class="hljs-comment"># 首先进行一次fork，防止对原有进程产生干扰</span><br>    pid = os.fork()<br>    <span class="hljs-keyword">if</span> pid == <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># 对于fork出的子进程，进入Daemon模式</span><br>        <span class="hljs-keyword">with</span> daemon.DaemonContext():<br>            <span class="hljs-comment"># 如果文件存在</span><br>            <span class="hljs-keyword">if</span> os.path.exists(PIDFile):<br>                <span class="hljs-keyword">with</span> open(PIDFile, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                    pid = int(f.read())<br>                    f.close()<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                    <span class="hljs-comment"># 如果进程id不存在</span><br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> psutil.pid_exists(pid):<br>                        <span class="hljs-comment"># 执行启动命令重启</span><br>                        os.system(ExecStart)<br>                        <span class="hljs-comment"># 重新设置PID</span><br>                        <span class="hljs-keyword">with</span> open(PIDFile, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                            pid = int(f.read())<br>                            f.close()<br><br>            <span class="hljs-keyword">except</span> ImportError <span class="hljs-keyword">as</span> e:<br>                <br>                logger.warning(<span class="hljs-string">&quot;setproctitle module not found&quot;</span>)<br>            time.sleep(<span class="hljs-number">3600</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 对于父进程（原始进程），保留原有逻辑执行</span><br>        exit(<span class="hljs-number">0</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    start()<br><br></code></pre></td></tr></table></figure>

<h3 id="4-3-实战结果"><a href="#4-3-实战结果" class="headerlink" title="4.3 实战结果"></a>4.3 实战结果</h3><ul>
<li><p>两个守护进程：v1、v2</p>
</li>
<li><p>一个服务进程：signum</p>
</li>
<li><p>v1、v2相互守护，v1还守护signum</p>
</li>
<li><p>代码实现：</p>
</li>
</ul>
<h4 id="4-3-1-Daemon-v1-py"><a href="#4-3-1-Daemon-v1-py" class="headerlink" title="4.3.1 Daemon_v1.py"></a>4.3.1 Daemon_v1.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> signal<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> psutil<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-string">&quot;&quot;&quot;BASE_CONFIG&quot;&quot;&quot;</span><br>SERVER_IP = <span class="hljs-string">&quot;192.168.121.152&quot;</span><br>SERVER_PORT = <span class="hljs-string">&quot;32768&quot;</span><br>ROOT_URL = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;SERVER_IP&#125;</span>:<span class="hljs-subst">&#123;SERVER_PORT&#125;</span>&quot;</span><br><br><span class="hljs-comment"># 服务名称列表</span><br>SERVER_NAMES = [<span class="hljs-string">&quot;signum&quot;</span>, <span class="hljs-string">&quot;daemon-v2-server&quot;</span>]<br><span class="hljs-comment"># 启动命令字典</span><br>EXEC_STARTS = &#123;<br>    <span class="hljs-string">&quot;daemon-v2-server&quot;</span>: <span class="hljs-string">f&quot;/Anaconda/ls/envs/Daemon/bin/python  /home/klein/WorkSpace/Daemon/testv1/Daemon_v2.py&quot;</span>,<br>    <span class="hljs-string">&quot;signum&quot;</span>: <span class="hljs-string">f&quot;/Anaconda/ls/envs/Daemon/bin/python  /home/klein/WorkSpace/Daemon/testv1/signum.py &quot;</span>,<br>&#125;<br><span class="hljs-comment"># 停止命令字典</span><br>EXEC_STOPS = &#123;<br><br>&#125;<br><span class="hljs-comment"># PID文件存放根目录</span><br>PID_ROOT_PATH = <span class="hljs-string">&quot;PID文件存放的根目录&quot;</span><br><span class="hljs-comment"># PID文件路径字典</span><br>PIDFILES = &#123;<br>    <span class="hljs-string">&quot;signum&quot;</span>: <span class="hljs-string">f&quot;signum PID文件全路径&quot;</span>,<br>    <span class="hljs-string">&quot;daemon-v2-server&quot;</span>: <span class="hljs-string">f&quot;daemon-v2-server PID文件全路径&quot;</span>,<br>&#125;<br><span class="hljs-comment"># PID值字典</span><br>PID_VALUES = &#123;<br>    <span class="hljs-string">&quot;signum&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;daemon-v2-server&quot;</span>:<span class="hljs-number">0</span><br>&#125;<br><br><br><span class="hljs-comment"># 保存 daemon 进程id</span><br>D_PIDFILE = <span class="hljs-string">&quot;当前进程的pid文件存放路径&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">put_log</span>(<span class="hljs-params">description: str = None</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    推送日志信息</span><br><span class="hljs-string">    :param description:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;SERVER_IP&#125;</span>:32769/log&quot;</span><br>    header = &#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> description:<br>        <span class="hljs-keyword">try</span>:<br>            description = <span class="hljs-string">f&quot;[time:<span class="hljs-subst">&#123;time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %X&#x27;</span>, time.localtime())&#125;</span>] : &quot;</span> + description<br>            requestData = &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;daemon&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>: description, <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;log_type&quot;</span>: <span class="hljs-number">4</span>&#125;<br>            requestData = json.dumps(requestData)<br>            res = requests.put(url, data=requestData, headers=header, timeout=<span class="hljs-number">5</span>)<br>            <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init_signum</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    初始化signum服务</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 等待服务启动</span><br>    time.sleep(<span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init</span>(<span class="hljs-params">name: str</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    启动进程后，根据服务名称初始化服务</span><br><span class="hljs-string">    :param name 服务名称</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> name == <span class="hljs-string">&quot;signum&quot;</span>:<br>        res = init_signum()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> res:<br>            put_log(<span class="hljs-string">f&quot;启动服务失败&quot;</span>)<br>    <span class="hljs-keyword">elif</span> name == <span class="hljs-string">&quot;name&quot;</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">start_v3</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    开始守护进程  ：  目前使用的版本</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 首先进行一次fork，防止对原有进程产生干扰</span><br>    pid = os.fork()<br>    <span class="hljs-keyword">if</span> pid == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 为当前进程重命名</span><br>            <span class="hljs-keyword">import</span> setproctitle<br>            setproctitle.setproctitle(<span class="hljs-string">&quot;[Daemon-v1]&quot;</span>)<br>            write_pid(D_PIDFILE)<br>            <span class="hljs-comment"># 屏蔽普通信号量</span><br>            shield_signal()<br>            <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> SERVER_NAMES:<br>                <span class="hljs-comment"># 如果文件存在</span><br>                <span class="hljs-keyword">if</span> os.path.exists(PIDFILES[name]):<br>                    <span class="hljs-keyword">with</span> open(PIDFILES[name], <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                        PID_VALUES[name] = int(f.read())<br>                        f.close()<br>            <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> SERVER_NAMES:<br>                    <span class="hljs-comment"># 如果进程id不存在</span><br>                    <span class="hljs-comment"># put_log(f&quot;&#123;PID_VALUES&#125;&quot;)</span><br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> psutil.pid_exists(PID_VALUES[name]):<br>                        <span class="hljs-comment"># 执行启动命令重启</span><br>                        os.system(EXEC_STARTS[name])<br>                        <span class="hljs-keyword">try</span>:<br>                            put_log(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> : 服务重启&quot;</span><br>                                    <span class="hljs-string">f&quot;中......&quot;</span>)<br>                        <span class="hljs-keyword">finally</span>:<br>                            init(name)<br>                            <span class="hljs-comment"># 重新设置PID</span><br>                            <span class="hljs-keyword">with</span> open(PIDFILES[name], <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                                PID_VALUES[name] = int(f.read())<br>                                f.close()<br>                <span class="hljs-comment"># else:</span><br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            put_log(e.__str__())<br>        time.sleep(<span class="hljs-number">3600</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 对于父进程（原始进程），保留原有逻辑执行</span><br>        sys.exit(<span class="hljs-number">0</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">term_sig_handler</span>(<span class="hljs-params">signum, frame</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    捕获信号量 kill signum 并推送日志处理</span><br><span class="hljs-string">    :param signum:</span><br><span class="hljs-string">    :param frame:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    put_log(<span class="hljs-string">f&quot;Someone tried to shut down the daemon : kill <span class="hljs-subst">&#123;signum&#125;</span> [daemon-v1-server]&quot;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shield_signal</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    添加要屏蔽的信号量</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    signal.signal(signal.SIG_IGN, term_sig_handler)<br>    signal.signal(signal.SIGTERM, term_sig_handler)<br>    signal.signal(signal.SIGINT, term_sig_handler)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">daemon_exist</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    判断当前守护进程是否存在</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 文件不存在</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(D_PIDFILE):<br>        <span class="hljs-comment"># print(os.path.dirname(D_PIDFILE))</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(os.path.dirname(D_PIDFILE)):<br>            os.makedirs(os.path.dirname(D_PIDFILE))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 文件存在</span><br>        <span class="hljs-keyword">with</span> open(D_PIDFILE, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            pid = int(f.read())<br>            f.close()<br>        <span class="hljs-keyword">if</span> psutil.pid_exists(pid):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_pid</span>(<span class="hljs-params">daemon_pid: str</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    写入进程 pid</span><br><span class="hljs-string">    :param daemon_pid:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">with</span> open(daemon_pid, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        pid = os.getpid()<br>        <span class="hljs-comment"># print(pid)</span><br>        f.write(str(pid) + <span class="hljs-string">&quot;\n&quot;</span>)<br>        f.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> daemon_exist():<br>        start_v3()<br><br></code></pre></td></tr></table></figure>

<h4 id="4-3-2-Daemon-v2-py"><a href="#4-3-2-Daemon-v2-py" class="headerlink" title="4.3.2 Daemon_v2.py"></a>4.3.2 Daemon_v2.py</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> -*- coding: UTF-8 -*-</span><br>import json<br>import os<br>import signal<br>import sys<br>import time<br><br>import psutil<br>import requests<br><br><br>&quot;&quot;&quot;BASE_CONFIG&quot;&quot;&quot;<br>SERVER_IP = &quot;192.168.121.152&quot;<br><br><span class="hljs-meta">#</span><span class="bash"> 服务名称列表</span><br>SERVER_NAMES = [&quot;daemon-v1-server&quot;, ]<br><span class="hljs-meta">#</span><span class="bash"> 启动命令字典</span><br>EXEC_STARTS = &#123;<br>    &quot;daemon-v1-server&quot;: f&quot;/Anaconda/ls/envs/Daemon/bin/python  /home/klein/WorkSpace/Daemon/testv1/Daemon_v1.py&quot;,<br>&#125;<br><span class="hljs-meta">#</span><span class="bash"> 停止命令字典</span><br>EXEC_STOPS = &#123;<br><br>&#125;<br><span class="hljs-meta">#</span><span class="bash"> PID文件存放根目录</span><br>PID_ROOT_PATH = &quot;根目录&quot;<br><span class="hljs-meta">#</span><span class="bash"> PID文件路径字典</span><br>PIDFILES = &#123;<br>    &quot;daemon-v1-server&quot;: f&quot;daemon-v1-server PID文件位置&quot;,<br>&#125;<br><span class="hljs-meta">#</span><span class="bash"> PID值字典</span><br>PID_VALUES = &#123;<br>    &quot;daemon-v1-server&quot;: 0<br>&#125;<br><br><span class="hljs-meta">#</span><span class="bash"> 保存 daemon-v2 进程id</span><br>D_PIDFILE = &quot;当前进程的PID文件位置&quot;<br><br><br>def put_log(description: str = None):<br>    &quot;&quot;&quot;<br>    推送日志信息<br>    :param description:<br>    :return:<br>    &quot;&quot;&quot;<br>    url = f&quot;http://&#123;SERVER_IP&#125;:32769/log&quot;<br>    header = &#123;<br>        &quot;Content-Type&quot;: &quot;application/json&quot;<br>    &#125;<br>    if description:<br>        try:<br>            description = f&quot;[time:&#123;time.strftime(&#x27;%Y-%m-%d %X&#x27;, time.localtime())&#125;] : &quot; + description<br>            requestData = &#123;&quot;username&quot;: &quot;daemon&quot;, &quot;description&quot;: description, &quot;status&quot;: 2, &quot;log_type&quot;: 4&#125;<br>            requestData = json.dumps(requestData)<br>            res = requests.put(url, data=requestData, headers=header, timeout=5)<br>            if res.status_code == 200:<br>                return True<br>            else:<br>                return False<br>        except Exception as e:<br>            return False<br>    return False<br><br>def init(name: str):<br>    &quot;&quot;&quot;<br>    启动进程后，根据服务名称初始化服务<br>    :param name 服务名称<br>    :return:<br>    &quot;&quot;&quot;<br>    if name == &quot;signum&quot;:<br>        pass<br>    else:<br>        time.sleep(10)<br>        pass<br><br><br>def start_v3():<br>    &quot;&quot;&quot;<br>    开始守护进程  ：  目前使用的版本<br>    :return:<br>    &quot;&quot;&quot;<br>    # 首先进行一次fork，防止对原有进程产生干扰<br>    pid = os.fork()<br>    if pid == 0:<br>        try:<br>            # 为当前进程重命名<br>            import setproctitle<br>            setproctitle.setproctitle(&quot;[Daemon-v2]&quot;)<br>            # 写入当前进程id<br>            write_pid(D_PIDFILE)<br>            # 屏蔽普通信号量<br>            shield_signal()<br>            for name in SERVER_NAMES:<br>                # 如果文件存在<br>                if os.path.exists(PIDFILES[name]):<br>                    with open(PIDFILES[name], &quot;r&quot;) as f:<br>                        PID_VALUES[name] = int(f.read())<br>                        f.close()<br>            while True:<br>                for name in SERVER_NAMES:<br>                    # 如果进程id不存在<br>                    # put_log(f&quot;&#123;PID_VALUES&#125;&quot;)<br>                    if not psutil.pid_exists(PID_VALUES[name]):<br>                        # 执行启动命令重启<br>                        os.system(EXEC_STARTS[name])<br>                        try:<br>                            put_log(f&quot;&#123;name&#125; : 服务重启&quot;<br>                                    f&quot;中......&quot;)<br>                        finally:<br>                            init(name)<br>                            # 重新设置PID<br>                            with open(PIDFILES[name], &quot;r&quot;) as f:<br>                                PID_VALUES[name] = int(f.read())<br>                                f.close()<br>                # else:<br><br>        except Exception as e:<br>            put_log(e.__str__())<br>        time.sleep(3600)<br>    else:<br>        # 对于父进程（原始进程），保留原有逻辑执行<br>        sys.exit(0)<br><br><br>def term_sig_handler(signum, frame):<br>    &quot;&quot;&quot;<br>    捕获信号量 kill signum 并推送日志处理<br>    :param signum:<br>    :param frame:<br>    :return:<br>    &quot;&quot;&quot;<br>    put_log(f&quot;Someone tried to shut down the daemon : kill &#123;signum&#125; [daemon-v2-server]&quot;)<br><br><br>def shield_signal():<br>    &quot;&quot;&quot;<br>    添加要屏蔽的信号量<br>    :return:<br>    &quot;&quot;&quot;<br>    signal.signal(signal.SIG_IGN, term_sig_handler)<br>    signal.signal(signal.SIGTERM, term_sig_handler)<br>    signal.signal(signal.SIGINT, term_sig_handler)<br><br><br>def daemon_exist():<br>    &quot;&quot;&quot;<br>    判断当前守护进程是否存在<br>    :return:<br>    &quot;&quot;&quot;<br>    # 文件不存在<br>    if not os.path.exists(D_PIDFILE):<br>        # print(os.path.dirname(D_PIDFILE))<br>        if not os.path.exists(os.path.dirname(D_PIDFILE)):<br>            os.makedirs(os.path.dirname(D_PIDFILE))<br>        return False<br>    else:<br>        # 文件存在<br>        with open(D_PIDFILE, &quot;r&quot;) as f:<br>            pid = int(f.read())<br>            f.close()<br>        if psutil.pid_exists(pid):<br>            return True<br>        else:<br>            return False<br><br><br>def write_pid(daemon_pid: str):<br>    &quot;&quot;&quot;<br>    写入进程 pid<br>    :param daemon_pid:<br>    :return:<br>    &quot;&quot;&quot;<br>    with open(daemon_pid, &quot;w&quot;) as f:<br>        pid = os.getpid()<br>        print(pid)<br>        f.write(str(pid) + &quot;\n&quot;)<br>        f.close()<br><br><br>if __name__ == &quot;__main__&quot;:<br>    if not daemon_exist():<br>        start_v3()<br><br></code></pre></td></tr></table></figure>

<h4 id="4-3-3-signum-py"><a href="#4-3-3-signum-py" class="headerlink" title="4.3.3 signum.py"></a>4.3.3 signum.py</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># -*- coding: UTF-8 -*-<br>import os<br>import sys<br>import time<br>import atexit<br>import signal<br>import traceback<br><br># 为当前进程重命名<br>import setproctitle<br>setproctitle.setproctitle(&quot;signum&quot;)<br><br># 保存进程id<br>PIDFile &#x3D; &quot;当前进程的PID文件位置&quot;<br><br>if not os.path.exists(os.path.dirname(PIDFile)):<br>    # print(os.path.dirname(PIDFile))<br>    os.makedirs(os.path.dirname(PIDFile))<br>try:<br>    with open(PIDFile, &quot;w&quot;) as f:<br>        pid &#x3D; os.getpid()<br>        f.write(str(pid) + &quot;\n&quot;)<br>        f.close()<br>except Exception as e:<br>    os.remove(PIDFile)<br><br><br>def term_sig_handler(signum, frame):<br>    print(&quot;catched singal: %d &quot; % signum)<br><br><br>@atexit.register<br>def atexit_fun():<br>    print(&quot;i am exit. stack track:&quot;)<br><br>    exc_type, exc_value, exc_tb &#x3D; sys.exc_info()<br>    traceback.print_exception(exc_type, exc_value, exc_tb)<br><br><br>if __name__ &#x3D;&#x3D; &quot;__main__&quot;:<br>    # 设置信号量的处理函数<br>    signal.signal(signal.SIG_IGN, term_sig_handler)<br>    signal.signal(signal.SIGTERM, term_sig_handler)<br>    signal.signal(signal.SIGINT, term_sig_handler)<br><br>    while True:<br>        print(&quot;hello&quot;)<br>        # sys.exit(0)<br>        time.sleep(1)<br><br></code></pre></td></tr></table></figure>



<h2 id="五、可选的进程防杀方案"><a href="#五、可选的进程防杀方案" class="headerlink" title="五、可选的进程防杀方案"></a>五、可选的进程防杀方案</h2><ul>
<li>使用redis的方案，在系统Systemd系统层面守护，检测不存在重新启动脚本。</li>
<li>创建程序级别的守护进程，进行守护，检测不存在重新启动脚本。两层守护，第二层守护加入信号量(signal)拦截。</li>
<li>创建定时任务，crotab持续扫描进程状态，不存在就重启。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>IDEA和maven配置多仓库的解决方案</title>
    <url>/2020/10/15/IDEA%E5%92%8Cmaven%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%BB%93%E5%BA%93%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<blockquote>
<p>maven的配置文件优先级： <strong>pom.xml&gt; user settings &gt; global settings</strong> ;</p>
<p>通过maven的配置文件优先级和IDEA的settings(设置)实现多仓库;</p>
</blockquote>
<a id="more"></a>

<h1 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h1><blockquote>
<p>公司内部开发项目时一般会有一个公司的Maven私服，这个私服只能在公司内网中使用；如果，我们不再公司的情况下可能需要下载一些其他 jar 包。基于这种情况，我们可以配置两个本地仓库：公司使用（{basedir}/.m2/repository/） 和 自己使用（{basedir}/.aliyun/repository/）。在切换maven配置文件settings.xml时，一定要清楚优先级关系。</p>
</blockquote>
<h1 id="2、配置文件优先级"><a href="#2、配置文件优先级" class="headerlink" title="2、配置文件优先级"></a>2、配置文件优先级</h1><ul>
<li>maven的配置文件优先级： <strong>pom.xml&gt; user settings &gt; global settings</strong> ;<ul>
<li>user settings：  user.home/.m2/settings.xml </li>
<li>global settings：${M2_HOME}/conf/settings.xml</li>
<li>用户配置优先于全局配置，存在覆盖配置问题</li>
</ul>
</li>
</ul>
<h1 id="3、解决方案"><a href="#3、解决方案" class="headerlink" title="3、解决方案"></a>3、解决方案</h1><h2 id="3-1-settings-xml文件示例："><a href="#3-1-settings-xml文件示例：" class="headerlink" title="3.1 settings.xml文件示例："></a>3.1 settings.xml文件示例：</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">  <span class="hljs-comment">&lt;!-- localRepository # 本地仓库位置</span><br><span class="hljs-comment">   | The path to the local repository maven will use to store artifacts.</span><br><span class="hljs-comment">   |</span><br><span class="hljs-comment">   | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="hljs-comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br><span class="hljs-comment">  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:/Users/24458/ideaCaches/.aliyun/repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- mirror # 镜像</span><br><span class="hljs-comment">   | Specifies a repository mirror site to use instead of a given repository. The repository that</span><br><span class="hljs-comment">   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span><br><span class="hljs-comment">   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span><br><span class="hljs-comment">   |</span><br><span class="hljs-comment">  &lt;mirror&gt;</span><br><span class="hljs-comment">    &lt;id&gt;mirrorId&lt;/id&gt;</span><br><span class="hljs-comment">    &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span><br><span class="hljs-comment">    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span><br><span class="hljs-comment">    &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span><br><span class="hljs-comment">  &lt;/mirror&gt;</span><br><span class="hljs-comment">   --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyun-public<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun public<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyun-central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun central<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyun-spring<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun spring<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyun-spring-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun spring-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置jdk版本--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="3-2-配置不同仓库的配置文件"><a href="#3-2-配置不同仓库的配置文件" class="headerlink" title="3.2 配置不同仓库的配置文件"></a>3.2 配置不同仓库的配置文件</h2><blockquote>
<p>主要配置本地仓库位置和镜像</p>
</blockquote>
<ul>
<li><p>settings.xml  :  公司配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;localRepository&gt;D:&#x2F;Users&#x2F;24458&#x2F;ideaCaches&#x2F;.m2&#x2F;repository&lt;&#x2F;localRepository&gt;<br></code></pre></td></tr></table></figure>
</li>
<li><p>settings.me.xml  :  自己的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:/Users/24458/ideaCaches/.aliyun/repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="3-3-IDEA选择要使用的配置文件"><a href="#3-3-IDEA选择要使用的配置文件" class="headerlink" title="3.3 IDEA选择要使用的配置文件"></a>3.3 IDEA选择要使用的配置文件</h2><blockquote>
<p>打开： file –&gt; settings –&gt; Maven:</p>
</blockquote>
<p><img src="/images/blog-images/IDEA%E5%92%8Cmaven%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%BB%93%E5%BA%93%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/IDEA-settings.png"></p>
<h2 id="3-4-查看当前所用settings-xml内容"><a href="#3-4-查看当前所用settings-xml内容" class="headerlink" title="3.4 查看当前所用settings.xml内容"></a>3.4 查看当前所用settings.xml内容</h2><p><img src="/images/blog-images/IDEA%E5%92%8Cmaven%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%BB%93%E5%BA%93%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/effective-settings.png" alt="1602730526685"></p>
<p><img src="/images/blog-images/IDEA%E5%92%8Cmaven%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%BB%93%E5%BA%93%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/effective-settings-01.png"></p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MapReduce编程模型的内连接算法设计与实现</title>
    <url>/2020/10/07/%E5%9F%BA%E4%BA%8EMapReduce%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%86%85%E8%BF%9E%E6%8E%A5%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 align=center>摘  要</h2>
<p>
    信息技术和互联网的发展使得每天都会产生海量的数据，这些数据具有结构复杂、数据量大的特性。连接操作是大数据中常用的且耗时的操作。Map Reduce编程模型的提出，使得大数据处理有了基本的思路。本文通过Map Reduce编程模型设计算法实现内连接操作，并通过TPC-H基准程序生成的数据集，进行算法的正确性检验和算法的性能测试。实验结果表明，本文所设计算法是正确可行的，并且在Map Reduce编程模型下其处理大量数据时有明显的优势。
</p>

<blockquote>
<p>关键词：MapReduce；Hadoop；内连接；HDFS；TPC-H</p>
</blockquote>
<a id="more"></a>


<p><img src="/images/blog-images/%E5%9F%BA%E4%BA%8EMapReduce%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%86%85%E8%BF%9E%E6%8E%A5%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/MapReduce-00.png"></p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p><img src="/images/blog-images/%E5%9F%BA%E4%BA%8EMapReduce%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%86%85%E8%BF%9E%E6%8E%A5%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/MapReduce-01.png"></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><img src="/images/blog-images/%E5%9F%BA%E4%BA%8EMapReduce%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%86%85%E8%BF%9E%E6%8E%A5%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/MapReduce-02.png"></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="/images/blog-images/%E5%9F%BA%E4%BA%8EMapReduce%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%86%85%E8%BF%9E%E6%8E%A5%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/MapReduce-03.png"></p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>MapReduce</tag>
        <tag>内连接</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Intellij  连接远程服务器代码实时同步</title>
    <url>/2020/10/05/Intellij%20%20%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%A3%E7%A0%81%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用IDEA 或 Pycharm等工具实现，连接远程服务器并实时同步代码。</p>
<blockquote>
<p>前提条件</p>
<ul>
<li>Intellij 产品需为专业版</li>
<li>远程主机需能够远程登录</li>
</ul>
</blockquote>
<blockquote>
<p>本文环境</p>
<ul>
<li>主机：windows 10 home</li>
<li>远程服务器：Ubuntu 18.4 servers</li>
<li>虚拟机：Vmware 15.5 pro</li>
<li>其他软件：SecureCRT、Pycharm 2019.2(Professional Edition)</li>
</ul>
</blockquote>
<a id="more"></a>

<h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><p>1、打开SecureCRT确保可以连接至服务器,如图:</p>
<p><img src="/images/blog-images/images-Intellij/%E6%B5%8B%E8%AF%95SecureCRT.png"></p>
<p>2、打开Pycharm 进行配置</p>
<ul>
<li><p>Pycharm打开一下ssh session测试</p>
<blockquote>
<p>选择：tools–&gt;Start SSH session</p>
<p><img src="/images/blog-images/images-Intellij/pycharm-ssh.png"></p>
<p>能看到在isdea的下方开启了一个终端 </p>
<p><img src="/images/blog-images/images-Intellij/ssh-%E6%88%90%E5%8A%9F.png"></p>
</blockquote>
</li>
<li><p>打开项目，选择：tools-&gt;deployment-&gt;brower remote host ，如图：</p>
<p><img src="/images/blog-images/images-Intellij/%E9%80%89%E6%8B%A9%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p>
</li>
<li><p>新建连接，如图：</p>
<p><img src="/images/blog-images/images-Intellij/%E6%89%93%E5%BC%80%E9%85%8D%E7%BD%AE%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p>
</li>
<li><p>填写服务器信息，如下图：</p>
<p><img src="/images/blog-images/images-Intellij/%E9%85%8D%E7%BD%AE%E8%AF%A6%E6%83%85.png"></p>
</li>
<li><p>一定要配置Mappings,如下图：</p>
<p><img src="/images/blog-images/images-Intellij/addMappings.png"></p>
</li>
<li><p>更新服务器文件：</p>
<p><img src="/images/blog-images/images-Intellij/%E6%9B%B4%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6.png"></p>
</li>
<li><p>配置自动更新:</p>
<p><img src="/images/blog-images/images-Intellij/%E9%85%8D%E7%BD%AE%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0.png"></p>
</li>
</ul>
<h2 id="配置效果展示"><a href="#配置效果展示" class="headerlink" title="配置效果展示"></a>配置效果展示</h2><p><img src="/images/blog-images/images-Intellij/%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA.png"></p>
<h2 id="远程运行服务器代码"><a href="#远程运行服务器代码" class="headerlink" title="远程运行服务器代码"></a>远程运行服务器代码</h2><blockquote>
<p>打开：file-&gt; Settings -&gt; project Interpreters -&gt; SSH Interpreter</p>
</blockquote>
<p><img src="/images/blog-images/images-Intellij/2020102801.png"></p>
<p><img src="/images/blog-images/images-Intellij/2020102802.png"></p>
<p><img src="/images/blog-images/images-Intellij/2020102803.png"></p>
<p><img src="/images/blog-images/images-Intellij/2020102804.png"></p>
<p><img src="/images/blog-images/images-Intellij/2020102805.png"></p>
<p><img src="/images/blog-images/images-Intellij/2020102806.png"></p>
]]></content>
      <tags>
        <tag>Idea</tag>
        <tag>Ubuntu</tag>
        <tag>Vmware</tag>
      </tags>
  </entry>
  <entry>
    <title>正版免费激活 Windows 10安装教程</title>
    <url>/2020/06/09/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BB%20Windows%2010%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>现在对于大多数人来说，购买的电脑都是Windows 10正版系统，但是Windows使用一段时间后会出现一些疑难杂症(尤其是刚开始使用的用户)。在这种情况下，重装系统无疑可以解决所有问题。那么，目前网上的教程也是很多，许多教程都提供了Windows激活工具（注：个人认为系统本身就是正版的不需要通过激活工具激活系统，使用Windows的数字密钥即可）。</p>
</blockquote>
<blockquote>
<p>本文就是介绍如何使用Windows 官方教程重装Windows 10系统。</p>
<p>本文将分为三部分：</p>
<p>1、使用Windows 10的恢复功能重装</p>
<p>2、使用Windows官方安装工具重装</p>
<p>3、使用Windows官方安装工具为其他电脑重装</p>
</blockquote>
<a id="more"></a>

<h2 id="1、使用Windows-10的恢复功能重装"><a href="#1、使用Windows-10的恢复功能重装" class="headerlink" title="1、使用Windows 10的恢复功能重装"></a>1、使用Windows 10的恢复功能重装</h2><blockquote>
<p>打开开始菜单–&gt;设置–&gt;更新与安全–&gt;恢复:</p>
<p><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Windows%E6%81%A2%E5%A4%8D%E5%8A%9F%E8%83%BD.png"></p>
</blockquote>
<h2 id="2、使用Windows官方安装工具重装"><a href="#2、使用Windows官方安装工具重装" class="headerlink" title="2、使用Windows官方安装工具重装"></a>2、使用Windows官方安装工具重装</h2><blockquote>
<ul>
<li><p>安装工具下载链接：<a href="https://www.microsoft.com/zh-cn/software-download/windows10?36261b60-2f68-4336-abe2-4b00f210b6aa=True">here</a></p>
</li>
<li><p>网页界面展示：</p>
<p><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Windows10%E5%AE%98%E6%96%B9%E8%AF%B4%E6%98%8E.png"></p>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><p>点击立即下载工具即可下载：</p>
</li>
<li><p>打开下载的：MediaCreationTool.exe</p>
<p><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Windows%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F01.png"></p>
<ul>
<li>点击立即升级这台电脑，即可自动升级</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="3、使用Windows官方安装工具为其他电脑重装"><a href="#3、使用Windows官方安装工具为其他电脑重装" class="headerlink" title="3、使用Windows官方安装工具为其他电脑重装"></a>3、使用Windows官方安装工具为其他电脑重装</h2><p>1 ）获取安装介质</p>
<blockquote>
<ul>
<li><p>打开第二步的安装介质–&gt;选择为另一台电脑创建安装介质</p>
</li>
<li><p>选择系统配置（注：应选择当前系统配置）</p>
<p><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Windows%E5%AE%89%E8%A3%85%E5%B7%A5%E5%85%B7%E9%80%89%E6%8B%A9%E9%85%8D%E7%BD%AE.png"></p>
</li>
<li><p>选择安装介质（我这里选择ISO，因为本文操作在Vm ware进行）</p>
</li>
</ul>
<p>  <img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Windows%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E9%80%89%E6%8B%A9%E5%AE%89%E8%A3%85%E4%BB%8B%E8%B4%A8.png"></p>
<ul>
<li><p>选择安装介质保存路径：</p>
<p><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Windows%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E9%80%89%E6%8B%A9%E4%BF%9D%E5%AD%98%E8%B7%AF%E5%BE%84.png"></p>
</li>
<li><p>下载安装介质：</p>
<p><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Windows%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E4%BB%8B%E8%B4%A8.png"></p>
</li>
<li><p>等待下载成功</p>
</li>
</ul>
</blockquote>
<p>2）进行安装：</p>
<blockquote>
<p>由于写博客，我将使用Vmware进行安装一台Windows10虚拟机为例。(安装过程有疑问可留言)</p>
</blockquote>
<blockquote>
<ul>
<li><p>创建虚拟机（注：固件类型选择：BIOS）：</p>
<p><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE.png"></p>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>开启虚拟机进行安装</li>
</ul>
<p><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%8501.png"></p>
<p><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%8502.png"><br><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%8503.png"><br><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%8504.png"><br><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%8505.png"></p>
</blockquote>
<ul>
<li>召唤小娜配置（按小娜提示进行）</li>
</ul>
<blockquote>
<p><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%8506.png"><br><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%8507.png"><br><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%8508.png"><br><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%8509.png"><br><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%8510.png"></p>
</blockquote>
<ul>
<li>安装成功</li>
</ul>
<blockquote>
<p><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%8511.png"></p>
<p><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%8512.png"><br><img src="/images/blog-images/%E6%AD%A3%E7%89%88%E5%85%8D%E6%BF%80%E6%B4%BBWindows10%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%8513.png"></p>
</blockquote>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>希望可以帮助到您！！！</p>
]]></content>
      <categories>
        <category>工具篇</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据平台核心技术-实验记录</title>
    <url>/2020/05/20/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<hr>
<center><font size=5 face="华文行楷">**有问题多尝试解决，可评论留言遇到的问题**</font></center>
<center><font size=5 face="华文行楷">**博客表述不清的地方请留言，看到后会更新博客**</font></center>
<center><font size=5 face="华文行楷">**本文仅供参考**</font></center>
---


<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><blockquote>
<p>学校：许昌学院<br>学院：信息工程学院<br>实验环境：<br>操作系统：Linux (CentOS 6.7)   JDK版本：1.8 (8u161)   Hadoop版本：2.7.4<br>虚拟机：VMware Workstation Pro 15.5</p>
<span id="more"></span>

<p>参考资料：<br><a href="http://ow365.cn/?i=11311&ssl=1&furl=0As6WW@zSHIfqZy_0miBI1NfVmqplNkx4osgxUapgos7zntvq_BluwUV5DjSGRhsy0G2rZfJLZQj0lyND3etHUpYYEyzpi_Deayb9MaSslZupBzxsVXIgVEfvxrfBdkTELF46ffIL6_5BN@DdrN8PUs64@plwUmr">Hadoop大数据技术原理与应用</a><br><a href="https://man.linuxde.net/">linux命令大全（手册）</a><br><a href="https://mooc1-2.chaoxing.com/course/205757841.html">大数据平台核心技术 樊志伟</a></p>
</blockquote>
<hr>
<center><font size=5 face="华文行楷">**有问题多尝试解决，可评论留言遇到的问题**</font></center>
---



<h1 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h1><h2 id="实验一-：Hadoop集群搭建"><a href="#实验一-：Hadoop集群搭建" class="headerlink" title="实验一 ：Hadoop集群搭建"></a>实验一 ：Hadoop集群搭建</h2><p><strong>1.</strong> <strong>实验目的</strong></p>
<p>熟悉常用Linux操作，学会搭建Hadoop集群，为后续上机实验做准备。</p>
<p><strong>2.</strong> <strong>实验环境（推荐）</strong></p>
<p>操作系统：Linux (CentOS 6.7)  JDK版本：1.8 (8u161)  Hadoop版本：2.7.4</p>
<p><strong>3.</strong> <strong>实验内容和要求</strong></p>
<table>
<thead>
<tr>
<th align="left"><strong>（一）熟悉常用**</strong>Linux**<strong>操作</strong></th>
<th align="left"></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>实验内容</strong></td>
<td align="left"><strong>使用到的命令</strong></td>
<td></td>
</tr>
<tr>
<td align="left">(1)    切换到目录 /usr/local  <br>(2)    去到目前的上层目录   <br>(3)    回到自己的主文件夹</td>
<td align="left">cd: 切换目录</td>
<td></td>
</tr>
<tr>
<td align="left">(4)    查看目录/usr下所有的文件</td>
<td align="left">ls: 查看文件与目录</td>
<td></td>
</tr>
<tr>
<td align="left">(5)    进入/tmp目录，创建名为a的目录  <br> (6)    创建目录a1/a2/a3/a4</td>
<td align="left">mkdir: 新建新目录</td>
<td></td>
</tr>
<tr>
<td align="left">(7)    将主文件夹下的.bashrc复制到/tmp下，命名为bashrc1   <br>(8)    在/tmp下新建目录test，再复制这个目录到/usr</td>
<td align="left">cp: 复制文件或目录</td>
<td></td>
</tr>
<tr>
<td align="left">(9)    将第7例文件bashrc1移动到目录/usr/test   <br>(10)   将第9例test目录重命名为test2</td>
<td align="left">mv: 移动文件与目录，或更名</td>
<td></td>
</tr>
<tr>
<td align="left">(11)   将以上例子中的bashrc1文件删除 <br> (12)   将第10例的test2目录删除</td>
<td align="left">rm: 移除文件或目录</td>
<td></td>
</tr>
<tr>
<td align="left">(13)   查看主文件夹下的.bashrc文件内容</td>
<td align="left">cat: 查看文件内容</td>
<td></td>
</tr>
<tr>
<td align="left">(14)   在/目录下新建目录test，然后打包成test.tar.gz <br> (15)   将第14例文件解压缩到/tmp目录</td>
<td align="left">tar: 压缩、解压缩命令</td>
<td></td>
</tr>
<tr>
<td align="left"><strong>（二）搭建**</strong>Hadoop**<strong>集群的前期准备</strong></td>
<td align="left"></td>
<td></td>
</tr>
<tr>
<td align="left"><strong>实验内容</strong></td>
<td align="left"><strong>使用到的命令</strong></td>
<td></td>
</tr>
<tr>
<td align="left">(16)   配置三台虚拟机的网络</td>
<td align="left">vi. ifconfig, reboot, ping, service</td>
<td></td>
</tr>
<tr>
<td align="left">(17)   配置SSH免密码登陆</td>
<td align="left">rpm, grep, ssh-keygen, ssh-copy-id, ssh, exit</td>
<td></td>
</tr>
<tr>
<td align="left"><strong>（三）搭建**</strong>Hadoop**<strong>集群</strong></td>
<td align="left"></td>
<td></td>
</tr>
<tr>
<td align="left"><strong>实验内容</strong></td>
<td align="left"><strong>使用到的命令</strong></td>
<td></td>
</tr>
<tr>
<td align="left">(18)   安装并配置指定版本的JDK</td>
<td align="left">rz, cd, tar, mv, vi, source</td>
<td></td>
</tr>
<tr>
<td align="left">(19)   安装并配置Hadoop集群主节点</td>
<td align="left">rz, tar, vi</td>
<td></td>
</tr>
<tr>
<td align="left">(20)   分发Hadoop至子节点并配置</td>
<td align="left">scp, source</td>
<td></td>
</tr>
<tr>
<td align="left">(21)   格式化HDFS，启动Hadoop集群</td>
<td align="left">hdfs namenode -format, start-dfs.sh</td>
<td></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td></td>
</tr>
</tbody></table>
<h2 id="实验二-：使用MapReduce实现倒排索引"><a href="#实验二-：使用MapReduce实现倒排索引" class="headerlink" title="实验二 ：使用MapReduce实现倒排索引"></a>实验二 ：使用MapReduce实现倒排索引</h2><p><strong>1.</strong> <strong>实验目的</strong></p>
<ul>
<li><p>掌握HDFS操作常用的Shell命令；</p>
</li>
<li><p>熟悉HDFS操作常用的Java API；</p>
</li>
<li><p>掌握倒排索引及其MapReduce实现。</p>
</li>
</ul>
<p><strong>2.</strong> <strong>实验环境（推荐）</strong></p>
<ul>
<li><p>Java开发环境：JDK 1.8 (8u161)</p>
</li>
<li><p>分布式开发环境：Hadoop 2.7.4</p>
</li>
<li><p>集成开发环境：Eclipse或IntelliJ IDEA</p>
</li>
<li><p>项目构建工具：Maven 3.5.4</p>
</li>
</ul>
<p><strong>3.</strong> <strong>实验内容和要求</strong></p>
<table>
<thead>
<tr>
<th align="left"><strong>（一）使用Shell命令操作HDFS</strong></th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>实验要求</strong></td>
<td align="left"><strong>其他说明</strong></td>
</tr>
<tr>
<td align="left">(1)    在HDFS根目录下创建目录：“/学号后两位/test/”  <br>(2)    将本地系统中的文本文件复制到第(1)步创建的目录中  <br>(3)    将第(2)步上传的文本文件复制到本地系统</td>
<td align="left">需要使用到集群  <br>文本文件统一命名为：hdfs_sh.txt，内容随意</td>
</tr>
<tr>
<td align="left"><strong>（二）使用Java API操作HDFS</strong></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>实验要求</strong></td>
<td align="left"><strong>其他说明</strong></td>
</tr>
<tr>
<td align="left">(4)    搭建Hadoop HDFS开发环境  <br>(5)    初始化HDFS客户端对象  <br>(6)    在本地创建文本文件并上传到HDFS  <br>(7)    从HDFS将第(6)步上传的文件下载到本地</td>
<td align="left">需要使用到集群  <br> 使用Maven  <br> 文本文件统一命名为：hdfs_java.txt，内容随意</td>
</tr>
<tr>
<td align="left"><strong>（三）使用MapReduce实现倒排索引</strong></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>实验要求</strong></td>
<td align="left"><strong>其他说明</strong></td>
</tr>
<tr>
<td align="left">(8)    收集数据，根据来源将数据存储在多个文本文件中 <br> (9)    编写Map阶段程序代码  <br>(10)   编写Combine阶段程序代码（可选） <br> (11)   编写Reduce阶段程序代码 <br> (12)   实现Driver主驱动程序并测试运行</td>
<td align="left">无需使用集群  <br> 使用Maven  <br> 多个数据文件放在同一个文件夹中，文件夹命名为：mrdata</td>
</tr>
</tbody></table>
<hr>
<center><font size=5 face="华文行楷">**有问题多尝试解决，可评论留言遇到的问题**</font></center>
---




<h1 id="三、实验过程记录"><a href="#三、实验过程记录" class="headerlink" title="三、实验过程记录"></a>三、实验过程记录</h1><h2 id="2-1安装准备"><a href="#2-1安装准备" class="headerlink" title="2.1安装准备"></a>2.1安装准备</h2><p>1、安装虚拟机</p>
<blockquote>
<p>注意：每台虚拟机的内存需要量力而行，因为一共三台虚拟机加一台主机呢！如：本机共8g内存，那么平均分给4台电脑，每台可设2g内存！</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200430203445782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2、创建工作目录：</p>
<blockquote>
<p>mkdir -p /export/data</p>
<p>mkdir -p /export/software</p>
<p>mkdir -p /export/servers</p>
</blockquote>
<p>   <img src="https://img-blog.csdnimg.cn/20200430203525418.png" alt="在这里插入图片描述"></p>
<p>3、克隆虚拟机<br>    <img src="https://img-blog.csdnimg.cn/20200430203634265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>4、Linux网络配置</p>
<blockquote>
<p> a&gt;配置VM ware<br>  b&gt;配置主机名         :vi /etc/sysconfig/network<br>  c&gt;配置IP地址映射:      vi /etc/hosts</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200430204038380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200430204124157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>5、网络参数配置</p>
<blockquote>
<p> a&gt;配置MAC地址<br> ​b&gt;配置静态IP<br> c&gt;验证</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200430204423476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>6、SSH服务配置</p>
<blockquote>
<p>   a&gt; 查看是否安装SSH：​       rpm -qa |grep ssh<br>   b&gt;安装SSH:       yum install openssh-server<br>   c&gt;查看SSH服务是否启动：​       ps -e | grep sshd</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200430205347682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>7、虚拟机免密登录</p>
<blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200501121828501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<ul>
<li><p>为什么要免密登录</p>
<blockquote>
<p>Hadoop节点众多,所以一般在主节点启动从节点这个时候就需要程序自动在主节点登录到从节点中,如果不能免密就每次都要输入密码,非常麻烦</p>
</blockquote>
</li>
<li><p>免密SSH登录的原理</p>
<blockquote>
<p>1.需要先在B节点配置A节点的公钥</p>
<ol start="2">
<li>A节点请求B节点要求登录</li>
<li>B节点使用A节点的公钥，加密- -段随机文本</li>
<li>A节点使用私钥解密，并发回给B节点</li>
<li>B节点验证文本是否正确</li>
</ol>
</blockquote>
</li>
<li><p>第一步:三台机器生成公钥与私钥</p>
<blockquote>
<p>在三台机器执行以下命令，生成公钥与私钥<br>ssh -keygen -t rsa<br>执行该命令之后，按下三个回车即可<br><img src="https://img-blog.csdnimg.cn/20200501121942925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
</li>
</ul>
<ul>
<li><p>第二步:拷贝公钥到同一台机器</p>
<blockquote>
<p>三台机器将拷贝公钥到第一台机器<br>三台机器执行命令: ssh-copy-id hadoop01<br><img src="https://img-blog.csdnimg.cn/20200501121959450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
</li>
</ul>
<ul>
<li>第三步:复制第一台机器的认证到其他机器    <blockquote>
<p>将第一台机器的公钥拷贝到其他机器上<br>在第一天机器上面指向以下命令<br>scp /root/.ssh/authorized_ keys hadoop02:/root/.ssh</p>
<p>scp /root/.ssh/authorized_ keys hadoop03:/root/.ssh<br><img src="https://img-blog.csdnimg.cn/20200501122032137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
</li>
</ul>
<hr>
<center><font size=4 face="华文行楷">**有问题多尝试解决，可评论留言遇到的问题**</font></center>
---


<h2 id="2-2-Hadoop集群搭建"><a href="#2-2-Hadoop集群搭建" class="headerlink" title="2.2 Hadoop集群搭建"></a>2.2 Hadoop集群搭建</h2><h3 id="1、安装文件上传工具"><a href="#1、安装文件上传工具" class="headerlink" title="1、安装文件上传工具"></a>1、安装文件上传工具</h3><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">安装命令：yum install lrzsz -y<br><br>使用命令：rz<br></code></pre></td></tr></table></figure>
</blockquote>
<h3 id="2、JDK安装"><a href="#2、JDK安装" class="headerlink" title="2、JDK安装"></a>2、JDK安装</h3><ul>
<li>下载JDK</li>
</ul>
<blockquote>
<p><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>
</blockquote>
<ul>
<li>查看当前系统自带jdk并卸载：<blockquote>
<p>注：<a href="https://blog.csdn.net/magicianjun/article/details/78530129?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158841850819725219935502%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=158841850819725219935502&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-5">参考:here</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">rpm -qa | grep java<br></code></pre></td></tr></table></figure>
<img src="https://img-blog.csdnimg.cn/20200502194323658.png" alt="在这里插入图片描述"><blockquote>
<p>然后通过    rpm -e –nodeps   后面跟系统自带的jdk名    这个命令来删除系统自带的jdk，</p>
</blockquote>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">例如：<br>	rpm -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64<br>    rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64<br>    rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64<br>    rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64<br></code></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200502194503428.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>删完之后可以再通过    rpm -qa | grep Java  命令来查询出是否删除掉<br><img src="https://img-blog.csdnimg.cn/2020050219463683.png" alt="在这里插入图片描述"></p>
</blockquote>
<ul>
<li>安装JDK</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">上传jdk到/export/software路径下去，井解压</span><br><br>tar -zxvf jdk-8u161-linux-x64.tar.gz -C /export/servers/<br><br>mv jdk1.8.0_161 jdk<br></code></pre></td></tr></table></figure>

<ul>
<li>配置JDK环境变量</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vi /etc/profile<br><br>添加以下内容：<br><br>export JAVA_HOME=/export/servers/jdk<br><br>export PATH=$PATH:$JAVA_HOME/bin<br><br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br><br>修改完成之后记得source /etc/profle生效<br><br>source /etc/profile<br></code></pre></td></tr></table></figure>



<ul>
<li>JDK环境验证</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">java -version<br></code></pre></td></tr></table></figure>

<h3 id="3、Hadoop安装"><a href="#3、Hadoop安装" class="headerlink" title="3、Hadoop安装:"></a>3、Hadoop安装:</h3><ul>
<li>下载Hadoop安装包</li>
</ul>
<blockquote>
<p><a href="http://archive.apache.org/dist/hadoop/common/">http://archive.apache.org/dist/hadoop/common/</a></p>
</blockquote>
<ul>
<li>解压安装Hadoop</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将hadoop-2.7.4. tar.gz包上传到/export/software日录</span><br><br>cd /export/softwares<br><br>tar -zxvf hadoop-2.7.4.tar.gz -C /export/servers/<br></code></pre></td></tr></table></figure>




<ul>
<li>配置</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">export HADOOP_HOME=/export/servers/hadoop-2.7.4<br><br>export PATH=:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH<br></code></pre></td></tr></table></figure>

<blockquote>
<p> 修改完成之后记得source /etc/profle生效</p>
<p> source /etc/profile</p>
</blockquote>
<ul>
<li>验证Hadoop环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hadoop version  <br></code></pre></td></tr></table></figure>



<h3 id="4、Hadoop集群配置"><a href="#4、Hadoop集群配置" class="headerlink" title="4、Hadoop集群配置"></a>4、Hadoop集群配置</h3><blockquote>
<p>#进入目录</p>
<p>cd /export/servers/hadoop-2.7.4/etc/hadoop</p>
</blockquote>
<p> <strong>4.1 配置Hadoop集群主节点</strong></p>
<blockquote>
<p>该部分可参考：<a href="http://hadoop.apache.org/docs/r2.7.4/hadoop-project-dist/hadoop-common/ClusterSetup.html">官方文档</a></p>
</blockquote>
<ul>
<li><p>修改hadoop-env.sh</p>
<blockquote>
<p>export JAVA_HOME=/export/servers/jdk</p>
</blockquote>
</li>
<li><p>修改core-site.xml</p>
<pre><code><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">&lt;configuration&gt;<br><br>​    &lt;property&gt;<br><br>​        &lt;name&gt;fs.defaultFS&lt;/name&gt;<br><br>​        &lt;value&gt;hdfs://hadoop01:9000&lt;/value&gt;<br><br>​    &lt;/property&gt;<br><br>​    &lt;property&gt;<br><br>​        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;  <br><br>​        &lt;value&gt;/export/servers/hadoop-2.7.4/tmp&lt;/value&gt;<br><br>​    &lt;/property&gt;<br><br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>修改hdfs-site.xml</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">&lt;configuration&gt;<br><br>​    &lt;property&gt;<br><br>​        &lt;name&gt;dfs.replication&lt;/name&gt;<br><br>​         &lt;value&gt;3&lt;/value&gt;<br><br>​    &lt;/property&gt;<br><br><br>​    &lt;property&gt;<br><br>​        &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;<br><br>​        &lt;value&gt;hadoop02:50090&lt;/value&gt;<br><br>​    &lt;/property&gt;<br><br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure>


</li>
<li><p>修改mapred-site.xml</p>
<blockquote>
<p>cp mapred-site.xml.template mapred-site.xml</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">&lt;!-- Put site-specific property overrides in this file. --&gt;<br><br>&lt;configuration&gt;<br><br>​    &lt;!--指定MapReduce运行时框架， 这里指定在Yarn上，默认是local --&gt;<br><br>​    &lt;property&gt;<br><br>​        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;<br><br>​        &lt;value&gt;yarn&lt;/value&gt;<br><br>​    &lt;/property&gt;<br><br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure>

</li>
<li><p>修改yarn-site.xml</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">&lt;configuration&gt;<br><br>​    &lt;!-- Site specific YARN configuration properties --&gt;<br><br>​    &lt;property&gt;<br><br>​        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;<br><br>​        &lt;value&gt;hadoop01&lt;/value&gt;<br><br>​    &lt;/property&gt;<br><br>​    &lt;property&gt;<br><br>​        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;<br><br>​        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;<br><br>​    &lt;/property&gt;<br><br>   	 &lt;!-- 2020.5.2更新：设置内存 --&gt;<br>   &lt;property&gt;<br>       <br>       &lt;name&gt;yarn.nodemanager.resource.memory-mb&lt;/name&gt;<br>       <br>       &lt;value&gt;1600&lt;/value&gt;<br>   <br>   &lt;/property&gt;<br>   <br>   &lt;!-- 设置cpu 核数 --&gt;<br>   <br>   &lt;property&gt;<br>   <br>       &lt;name&gt;yarn.nodemanager.resource.cpu-vcores&lt;/name&gt;<br>   <br>       &lt;value&gt;1&lt;/value&gt;<br>   <br>   &lt;/property&gt;<br><br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure>





</li>
</ul>
<ul>
<li><p>修改slaves文件。打开该配置文件，先删除里面的内容(默认localhost) ，然后配置如下内容。</p>
<pre><code><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hadoop01<br><br>hadoop02<br><br>hadoop03<br></code></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<p><strong>4.2 将集群主节点的配置文件分发到其他子节点</strong></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">scp /etc/profile hadoop02:/etc/profile<br><br>scp /etc/profile hadoop03:/etc/profile<br><br>scp -r /export/ hadoop02:/  <br><br>scp -r /export/ hadoop03:/  <br><br>在hadoop02和hadoop03上执行：source /etc/profile<br></code></pre></td></tr></table></figure>

<hr>
<center><font size=4 face="华文行楷">**有问题多尝试解决，可评论留言遇到的问题**</font></center>
---



<h2 id="2-3Hadoop集群测试"><a href="#2-3Hadoop集群测试" class="headerlink" title="2.3Hadoop集群测试"></a>2.3Hadoop集群测试</h2><h3 id="1、格式化文件系统"><a href="#1、格式化文件系统" class="headerlink" title="1、格式化文件系统"></a>1、格式化文件系统</h3><blockquote>
<p>初次启动HDFS集群时，必须对主节点进行格式化处理。</p>
<p> 格式化文件系统指令如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hdfs namenode -format</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hadoop namenode -format</span><br></code></pre></td></tr></table></figure>
</blockquote>
<h3 id="2、启动和关闭Hadoop集群"><a href="#2、启动和关闭Hadoop集群" class="headerlink" title="2、启动和关闭Hadoop集群"></a>2、启动和关闭Hadoop集群</h3><ul>
<li><p>单节点逐个启动和关闭</p>
<ul>
<li><p>在主节点上执行指令启动/关闭HDFS NameNode进程;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hadoop-daemon.sh start namenode<br></code></pre></td></tr></table></figure>
</li>
<li><p>在每个从节点上执行指令启动/关闭HDFS DataNode进程;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hadoop-daemon.sh start datanode<br>    <br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用jps查看java进程验证</span><br>    <br>jps<br></code></pre></td></tr></table></figure>
<p> <img src="https://img-blog.csdnimg.cn/20200501151418746.png" alt="在这里插入图片描述"></p>
</li>
<li><p>在主节点上执行指令启动/关闭YARN ResourceManiger进程;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yarn-daemon.sh start resourcemanager<br></code></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<ul>
<li><p>在每个从节点上执行指令启动/关闭YARN nodemanager进程;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yarn-daemon.sh start nodemanager<br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用jps查看java进程验证</span><br>    <br>jps<br></code></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200501151458898.png" alt="在这里插入图片描述"></p>
</li>
<li><p>在节点hadoop02执行指令启动/关闭SecondaryNameNode进程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">hadoop-daemon.sh start secondarynamenode<br></code></pre></td></tr></table></figure>
</li>
<li><p>关闭只需将start 换成stop<br><img src="https://img-blog.csdnimg.cn/20200501151513264.png" alt="在这里插入图片描述"></p>
</li>
<li><p>脚本一键启动和关闭   </p>
<blockquote>
<ol>
<li>   在主节点hadoop01上执行指令“start-dfs.sh”或“stop-dfs.sh”启动/关闭所有HDFS服务进程；</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>   在主节点hadoop01上执行指令“start-yarn.sh”或“stop-yarn.sh”启动/关闭所有YARN服务进程；</li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li>   在主节点hadoop01上执行“start-all.sh”或“stop-all.sh”指令，直接启动/关闭整个Hadoop集群服务。</li>
</ol>
</blockquote>
<h3 id="3、通过UI查看Hadoop运行状态"><a href="#3、通过UI查看Hadoop运行状态" class="headerlink" title="3、通过UI查看Hadoop运行状态"></a>3、通过UI查看Hadoop运行状态</h3></li>
</ul>
<blockquote>
<p>Hadoop集群正常启动后，它默认开放了两个端口50070和8088，分别用于监控HDFS集群和YARN集群。通过UI界面可以方便地进行集群的管理和查看，只需要在本地操作系统的浏览器输入集群服务的IP和对应的端口号即可访问。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">1) 配置IP映射：<br><br>  打开：C:\Windows\System32\drivers\etc\hosts<br><br>  添加以下内容：<br><br>  192.168.121.134 hadoop01<br><br>  192.168.121.135 hadoop02<br><br>  192.168.121.136 hadoop03<br><br>2) 关闭防火墙：service iptables stop<br><br>3) 关闭防火墙开机启动：chkconfig iptables off<br></code></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200501151827961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p>在Windows系统下，访问<a href="http://hadoop01:8088，查看Yarn集群状态，且从图中可以看出Yarn集群状态显示正常。">http://hadoop01:8088，查看Yarn集群状态，且从图中可以看出Yarn集群状态显示正常。</a><br><img src="https://img-blog.csdnimg.cn/20200501151816983.png" alt="在这里插入图片描述"><br> 注：点击左侧Nodes，看到以下页面，一般配置就正确了</p>
<p> <img src="https://img-blog.csdnimg.cn/20200502230541775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<hr>
<center><font size=4 face="华文行楷">**有问题多尝试解决，可评论留言遇到的问题**</font></center>
---




<h2 id="2-4Hadoop集群初体验"><a href="#2-4Hadoop集群初体验" class="headerlink" title="2.4Hadoop集群初体验"></a>2.4Hadoop集群初体验</h2><h3 id="Hadoop经典案例——单词统计"><a href="#Hadoop经典案例——单词统计" class="headerlink" title="Hadoop经典案例——单词统计"></a>Hadoop经典案例——单词统计</h3><ul>
<li>打开HDFS的UI界面，查看HDFS中是否有数据文件，默认是没有数据文件。<br><img src="https://img-blog.csdnimg.cn/20200501151929590.png" alt="在这里插入图片描述"></li>
</ul>
<ul>
<li><p>准备文本文件，在Linux系统上编辑一个文本文件，然后上传至HDFS上。</p>
<blockquote>
<p>创建数据存储目录：mkdir -p /export/data</p>
<p>  编辑文件：vi word.txt</p>
<p>  写入一些单词：</p>
<p>  hello itcast</p>
<p>  hello itheima</p>
<p>  hello Hadoop</p>
</blockquote>
<blockquote>
<p>  在hdfs上创建目录：hadoop fs -mkdir -p /wordcount/input</p>
<p> <img src="https://img-blog.csdnimg.cn/20200501152009265.png" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p>  将文件上传至hdfs 的目录：hadoop fs -put /export/data/word.txt /wordcount/input</p>
<p>​    <img src="https://img-blog.csdnimg.cn/20200501152025425.png" alt="在这里插入图片描述"></p>
</blockquote>
</li>
</ul>
<ul>
<li><p>运行hadoop-mapreduce-examples-2.7.4.jar包，实现词频统计。</p>
<blockquote>
<p>  进入：cd /export/servers/hadoop-2.7.4/share/hadoop/mapreduce</p>
<p>  执行：hadoop jar hadoop-mapreduce-examples-2.7.4.jar wordcount /wordcount/input /wordcount/output<br>注：执行该步时出错，（一直为接受状态，没有运行；有大佬请解答！）如下图：（已解决！）<br><img src="https://img-blog.csdnimg.cn/20200501152219637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>成功界面：<br><img src="https://img-blog.csdnimg.cn/2020050223094057.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
</li>
</ul>
<ul>
<li><p>查看UI界面，Yarn集群UI界面出现程序运行成功的信息。HDFS集群UI界面出现了结果文件。</p>
<p>  <img src="https://img-blog.csdnimg.cn/20200502231418884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ul>
<hr>
<center><font size=5 face="华文行楷">**分割线，请保证实验一正确完成词频统计部分**</font></center>
<center><font size=4 face="华文行楷">**有问题多尝试解决，可评论留言遇到的问题**</font></center>
---



<h2 id="3-3-使用Shell命令操作HDFS"><a href="#3-3-使用Shell命令操作HDFS" class="headerlink" title="3.3 使用Shell命令操作HDFS"></a>3.3 使用Shell命令操作HDFS</h2><blockquote>
<p>Shell在计算机科学中俗称“壳”，是提供给使用者使用界面的进行与系统交互的软件，通过接收用户输入的命令执行相应的操作，Shell分为图形界面Shell和命令行式Shell。</p>
</blockquote>
<blockquote>
<p>官方文档：<a href="http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/FileSystemShell.html">here</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hadoop fs &lt;args&gt;<br>hadoop dfs &lt;args&gt;<br>hdfs dfs &lt;args&gt;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>上述命令中，“hadoop fs” 是使用面最广，可以操作任何文件系统，如本地系统、HDFS等，“hadoop dfs”则主要针对HDFS文件系统，已经被“Ihdfs dfs”代替。</p>
</blockquote>
<blockquote>
<p>文件系统(FS) Shell 包含了各种的类shell的命令，可以直接与Hadoop分布式文件系统以及其他文件系统进行交互，如与LocalFS、 HTTPFS、S3 FS 文件系统交互等。通过命令行的方式进行交互，具体操作常用命令，如表下表：</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left"><strong>命令参数</strong></th>
<th align="left"><strong>功能描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">-ls</td>
<td align="left">查看指定路径的目录结构</td>
</tr>
<tr>
<td align="left">-du</td>
<td align="left">统计目录下所有文件大小</td>
</tr>
<tr>
<td align="left">-mv</td>
<td align="left">移动文件</td>
</tr>
<tr>
<td align="left">-cp</td>
<td align="left">复制文件</td>
</tr>
<tr>
<td align="left">-rm</td>
<td align="left">删除文件/空白文件夹</td>
</tr>
<tr>
<td align="left"><strong>-cat</strong></td>
<td align="left"><strong>查看文件内容</strong></td>
</tr>
<tr>
<td align="left"><strong>-text</strong></td>
<td align="left"><strong>源文件输出为文本格式</strong></td>
</tr>
<tr>
<td align="left"><strong>-mkdir</strong></td>
<td align="left"><strong>创建空白文件夹</strong></td>
</tr>
<tr>
<td align="left"><strong>-put</strong></td>
<td align="left"><strong>上传文件</strong></td>
</tr>
<tr>
<td align="left"><strong>-help</strong></td>
<td align="left"><strong>帮助</strong></td>
</tr>
<tr>
<td align="left"><strong>-get</strong></td>
<td align="left"><strong>下载文件</strong></td>
</tr>
</tbody></table>
<p><strong>1、    ls命令</strong><br><img src="https://img-blog.csdnimg.cn/20200519183121865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200519182723281.png" alt="在这里插入图片描述"><br> <strong>2、    mkdir命令</strong><br> <img src="https://img-blog.csdnimg.cn/2020051918315184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <img src="https://img-blog.csdnimg.cn/20200519182812945.png" alt="在这里插入图片描述"><br> <strong>3、    put命令</strong><br> <img src="https://img-blog.csdnimg.cn/20200519183218360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200519182851372.png" alt="在这里插入图片描述"><br> <img src="https://img-blog.csdnimg.cn/20200519182928834.png" alt="在这里插入图片描述"><br> <img src="https://img-blog.csdnimg.cn/20200519182957696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>4、    get命令</strong><br> <img src="https://img-blog.csdnimg.cn/20200519183243173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2020051918302595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>5、    其他命令：</strong><a href="http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/FileSystemShell.html">here</a></p>
<hr>
<center><font size=5 face="华文行楷">
**该部分大多数问题是因为实验一未正确完成导致**
</font></center>
<center><font size=4 face="华文行楷">
**有问题多尝试解决，可评论留言遇到的问题**
</font></center>

<hr>
<h2 id="3-4-HDFS的Java-API操作"><a href="#3-4-HDFS的Java-API操作" class="headerlink" title="3.4 HDFS的Java API操作"></a>3.4 HDFS的Java API操作</h2><blockquote>
<p>由于Hadoop是使用Java语言编写的，因此可以使用Java API操作Hadoop文件系统。HDFS Shell本质上就是对Java API的应用，通过编程的形式操作HDFS，其核心是使用HDFS提供的Java API构造一个访问客户端对象，然后通过客户端对象对HDFS上的文件进行操作（增、删、改、查）。<br>参考：<a href="https://my.oschina.net/u/2371923/blog/2870791">https://my.oschina.net/u/2371923/blog/2870791</a></p>
</blockquote>
<p><strong>(1)    搭建Hadoop HDFS开发环境</strong></p>
<p><strong>1、win10上搭建hadoop环境</strong></p>
<blockquote>
<p>1).官网下载hadoop-2.7.4.tar.gz版本，解压:D:\hadoop-2.7.4</p>
</blockquote>
<blockquote>
<p>2).配置环境变量</p>
<p>​    </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">HADOOP_HOME=D:\hadoop-2.7.4<br>PATH=%HADOOP_HOME%\bin<br></code></pre></td></tr></table></figure>

<blockquote>
<p>3.将windows上编译的文件hadoop.dll、winutils.exe放至%HADOOP_HOME%\bin下</p>
</blockquote>
<blockquote>
<p>4.将hadoop.dll放到c:/windows/System32下</p>
</blockquote>
<blockquote>
<p>5.设置D:\hadoop-2.7.4\etc\hadoop\hadoop-env.cmd中的JAVA_HOME为真实java路径（路径中不能带空格，否者会报错）.<br><img src="https://img-blog.csdnimg.cn/20200529091922720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p>6.测试hadoop是否配置成功,命令行输入：hadoop version<br><img src="https://img-blog.csdnimg.cn/20200520111842582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<p>​       </p>
<p>  <strong>2、在idea中新建maven工程hadoop-demo</strong></p>
<blockquote>
<p>idea配置maven<br>打开Settings —&gt;搜索maven—&gt;进入就能看到自带maven<br><img src="https://img-blog.csdnimg.cn/20200520104652283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p>更改maven数据源：<br>1、在安装目录找到该文件<br><img src="https://img-blog.csdnimg.cn/20200520105244124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p>2、打开修改以下部分并保存。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">&lt;mirrors&gt;<br>  &lt;!<span class="hljs-literal">--</span> mirror<br>   | Specifies a repository mirror site to use instead of a given repository. The repository that<br>   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used<br>   | <span class="hljs-keyword">for</span> inheritance and direct lookup purposes, and must be unique across the <span class="hljs-built_in">set</span> of mirrors.<br>   |<br>  &lt;mirror&gt;<br>    &lt;id&gt;mirrorId&lt;/id&gt;<br>    &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;<br>    &lt;name&gt;Human Readable Name <span class="hljs-keyword">for</span> this Mirror.&lt;/name&gt;<br>    &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;<br>  &lt;/mirror&gt;<br>   <span class="hljs-literal">--</span>&gt;<br>  &lt;mirror&gt;<br>    &lt;id&gt;aliyun<span class="hljs-literal">-public</span>&lt;/id&gt;<br>    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;<br>    &lt;name&gt;aliyun public&lt;/name&gt;<br>    &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;<br>  &lt;/mirror&gt;<br><br>  &lt;mirror&gt;<br>    &lt;id&gt;aliyun<span class="hljs-literal">-central</span>&lt;/id&gt;<br>    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;<br>    &lt;name&gt;aliyun central&lt;/name&gt;<br>    &lt;url&gt;https://maven.aliyun.com/repository/central&lt;/url&gt;<br>  &lt;/mirror&gt;<br><br>  &lt;mirror&gt;<br>    &lt;id&gt;aliyun<span class="hljs-literal">-spring</span>&lt;/id&gt;<br>    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;<br>    &lt;name&gt;aliyun spring&lt;/name&gt;<br>    &lt;url&gt;https://maven.aliyun.com/repository/spring&lt;/url&gt;<br>  &lt;/mirror&gt;<br><br>  &lt;mirror&gt;<br>    &lt;id&gt;aliyun<span class="hljs-literal">-spring-plugin</span>&lt;/id&gt;<br>    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;<br>    &lt;name&gt;aliyun spring<span class="hljs-literal">-plugin</span>&lt;/name&gt;<br>    &lt;url&gt;https://maven.aliyun.com/repository/spring<span class="hljs-literal">-plugin</span>&lt;/url&gt;<br>  &lt;/mirror&gt;<br><br>&lt;/mirrors&gt;<br><br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>3、将上述文件copy至以下目录进行覆盖<img src="https://img-blog.csdnimg.cn/20200520105816258.png" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p>4、重启idea</p>
</blockquote>
<p> <strong>(2)    初始化HDFS客户端对象</strong><br> 1、创建maven工程并添加依赖，import依赖</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">&lt;dependencies&gt;<br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;<br>           &lt;artifactId&gt;hadoop<span class="hljs-literal">-common</span>&lt;/artifactId&gt;<br>           &lt;version&gt;<span class="hljs-number">2.7</span>.<span class="hljs-number">4</span>&lt;/version&gt;<br>       &lt;/dependency&gt;<br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;<br>           &lt;artifactId&gt;hadoop<span class="hljs-literal">-hdfs</span>&lt;/artifactId&gt;<br>           &lt;version&gt;<span class="hljs-number">2.7</span>.<span class="hljs-number">4</span>&lt;/version&gt;<br>       &lt;/dependency&gt;<br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;<br>           &lt;artifactId&gt;hadoop<span class="hljs-literal">-client</span>&lt;/artifactId&gt;<br>           &lt;version&gt;<span class="hljs-number">2.7</span>.<span class="hljs-number">4</span>&lt;/version&gt;<br>       &lt;/dependency&gt;<br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;<br>           &lt;artifactId&gt;hadoop<span class="hljs-literal">-mapreduce-client-core</span>&lt;/artifactId&gt;<br>           &lt;version&gt;<span class="hljs-number">2.7</span>.<span class="hljs-number">4</span>&lt;/version&gt;<br>       &lt;/dependency&gt;<br>       &lt;dependency&gt;<br>           &lt;groupId&gt;junit&lt;/groupId&gt;<br>           &lt;artifactId&gt;junit&lt;/artifactId&gt;<br>           &lt;version&gt;<span class="hljs-number">4.12</span>&lt;/version&gt;<br>       &lt;/dependency&gt;<br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;<br>           &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;<br>           &lt;version&gt;<span class="hljs-number">3.4</span>.<span class="hljs-number">10</span>&lt;/version&gt;<br>       &lt;/dependency&gt;<br>   &lt;/dependencies&gt;<br></code></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2020052011045868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 2、创建java类,添加初始化HDFS客户端对象的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itcast.hdfsdemo;<br><br><span class="hljs-comment">//import javax.security.auth.login.Configuration;</span><br><br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileSystem;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.junit.After;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span>: hadoopDemo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: dell</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/5/20 - 1:21</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@website</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HDFS_CRUD</span> &#123;<br>    <span class="hljs-type">FileSystem</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 构造一个配置参数对象,设置一个参数：我们要访问的hdfs的URI</span><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-comment">// 这里指定使用的是HDFS文件系统</span><br>        conf.set(<span class="hljs-string">&quot;fs.defaultFS&quot;</span>, <span class="hljs-string">&quot;hdfs://hadoop01:9000&quot;</span>);<br>        <span class="hljs-comment">// 通过如下的方式进行客户端身份的设置</span><br>        System.setProperty(<span class="hljs-string">&quot;HADOOP_USER_NAME&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>        <span class="hljs-comment">// 通过FileSystem的静态方法获取文件系统客户端对象</span><br>        fs = FileSystem.get(conf);<br>    &#125;<br><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 关闭资源</span><br>        fs.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p><strong>(3)    在本地创建文本文件并上传到HDFS</strong><br>1、在本地创建文件：<br><img src="https://img-blog.csdnimg.cn/20200520110923162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2、添加上传文件测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAddFileToHdfs</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      <span class="hljs-comment">// 要上传的文件所在本地路径</span><br>      <span class="hljs-type">Path</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;D:\\Workspaces\\hadoopWorkspace\\data\\test/put/hdfs_java.txt&quot;</span>);<br>      <span class="hljs-comment">// 要上传到hdfs的目标路径</span><br>      <span class="hljs-type">Path</span> <span class="hljs-variable">dst</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;/49/test/&quot;</span>);<br>      <span class="hljs-comment">// 上传文件方法</span><br>      fs.copyFromLocalFile(src, dst);<br>  &#125;<br></code></pre></td></tr></table></figure>
<p>3、启动hadoop集群，运行测试方法进行测试<br><img src="https://img-blog.csdnimg.cn/20200520111156736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>(4)    从HDFS将上传的文件下载到本地</strong><br>1、添加下载文件的测试方法</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">// 从hdfs中复制文件到本地文件系统<br>  @Test<br>  public void testDownloadFileToLocal() throws IllegalArgumentException, IOException &#123;<br>      // 下载文件<br>      fs.copyToLocalFile(new Path(<span class="hljs-string">&quot;/49/test/hdfs_java.txt&quot;</span>), new Path(<span class="hljs-string">&quot;D:\\Workspaces\\hadoopWorkspace\\data\\test/get/&quot;</span>));<br>  &#125;<br></code></pre></td></tr></table></figure>
<p>2、启动集群，运行方法测试<br><img src="https://img-blog.csdnimg.cn/20200520111401122.png" alt="在这里插入图片描述"></p>
<hr>
<center><font size=4 face="华文行楷">**有问题多尝试解决，可评论留言遇到的问题**</font></center>
---



<h2 id="3-5-使用MapReduce实现倒排索引"><a href="#3-5-使用MapReduce实现倒排索引" class="headerlink" title="3.5 使用MapReduce实现倒排索引"></a>3.5 使用MapReduce实现倒排索引</h2><blockquote>
<p>在3.4中的工程里面新建包：cn.itcast.mr.invertedIndex</p>
</blockquote>
<p><strong>(1)    收集数据，根据来源将数据存储在多个文本文件中</strong><br><img src="https://img-blog.csdnimg.cn/20200520201112239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>(2)    编写Map阶段程序代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mr.invertedIndex;<br><br><span class="hljs-keyword">import</span> org.apache.commons.lang.StringUtils;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.LongWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Mapper;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileSplit;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span>: hadoopDemo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: dell</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/5/20 - 12:07</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@website</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvertedIndexMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;LongWritable, Text,Text,Text&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Text</span> <span class="hljs-variable">keyInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<span class="hljs-comment">// 存储单词和 URL 组合</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Text</span> <span class="hljs-variable">valueInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>(<span class="hljs-string">&quot;1&quot;</span>);<span class="hljs-comment">// 存储词频,初始化为1</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(LongWritable key, Text value, Context context)</span><br>            <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@description</span>: 在该方法中将K1和V1转为K2和V2</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span>: [key:K1行偏移量, value：V1行文本数据, context：上下文对象]</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@date</span>: 2020/5/20 - 12:11</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@return</span>: void</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> value.toString();<br>        String[] fields = StringUtils.split(line, <span class="hljs-string">&quot; &quot;</span>);<span class="hljs-comment">// 得到字段数组</span><br>        <span class="hljs-type">FileSplit</span> <span class="hljs-variable">fileSplit</span> <span class="hljs-operator">=</span> (FileSplit) context.getInputSplit();<span class="hljs-comment">// 得到这行数据所在的文件切片</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> fileSplit.getPath().getName();<span class="hljs-comment">// 根据文件切片得到文件名</span><br>        <span class="hljs-keyword">for</span> (String field : fields) &#123;<br>            <span class="hljs-comment">// key值由单词和URL组成，如“MapReduce:file1”</span><br>            keyInfo.set(field + <span class="hljs-string">&quot;:&quot;</span> + fileName);<br>            context.write(keyInfo, valueInfo);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p><strong>(3)    编写Combine阶段程序代码（可选）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mr.invertedIndex;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Reducer;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span>: hadoopDemo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: dell</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/5/20 - 12:16</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@website</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvertedIndexCombiner</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reducer</span>&lt;Text, Text, Text, Text&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Text</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<br><br>    <span class="hljs-comment">// 输入： &lt;MapReduce:file3 &#123;1,1,...&#125;&gt;</span><br>    <span class="hljs-comment">// 输出：&lt;MapReduce file3:2&gt;</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(Text key, Iterable&lt;Text&gt; values, Context context)</span><br>            <span class="hljs-keyword">throws</span> IOException, InterruptedException, IOException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// 统计词频</span><br>        <span class="hljs-keyword">for</span> (Text value : values) &#123;<br>            sum += Integer.parseInt(value.toString());<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">splitIndex</span> <span class="hljs-operator">=</span> key.toString().indexOf(<span class="hljs-string">&quot;:&quot;</span>);<br>        <span class="hljs-comment">// 重新设置 value 值由 URL 和词频组成</span><br>        info.set(key.toString().substring(splitIndex + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;:&quot;</span> + sum);<br>        <span class="hljs-comment">// 重新设置 key 值为单词</span><br>        key.set(key.toString().substring(<span class="hljs-number">0</span>, splitIndex));<br>        context.write(key, info);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p><strong>(4)    编写Reduce阶段程序代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mr.invertedIndex;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Reducer;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span>: hadoopDemo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: dell</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/5/20 - 19:04</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@website</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvertedIndexReducer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reducer</span>&lt;Text, Text, Text, Text&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Text</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<br><br>    <span class="hljs-comment">// 输入：&lt;MapReduce file3:2&gt;</span><br>    <span class="hljs-comment">// 输出：&lt;MapReduce file1:1;file2:1;file3:2;&gt;</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(Text key, Iterable&lt;Text&gt; values, Context context)</span><br>            <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-comment">// 生成文档列表</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br>        <span class="hljs-keyword">for</span> (Text value : values) &#123;<br>            fileList += value.toString() + <span class="hljs-string">&quot;;&quot;</span>;<br>        &#125;<br><br>        result.set(fileList);<br>        context.write(key, result);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p><strong>(5)    实现Driver主驱动程序并测试运行</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mr.invertedIndex;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span>: hadoopDemo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: dell</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/5/20 - 19:17</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@website</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvertedIndexDriver</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException,<br>            ClassNotFoundException, InterruptedException &#123;<br>        <span class="hljs-comment">//保存Job任务对象</span><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-type">Job</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> Job.getInstance(conf);<br><br>        <span class="hljs-comment">//设置Job任务对象</span><br>        job.setJarByClass(InvertedIndexDriver.class);<br>        job.setMapperClass(InvertedIndexMapper.class);<br>        job.setCombinerClass(InvertedIndexCombiner.class);<br>        job.setReducerClass(InvertedIndexReducer.class);<br><br>        job.setOutputKeyClass(Text.class);<br>        job.setOutputValueClass(Text.class);<br><br>        FileInputFormat.setInputPaths(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;D:\\Workspaces\\hadoopWorkspace\\workspace\\hadoopDemo\\src\\main\\resources\\mrdata&quot;</span>));<br>        <span class="hljs-comment">// 指定处理完成之后的结果所保存的位置</span><br>        FileOutputFormat.setOutputPath(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;D:\\Workspaces\\hadoopWorkspace\\workspace\\hadoopDemo\\src\\main\\resources\\output&quot;</span>));<br><br>        <span class="hljs-comment">//启动Job任务 ：向 yarn 集群提交这个 job</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> job.waitForCompletion(<span class="hljs-literal">true</span>);<br><br>        System.exit(res ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p><strong>(6)运行结果</strong><br><img src="https://img-blog.csdnimg.cn/2020052020200047.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<center><font size=5 face="华文行楷">**有问题多尝试解决，可评论留言遇到的问题**</font></center>
---



<h1 id="四、遇到的问题"><a href="#四、遇到的问题" class="headerlink" title="四、遇到的问题"></a>四、遇到的问题</h1><h2 id="实验一："><a href="#实验一：" class="headerlink" title="实验一："></a>实验一：</h2><p>  <strong>1、jdk安装成功，却使用的系统自带jdk</strong></p>
<blockquote>
<p>参考本文：jdk安装 —&gt;查看当前系统自带jdk并卸载：<br>注：<a href="https://blog.csdn.net/magicianjun/article/details/78530129?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158841850819725219935502%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=158841850819725219935502&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-5">参考:here</a></p>
</blockquote>
<p><strong>2、无法启动 NodeManager</strong></p>
<blockquote>
<p>本机配置不满足，修改yarn-siet.xml文件.添加下面内容：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">&lt;!-- 设置内存 --&gt;<br>&lt;property&gt;<br>    &lt;name&gt;yarn.nodemanager.resource.memory-mb&lt;/name&gt;<br>    &lt;value&gt;1600&lt;/value&gt;<br>&lt;/property&gt;<br>&lt;!-- 设置cpu 核数 --&gt;<br>&lt;property&gt;<br>    &lt;name&gt;yarn.nodemanager.resource.cpu-vcores&lt;/name&gt;<br>    &lt;value&gt;1&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>注:<a href="https://blog.csdn.net/weixin_30922589/article/details/96040227">参考：here</a>    </p>
</blockquote>
<p><strong>3、执行词频统计一直处于接受，未运行</strong></p>
<blockquote>
<p>属于服务未全部启动，请确保下图服务启动：</p>
<p><img src="https://img-blog.csdnimg.cn/20200509175253705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<h2 id="实验二："><a href="#实验二：" class="headerlink" title="实验二："></a>实验二：</h2><p><strong>1、运行报错：无法连接到hadoop01:9000</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">java.net.ConnectException: Call From DESKTOP<span class="hljs-literal">-AUK8T9H</span>/<span class="hljs-number">192.168</span>.<span class="hljs-number">121.5</span> to hadoop01:<span class="hljs-number">9000</span> failed on connection exception: java.net.ConnectException: Connection refused: no further <br></code></pre></td></tr></table></figure>
<blockquote>
<p>解决：Hadoop集群未开启导致，将集群开启即可。</p>
</blockquote>
<p><strong>2、配置完成却运行报错:</strong></p>
<blockquote>
<p>解决：查询原因是因为：jdk路径出现空格导致。重新安装jdk至无空格和中文的路径下即可。</p>
</blockquote>
<p><strong>3、Driver主驱动程序进行测试运行报错：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">file:/D:/Workspaces/hadoopWorkspace/workspace/hadoopDemo/src/main/resources/output already exists<br></code></pre></td></tr></table></figure>
<blockquote>
<p>解决：通过删除已存在的输出目录进行解决</p>
</blockquote>
<blockquote>
<p>更新日期：2020.5.20</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>nCov项目总结文档</title>
    <url>/2020/05/06/nCov%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p>﻿<a href="http://39.99.140.59:8002/">TOC</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过Flask搭建web/Echarts可视化大屏，并定时获取数据。</p>
<p>参考视频：<a href="https://www.bilibili.com/video/BV177411j7qJ?p=1">here</a></p>
<p>参考效果：<a href="http://cov.aiiyx.cn/">here</a></p>
<blockquote>
<span id="more"></span>
</blockquote>
<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>基于Python+Flask+Echarts的Epidemic监控系统，主要技术路线如下：</p>
<ul>
<li><p>Python爬虫</p>
</li>
<li><p>Python操作MySql数据库</p>
</li>
<li><p>使用Flask构建web项目</p>
</li>
<li><p>基于Echarts的数据可视化展示</p>
</li>
<li><p>在Linux上部署web项目以及定时获取数据</p>
</li>
<li><p>nCov数据可视化大屏流程：</p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200607183134565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70#pic_center%EF%BC%8C%22" alt="在这里插入图片描述"></p>
<ul>
<li><p>项目结构安排：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">├── app.py    #Flask启动文件<br>├── chromedriver_win32    #chrome浏览器驱动<br>│   └── chromedriver.exe<br>├── db.py     #数据库连接配置<br>├── log       #存放爬虫日志<br>│   └── log_his<br>├── __pycache__<br>│   ├── app.cpython-36.pyc<br>│   ├── db.cpython-36.pyc<br>│   └── utils.cpython-36.pyc<br>├── requirements.txt    #收集到的依赖包<br>├── sh		 #shell脚本用于快速启动爬虫<br>│   ├── start_by_gunicorn.sh<br>│   ├── up_det.sh<br>│   ├── up_his.sh<br>│   └── up_hot.sh<br>├── spider.py  #爬虫文件<br>├── sqlfile    #相应的数据库脚本文件<br>│   ├── 000-details.sql<br>│   ├── 001-history.sql<br>│   ├── 002-hotsearch.sql<br>│   ├── 003-word.sql<br>│   ├── cov.sql<br>│   └── getCityTop5.sql<br>├── static    #静态资源<br>│   ├── css<br>│   │   └── main.css<br>│   │   └── word.css<br>│   ├── image<br>│   │   ├── bgg.png<br>│   │   ├── footer.png<br>│   │   ├── icon.jpg<br>│   │   └── header.png<br>│   └── js<br>│       ├── api<br>│       │   └── Tencent_api.js<br>│       ├── china.js<br>│       ├── controller.js<br>│       ├── ec_center.js<br>│       ├── echarts.min.js<br>│       ├── ec_left1.js<br>│       ├── ec_left2.js<br>│       ├── ec_right1.js<br>│       ├── ec_right2.js<br>│       ├── jquery.js<br>│       ├── word<br>│       │   ├── controller_w.js<br>│       │   ├── ecc_world.js<br>│       │   ├── ec_world.js<br>│       │   ├── vintage.js<br>│       │   └── world.js<br>│       └── worldcloud.js<br>├── templates<br>│   ├── word.html<br>│   └── index.html   # 主页面<br>└── utils.py   #工具脚本，获取MySQL数据<br></code></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><ul>
<li><p>数据获取可以从各地区卫健委获取，也可通过腾讯、百度、天行数据的免费接口或网易实时数据接口。</p>
</li>
<li><p>本文采用腾讯数据和百度的热搜数据进行存储</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">self.url1 = <span class="hljs-string">&quot;https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5&quot;</span>   <span class="hljs-comment">#实时数据</span><br>self.url2 = <span class="hljs-string">&quot;https://view.inews.qq.com/g2/getOnsInfo?name=disease_other&quot;</span>  <span class="hljs-comment">#历史数据</span><br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">self.url = <span class="hljs-string">&quot;https://voice.baidu.com/act/virussearch/virussearch?from=osari_map&amp;tab=0&amp;infomore=1&quot;</span>   <span class="hljs-comment">#百度热搜数据页面</span><br></code></pre></td></tr></table></figure>

  <figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">self.url3 = <span class="hljs-string">&quot;https://api.inews.qq.com/newsqa/v1/automation/foreign/country/ranklist&quot;</span> <span class="hljs-comment">#腾讯国外数据接口，实时。国家：182</span><br>self.url4 = <span class="hljs-string">&quot;https://voice.baidu.com/newpneumonia/get?target=trend&amp;isCaseIn=1&amp;stage=publish&quot;</span> <span class="hljs-comment">#百度国外数据接口，至前一日。国家：207</span><br></code></pre></td></tr></table></figure>


</li>
<li><p>思路：分别在spider.py中创建：Word_data、Tencent_Data 和 Badidu_Hot 类用于操作爬取数据，并将爬取到的数据预处理后存入MySQL数据库。</p>
</li>
<li><p>数据存储：创建details、history、hotsearch、word表，用于存储爬取到的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> details<br>(<br>	id <span class="hljs-type">int</span> auto_increment comment <span class="hljs-string">&#x27;主键自增长&#x27;</span><br>		<span class="hljs-keyword">primary</span> key,<br>	update_time datetime <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>	province <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;省份&#x27;</span>,<br>	city <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;城市&#x27;</span>,<br>	confirm <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;累计确诊&#x27;</span>,<br>	confirm_add <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;新增确诊&#x27;</span>,<br>	heal <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;治愈&#x27;</span>,<br>	dead <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;死亡&#x27;</span><br>)<br>comment <span class="hljs-string">&#x27;详细数据&#x27;</span>;<br></code></pre></td></tr></table></figure>

   <figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> history<br> (<br>  	ds datetime <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;日期&#x27;</span><br>  		<span class="hljs-keyword">primary</span> key,<br>  	confirm <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;累积确诊&#x27;</span>,<br>  	confirm_add <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;新增确诊&#x27;</span>,<br>  	suspect <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;疑似&#x27;</span>,<br>  	suspect_add <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;新增疑似&#x27;</span>,<br>  	heal <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;治愈&#x27;</span>,<br>  	heal_add <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;新增治愈&#x27;</span>,<br>  	dead <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;死亡&#x27;</span>,<br>  	dead_add <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;新增死亡&#x27;</span>,<br>  	importedCase <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;累计境外输入&#x27;</span>,<br>  	importedCase_add <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;新增境外输入&#x27;</span><br>)<br> comment <span class="hljs-string">&#x27;历史数据记录&#x27;</span>;<br><br></code></pre></td></tr></table></figure>

   <figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> hotsearch<br>(<br> 	id <span class="hljs-type">int</span> auto_increment,<br> 	dt datetime <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;时间&#x27;</span>,<br> 	content <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;内容&#x27;</span>,<br><span class="hljs-keyword">primary</span> key (id, dt)<br>)<br>comment <span class="hljs-string">&#x27;百度热搜数据&#x27;</span>;<br></code></pre></td></tr></table></figure>

   <figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> word<br> (<br>  	id <span class="hljs-type">int</span> auto_increment<br>  		<span class="hljs-keyword">primary</span> key,<br>  	name <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">null</span>,<br>  	update_time datetime <span class="hljs-keyword">null</span>,<br>  	confirm_add <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;新增确诊&#x27;</span>,<br>  	confirm <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;累计确诊&#x27;</span>,<br>  	heal <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;治愈&#x27;</span>,<br>  	dead <span class="hljs-type">int</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;死亡&#x27;</span><br> )<br> comment <span class="hljs-string">&#x27;世界数据&#x27;</span>;<br></code></pre></td></tr></table></figure>




</li>
</ul>
<h2 id="Web程序开发-可视化展示"><a href="#Web程序开发-可视化展示" class="headerlink" title="Web程序开发:可视化展示"></a>Web程序开发:可视化展示</h2><ul>
<li><p>通过Flask、h5和Echarts进行可视化的开发，前端页面数据获取通过Ajax进行请求，并通过js给Echarts组件赋值展示。</p>
</li>
<li><p>主界面：index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ncov<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/china.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/worldcloud.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../static/css/main.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gyroContain&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--其他信息--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>CSDN<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-symbol">&amp;nbsp;</span>|<span class="hljs-symbol">&amp;nbsp;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>世界Epidemic实时追踪<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                    数据来源 : 腾讯 &amp; 百度<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>全国Epidemic实时跟踪<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--页面低端--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;l1&quot;</span>&gt;</span>我是左1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;l2&quot;</span>&gt;</span>我是左2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;num&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;num1&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;num&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;num2&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;num&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;num3&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;num&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;num4&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;txt&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>累积确诊<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;txt&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>剩余疑似<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;txt&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>累积治愈<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;txt&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>累积死亡<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;c2&quot;</span>&gt;</span>我是中2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;r1&quot;</span>&gt;</span>我是右1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;r2&quot;</span>&gt;</span>我是右2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/ec_center.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/ec_left1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/ec_left2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/ec_right1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/ec_right2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/controller.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>
</li>
<li><p>效果展示：（若需要更好的界面，需通过css进行控制）<br><img src="https://img-blog.csdnimg.cn/2020061211292474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>word.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>nCov—word<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../static/image/icon.jpg&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../static/css/word.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/jquery.js&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/echarts.min.js&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/word/vintage.js&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/word/world.js&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/word/controller_w.js&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gyroContain&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;area&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://aiiyx.cn&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>博客<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-symbol">&amp;nbsp;</span>|<span class="hljs-symbol">&amp;nbsp;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>中国Epidemic实时追踪<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            数据来源：百度 &amp; 腾讯<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tit&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>世界Epidemic实时追踪<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tim&quot;</span>&gt;</span> 标题<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span> left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span> right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/word/ecc_world.js&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/js/word/ec_world.js&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>效果展示：<br><img src="https://img-blog.csdnimg.cn/20200612113338315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ul>
<h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p>项目部署需要一台Linux服务器，可选择Aliyun服务器或是使用Vmware 创建一台服务器均可。本文采用Vmware创建一台Ubuntu servers 18.4服务器。</p>
<blockquote>
<p>1、安装Vmware的教程网上挺多的，自行百度。</p>
<p>2、安装Ubuntu servers 18.4推荐参考：<a href="https://blog.csdn.net/tjsxin/article/details/93199595?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase">Ubuntu 18.04 LTS Server服务器安装图文教程</a></p>
<p>3、安装conda、并创建虚拟环境推荐参考：</p>
<p> <strong><a href="https://blog.csdn.net/fengleqi/article/details/80752751">Ubuntu安装conda —–01</a></strong></p>
<p><strong><a href="https://zhuanlan.zhihu.com/p/22678445">Ubuntu安装conda —–02</a></strong> </p>
<p>4、安装文件上载工具：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">安装命令：yum install lrzsz -y<br><br>使用命令：rz<br></code></pre></td></tr></table></figure>

<p>5、将项目上载至Ubuntu服务器</p>
<p>6、Ubuntu安装MySQL，并配置远程连接，创建项目所需数据库</p>
</blockquote>
<h3 id="开发者模式部署"><a href="#开发者模式部署" class="headerlink" title="开发者模式部署"></a>开发者模式部署</h3><blockquote>
<p>开发者模式部署，是正式上线前的测试部署，可以调试项目是否正常。</p>
</blockquote>
<blockquote>
<p>1、安装项目依赖库</p>
<p>2、更改db.py中的数据库连接配置</p>
<p>3、运行spider.py进行一次爬虫获取数据</p>
<p>4、运行app.py运行项目</p>
<p>5、通过Windows浏览器访问web页面</p>
</blockquote>
<h3 id="生产模式部署"><a href="#生产模式部署" class="headerlink" title="生产模式部署"></a>生产模式部署</h3><blockquote>
<p>部署Flask应用时，通常使用WSGI的应用服务器搭配Nginx作为反向代理</p>
</blockquote>
<blockquote>
<p>常用的WSGI服务器：gunicorn、uwsgi</p>
</blockquote>
<blockquote>
<p>正向和反向代理：<br><img src="https://img-blog.csdnimg.cn/20200607183645951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><blockquote>
<p>静态服务器、动态服务、反向代理、负载均衡、缓存服务 </p>
</blockquote>
<ul>
<li><p>apt安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo apt install nginx<br></code></pre></td></tr></table></figure>
</li>
<li><p>文件位置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">/usr/sbin/nginx    :主程序<br>/etc/nginx         :配置文件<br>/usr/share/nginx   :存放静态文件<br>/var/log/nginx     :存放日志<br></code></pre></td></tr></table></figure>
</li>
<li><p>nginx命令：<a href="http://www.linuxboy.net/nginxjc/143285.html">here</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">service nginx start # 启动nginx<br>service nginx reload # 重新加载nginx配置文件<br>nginx -s reopen # 重启nginx<br>nginx -s stop # 停止nginx<br>nginx -v # 查看版本号<br></code></pre></td></tr></table></figure>
</li>
<li><p>配置可参考：<a href="https://blog.csdn.net/qq_35571554/article/details/82848227?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1">here</a></p>
<blockquote>
<p>cd /etc/nginx/  ,备份nginx.conf,修改nginx.conf </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 此处开始为配置反向代理</span></span><br>       upstream mysvr &#123;<br>               server 127.0.0.1:5000; ## 服务器地址1<br>       &#125;<br>       # error_page 404 /404.html<br><br>       server  &#123;<br>               # keepalive_requests 120;<br>               listen 8080; ## nginx监听端口号<br>               server_name 192.168.121.139;   #cn.nCov.com; ## nginx监听服务器名称(本机ip或域名)<br>               location / &#123;<br>                       proxy_pass http://mysvr;<br>               &#125;<br>       &#125;<br>       ## 设置反向代理结束<br></code></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2020060718355055.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>注： 查看有关nginx的所有目录列表，输入命令  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">rpm -ql nginx<br></code></pre></td></tr></table></figure>

<p> 可以查看有关nginx目录信息，但是注意 这种命令只能是在基于yun安装的方式才可以。 </p>
</blockquote>
<p>1、安装 Gunicorn:  (python虚拟环境下)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pip install gunicorn<br></code></pre></td></tr></table></figure>

<p>2、启动 Gunicorn：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">gunicorn -b 127.0.0.1:8080 -D app:app<br></code></pre></td></tr></table></figure>

<blockquote>
<p>编写脚本执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/bash</span><br>source /Anaconda/ls/envs/env_nCov/bin/activate env_nCov #env_nCov是conda创建的虚拟环境<br>cd /home/klein/workspace/nCOV/<br>gunicorn -b 127.0.0.1:5000 -D app:app<br></code></pre></td></tr></table></figure>
<p>-w: 表示进程（worker）<br>-b: 表示绑定ip地址和端口号（bind）<br>-D: 以守护进程的形式启动，后台启动</p>
</blockquote>
<blockquote>
<p>例：gunicorn -w 2 -b 127.0.0.1:5000 运行文件名称:Flask程序实例名</p>
</blockquote>
<blockquote>
<p><a href="https://blog.csdn.net/y472360651/article/details/78538188">更多gunicorn配置链接</a></p>
</blockquote>
<blockquote>
<p>查看后台进程：ps -ef | grep gunicorn</p>
<p><a href="https://www.cnblogs.com/cutesnow/p/10609267.html">gunicorn开启、关闭和重启</a></p>
<p>查询：首先执行如下命令获取Gunicorn进程树：</p>
<p>pstree -ap|grep gunicorn</p>
<p>关闭：首先执行如下命令获取Gunicorn进程树：</p>
<p>pstree -ap|grep gunicorn</p>
<p>之后输入如下指令关闭进程：</p>
<p>kill -9 pid</p>
<p>重启：输入如下指令重启进程：</p>
<p>kill -HUP pid</p>
</blockquote>
<p>3、启动 Nginx在Windows下测试</p>
</li>
</ul>
<h4 id="定时获取数据"><a href="#定时获取数据" class="headerlink" title="定时获取数据"></a>定时获取数据</h4><ul>
<li><p>Ubuntu安装chrome：<a href="https://www.jianshu.com/p/bface5e5a71e">here</a></p>
</li>
<li><p> <strong>ubuntu三行命令安装chrome浏览器</strong> : <a href="https://yq.aliyun.com/articles/58040">https://yq.aliyun.com/articles/58040</a> </p>
</li>
<li><p>Ubuntu安装google Driver：<a href="https://blog.csdn.net/blueheart20/article/details/81566903">https://blog.csdn.net/blueheart20/article/details/81566903</a> </p>
</li>
<li><p> CENTOS7下使用SELENIUM进行网页自动化访问:<a href="http://aiiyx.cn/wz/1605/">http://aiiyx.cn/wz/1605/</a> </p>
</li>
<li><p>编写虫子脚本：</p>
<ul>
<li>up_his.sh</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>source /Anaconda/ls/envs/env_nCov/bin/activate env_nCov  #env_nCov是conda创建的虚拟环境<br>python3 /home/klein/workspace/nCOV/spider.py up_his &gt;&gt; /home/klein/workspace/nCOV/log/log_his<br><br></code></pre></td></tr></table></figure>

<ul>
<li>up_hot.sh</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>source /Anaconda/ls/envs/env_nCov/bin/activate env_nCov  #env_nCov是conda创建的虚拟环境<br>python3 /home/klein/workspace/nCOV/spider.py up_hot &gt;&gt; /home/klein/workspace/nCOV/log/log_hot<br></code></pre></td></tr></table></figure>

<ul>
<li>up_det.sh</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>source /Anaconda/ls/envs/env_nCov/bin/activate env_nCov  #env_nCov是conda创建的虚拟环境<br>python3 /home/klein/workspace/nCOV/spider.py up_det &gt;&gt; /home/klein/workspace/nCOV/log/log_det<br></code></pre></td></tr></table></figure>

<ul>
<li>up_word.sh</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>source /Anaconda/ls/envs/env_nCov/bin/activate env_nCov  #env_nCov是conda创建的虚拟环境<br>python3 /home/klein/workspace/nCOV/spider.py up_word &gt;&gt; /home/klein/workspace/nCOV/log/log_word<br><br></code></pre></td></tr></table></figure>


</li>
<li><p>使用crontab定时虫子任务: <a href="https://blog.csdn.net/m0_38109046/article/details/87918111">https://blog.csdn.net/m0_38109046/article/details/87918111</a> </p>
</li>
<li><p>输入：crontab -e</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">30 * * * * bash /home/klein/workspace/nCOV/sh/up_his.sh 2&gt;&amp;1 &amp;<br>3 */2 * * * bash /home/klein/workspace/nCOV/sh/up_hot.sh 2&gt;&amp;1 &amp;<br>*/5 * * * * bash /home/klein/workspace/nCOV/sh/up_det.sh 2&gt;&amp;1 &amp;<br>* 1,5,9,13,17,21 * * * bash /home/klein/workspace/nCOV/sh/up_word.sh 2&gt;&amp;1 &amp; <br></code></pre></td></tr></table></figure>



</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200607183741388.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="shell脚本激活conda虚拟环境"><a href="#shell脚本激活conda虚拟环境" class="headerlink" title="shell脚本激活conda虚拟环境"></a>shell脚本激活conda虚拟环境</h4><blockquote>
<p>怎么用shell脚本激活conda虚拟环境？：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>source /YOUR_CONDA_PATH/bin/activate your_env<br>python --version<br></code></pre></td></tr></table></figure>



<h4 id="从Linux服务器下载文件"><a href="#从Linux服务器下载文件" class="headerlink" title="从Linux服务器下载文件"></a>从Linux服务器下载文件</h4><ul>
<li>下载文件<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sz file<br></code></pre></td></tr></table></figure></li>
<li>上传文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">rz <br></code></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_37421762/article/details/86160119?ops_request_misc=%7B%22request_id%22:%22159142726319724846464177%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=159142726319724846464177&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-5-86160119.first_rank_v2_rank_v25&utm_term=ubuntu%E6%A0%A1%E5%87%86%E6%97%B6%E5%8C%BA">校正Ubuntu时间为北京时间</a> </p>
<h2 id="部署地址："><a href="#部署地址：" class="headerlink" title="部署地址："></a>部署地址：</h2><p><a href="http://39.99.140.59:8002/">nCov</a></p>
]]></content>
  </entry>
  <entry>
    <title>使用百度 Ai Studio GPU算力</title>
    <url>/2020/04/20/%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6%20Ai%20Studio%20GPU%E7%AE%97%E5%8A%9B/</url>
    <content><![CDATA[<p>@<a href="https://blog.csdn.net/qq_41971768/article/details/105645906">TOC</a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>继上次找到Google Colab 免费GPU之后，又发现了<a href="https://aistudio.baidu.com/aistudio/usercenter">百度AI studio</a>云平台的GPU算力。</p>
<p>百度的是相当优惠：每日使用gpu就可以获得12小时的算力卡，连续五天还可以额外获得48小时算力卡。</p>
<p>搭载的是 飞桨PaddlePaddle 框架，目前并不支持tensorflow-gpu。但是自己可以通过以下配置来使用tensorflow-gpu.</p>
</blockquote>
<blockquote>
<span id="more"></span>
</blockquote>
<h2 id="1、选择版本"><a href="#1、选择版本" class="headerlink" title="1、选择版本"></a>1、选择版本</h2><blockquote>
<p>其实AI Studio我们可以理解为一台免费的云服务器，这样我们就可以在里面配置相应的环境，就和自己本机配置tensorflow环境基本一致。</p>
</blockquote>
<blockquote>
<p> 安装之前注意自己的python版本，tensorflow版本，cuda版本，cudnn版本，一定要相互匹配 </p>
<p>可以参考以下版本：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">python 3.6<br>tensorflow 1.12.0<br>cuda 9.0<br>cudnn 7.4.1<br>Linux 16.04 (ai studio系统版本)<br></code></pre></td></tr></table></figure>

<h2 id="2、下载配置文件"><a href="#2、下载配置文件" class="headerlink" title="2、下载配置文件"></a>2、下载配置文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">1 在ai studio或者notebook下载cuda<br>!wget https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run<br> <br>2 新建一个目录~/cuda-9.0/<br> <br>3 将下载的cuda安装到上述新建的目录中<br>!sh cuda_9.0.176_linux-run --silent --toolkit --toolkitpath=$HOME/cuda-9.0<br> <br>4 下载cudnn，注意这个需要去官网注册账号，事先下载到自己的电脑然后，<br>  注意版本要对，然后通过新建数据集上传到ai studio的data/目录下，名字尽量短，下载之后是一个tgz格式   的文件，我把名字改为cudnn-9.0.tgz<br> <br>5 解压4步下载的文件到根目录,解压之后的cudnn文件名默认为cuda，<br>!tar -zxvf /home/aistudio/data/data25688/cudnn-9.0.tgz <br> <br>6 解压把cudnn的指定文件copy到cuda安装文件对应的目录中注意目录要对，这一步只需要做一次就可以<br>!cp cuda/include/cudnn.h cuda-9.0/include/<br>!cp cuda/lib64/libcudnn* cuda-9.0/lib64/<br> <br>至此准备工作完成，这些工作只需要一次就可以，接下来进行环境配置阶段<br></code></pre></td></tr></table></figure>

<h2 id="3、环境配置"><a href="#3、环境配置" class="headerlink" title="3、环境配置"></a>3、环境配置</h2><ul>
<li><p>新建虚拟环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">1 在当前目录新建一个文件命名为envm,运行一下脚本，注意文件名即可<br>!echo &#x27;export PATH=$HOME/cuda-9.0/bin:$PATH\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/cuda-9.0/lib64&#x27; &gt; ~/envm<br>(修正)：此处使用以上路径会导致无法使用 ls 命令，应在envm文件更改为以下内容：<br>export PATH=$HOME/cuda-9.0/bin$&#123;PATH:+:$&#123;PATH&#125;&#125; <br>export LD_LIBRARY_PATH=$HOME/cuda-9.0/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;<br> <br>2 在终端新建虚拟环境,这里选择与tensorflow版本匹配的python版本<br>依次,这个需要每次都重新做，我还不知道怎么把这个放到一个shell脚本中，所以只能分开了<br>conda create -n env_name python=3.6<br>安装过程选择yes输入y<br>source activate env_name<br></code></pre></td></tr></table></figure>


</li>
<li><p>激活环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"> <br>2 新建脚本命名为chmod_cuda90.sh,加入以下脚本，注意你自己的目录<br>#!/bin/bash<br>chmod a+r ~/cuda-9.0/include/cudnn.h<br>chmod a+r ~/cuda-9.0/lib64/libcudnn*<br>source ~/envm<br>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple tensorflow-gpu==1.12.0<br> <br>3 在终端进入自己的虚拟环境运行上述脚本<br>source chmod_cuda90.sh就可以使用gpu进行加速了<br></code></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="4、使用tensorflow-gpu"><a href="#4、使用tensorflow-gpu" class="headerlink" title="4、使用tensorflow-gpu"></a>4、使用tensorflow-gpu</h2><ul>
<li><p>每次重启环境只需要运行以下脚本 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">conda create -n env_name python=3.6<br>source activate env_name<br>source chmod_cuda90.sh<br></code></pre></td></tr></table></figure>



</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/firesolider/article/details/105023062?depth_1-utm_source=distribute.wap_relevant.none-task-blog-BlogCommendFromBaidu-8&utm_source=distribute.wap_relevant.none-task-blog-BlogCommendFromBaidu-8">百度AI studio配置tensorflow环境</a><br><a href="https://blog.csdn.net/qq_36666756/article/details/105252530#comments">白嫖百度AIstudio免费GPU</a></p>
]]></content>
  </entry>
  <entry>
    <title>Google Colab 免费GPU算力</title>
    <url>/2020/04/20/%E4%BD%BF%E7%94%A8Google%20Colab%20%E5%85%8D%E8%B4%B9GPU/</url>
    <content><![CDATA[<p>﻿@<a href="https://blog.csdn.net/qq_41971768/article/details/105639794">TOC</a></p>
<h1 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h1><blockquote>
<p>最近在做一些需要GPU算力的项目，自己的电脑的算力不够用。找到了 <a href="https://research.google.com/colaboratory/unregistered.html">Google Colab（Colaboratory）</a> ，作为Google推出的免费的云端GPU服务。</p>
<p>官方对其的说明是：</p>
<blockquote>
<p>Colaboratory 是一个研究项目，可免费使用。</p>
</blockquote>
</blockquote>
<blockquote>
<span id="more"></span>
</blockquote>
<h1 id="2、Google-Colab特征"><a href="#2、Google-Colab特征" class="headerlink" title="2、Google Colab特征"></a>2、Google Colab特征</h1><ul>
<li>Colaboratory 是一个 Google 研究项目，旨在帮助传播机器学习培训和研究成果。它是一个 Jupyter 笔记本环境，不需要进行任何设置(自带大部分python库)就可以使用，并且完全在云端运行。</li>
<li>Colaboratory 笔记本存储在 Google 云端硬盘中，并且可以共享，就如同您使用 Google 文档或表格一样。Colaboratory 可免费使用。</li>
<li>利用Colaboratory ，可以方便的使用Keras、TensorFlow、PyTorch等框架进行深度学习应用的开发。</li>
</ul>
<h1 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h1><blockquote>
<p>注意：使用google服务可能需要梯子</p>
</blockquote>
<h2 id="3-1在谷歌云盘上创建文件夹"><a href="#3-1在谷歌云盘上创建文件夹" class="headerlink" title="3.1在谷歌云盘上创建文件夹"></a>3.1在谷歌云盘上创建文件夹</h2><p>当登录账号进 入<a href="https://drive.google.com/drive/my-drive">谷歌云盘</a>时 ，系统会给予15G免费空间大小。由于Colab需要依靠谷歌云盘，故需要在云盘上新建一个文件夹。</p>
<p>选择新建文件夹，文件夹名称可自定义。</p>
<h2 id="3-2创建Colaboratory"><a href="#3-2创建Colaboratory" class="headerlink" title="3.2创建Colaboratory"></a>3.2创建Colaboratory</h2><p>进入创建好的文件夹，点开我的云盘-更多。<br><img src="https://img-blog.csdnimg.cn/20200420172221824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>如果在更多栏里没有发现Colaboratory，选择关联更多应用，搜索Colaboratory，选择关联。</p>
<h2 id="3-3创建完成"><a href="#3-3创建完成" class="headerlink" title="3.3创建完成"></a>3.3创建完成</h2><p>创建完成后，会自动生成一个jupyter笔记本</p>
<h1 id="4、设置GPU运行"><a href="#4、设置GPU运行" class="headerlink" title="4、设置GPU运行"></a>4、设置GPU运行</h1><ul>
<li>选择 修改-笔记本设置<br><img src="https://img-blog.csdnimg.cn/20200420172504794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>将硬件加速器设置为GPU即可</li>
</ul>
<h1 id="5、运行-py文件"><a href="#5、运行-py文件" class="headerlink" title="5、运行.py文件"></a>5、运行.py文件</h1><h2 id="5-1安装必要库"><a href="#5-1安装必要库" class="headerlink" title="5.1安装必要库"></a>5.1安装必要库</h2><p>输入相应代码，并执行（crtl+F9）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">!apt-get install -y -qq software-properties-common python-software-properties module-init-tools<br>!add-apt-repository -y ppa:alessandro-strada/ppa 2&gt;&amp;1 &gt; /dev/null<br>!apt-get update -qq 2&gt;&amp;1 &gt; /dev/null<br>!apt-get -y install -qq google-drive-ocamlfuse fuse<br>from google.colab import auth<br>auth.authenticate_user()<br>from oauth2client.client import GoogleCredentials<br>creds = GoogleCredentials.get_application_default()<br>import getpass<br>!google-drive-ocamlfuse -headless -id=&#123;creds.client_id&#125; -secret=&#123;creds.client_secret&#125; &lt; /dev/null 2&gt;&amp;1 | grep URL<br>vcode = getpass.getpass()<br>!echo &#123;vcode&#125; | google-drive-ocamlfuse -headless -id=&#123;creds.client_id&#125; -secret=&#123;creds.client_secret&#125;<br><br></code></pre></td></tr></table></figure>



<blockquote>
<p>运行后，先点开相应的链接，选择自己的谷歌账号，并允许，最后会得到相应的代码，输入相应的框中即可</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200420172555986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="5-2-挂载云端硬盘"><a href="#5-2-挂载云端硬盘" class="headerlink" title="5.2 挂载云端硬盘"></a>5.2 挂载云端硬盘</h2><p>同上，输入下面命令，执行即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">!mkdir -p drive<br>!google-drive-ocamlfuse drive  -o nonempty<br></code></pre></td></tr></table></figure>



<h2 id="5-3-安装Keras"><a href="#5-3-安装Keras" class="headerlink" title="5.3 安装Keras"></a>5.3 安装Keras</h2><p>同理，输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">!pip install -q keras<br></code></pre></td></tr></table></figure>



<h1 id="6、训练自己的代码"><a href="#6、训练自己的代码" class="headerlink" title="6、训练自己的代码"></a>6、训练自己的代码</h1><h3 id="6-1上传项目代码到Google-云盘"><a href="#6-1上传项目代码到Google-云盘" class="headerlink" title="6.1上传项目代码到Google 云盘"></a>6.1上传项目代码到Google 云盘</h3><h3 id="6-2-将云盘代码拷贝至分配的虚拟目录"><a href="#6-2-将云盘代码拷贝至分配的虚拟目录" class="headerlink" title="6.2 将云盘代码拷贝至分配的虚拟目录"></a>6.2 将云盘代码拷贝至分配的虚拟目录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">!cp -r dir1 dir2  #将目录dir1 拷贝至 目录dir2下<br></code></pre></td></tr></table></figure>

<h3 id="6-3-使用python命令运行py脚本"><a href="#6-3-使用python命令运行py脚本" class="headerlink" title="6.3 使用python命令运行py脚本"></a>6.3 使用python命令运行py脚本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">!python main.py<br></code></pre></td></tr></table></figure>

<h3 id="6-4-注意事项"><a href="#6-4-注意事项" class="headerlink" title="6.4 注意事项"></a>6.4 注意事项</h3><ul>
<li>Google 训练自己的代码，需要修改代码中有关路径的部分为绝对路径</li>
<li>Google训练过程中不可关闭网页，不然会断开连接导致训练中断</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://medium.com/deep-learning-turkey/google-colab-free-gpu-tutorial-e113627b9f5d">https://medium.com/deep-learning-turkey/google-colab-free-gpu-tutorial-e113627b9f5d</a></p>
<p><a href="https://blog.csdn.net/cocoaqin/article/details/79184540?depth_1-utm_source=distribute.wap_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1&utm_source=distribute.wap_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1#51%E5%AE%89%E8%A3%85%E5%BF%85%E8%A6%81%E5%BA%93">Google Colab 免费GPU服务器使用教程</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<a id="more"></a>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Java 基础</title>
    <url>/2020/01/14/Java%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="1、Java-基础"><a href="#1、Java-基础" class="headerlink" title="1、Java 基础"></a>1、Java 基础</h2><ul>
<li><p>Java 的三大特性：封装、继承、多态</p>
</li>
<li><p>Java 语言的特点：平台无关性、面向对象、简单实用、多线程、安全可靠等</p>
</li>
<li><p>Java 的基本数据类型：<code>byte、short、int、double、float、long、boolean、char</code></p>
</li>
<li><p><code>==</code> 与 <code>equals</code> 的区别？</p>
<ul>
<li>== 比较的是两个对象的内存地址是否相同</li>
<li>equals 对于基本数据类型比较的是内存地址，对于复杂数据类型比较的是值。</li>
</ul>
</li>
<li><p><strong>Java 中的 <code>Math.round(-1.5)</code> 等于多少？</strong></p>
<ul>
<li>答：<code>-1</code>  。<code>round()</code> 是在原数值的基础上加 0.5 ；向下取整。</li>
</ul>
</li>
<li><p>String 属于基础的数据类型吗？</p>
<ul>
<li>答： 不属于。 String 内部是<code>final</code> 修饰的字符数组。</li>
</ul>
</li>
<li><p>Java 中操作字符串都有那些类？有什么区别？</p>
<ul>
<li>答： <code>String、StringBuffer、StringBuilder</code> ; <ul>
<li>三者都是使用final修饰的类，不能被继承。</li>
<li>String中的字符数组使用final修饰，线程安全；<code>StringBuffer</code>中的方法使用<code>synchronized</code>修饰，线程安全；<code>StringBuilder</code> 线程不安全。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>普通类和抽象类有什么区别？</strong></p>
<ul>
<li>修饰符：抽象类使用abstract修饰</li>
<li>抽象方法：抽象类可以包含抽象方法，普通类不能有抽象方法。</li>
<li>实例化：抽象类不能直接实例化</li>
</ul>
</li>
<li><p><strong>什么是抽象方法？</strong></p>
<ul>
<li>抽象方法必须写在抽象类中，抽象方法的方法名使用<code>abstract</code>修饰，没有方法体。</li>
</ul>
</li>
<li><p><strong>抽象类和接口对比？</strong></p>
<ul>
<li>类名修饰符：abstract、interface</li>
<li>是否实例化：都不可以实例化</li>
<li>继承性：（类）单继承，（接口）多实现</li>
<li>构造器和方法：抽象类可以有构造器、抽线和非抽象方法；接口只能有抽象方法。</li>
</ul>
</li>
<li><p>抽象类可以用final修饰吗？     </p>
<ul>
<li>不可以</li>
</ul>
</li>
<li><p><strong>重写与重载</strong></p>
<ul>
<li>重写：发生在子类继承父类。重写父类的方法体。</li>
<li>重载：发生在同一类中。方法名相同，参数列表不同，与返回值无关。</li>
</ul>
</li>
<li><p><code>String s=new String(&quot;ab&quot;);</code>创建了几个对象？</p>
<ul>
<li>创建了两个对象。常量池中创建“ab”，堆或栈中创建字符串对象“ab”。</li>
</ul>
</li>
<li><p><strong>深拷贝 和 浅拷贝</strong></p>
<ul>
<li><strong>浅拷贝</strong>：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。（<strong>Java方法的参数都是浅拷贝</strong>）</li>
<li><strong>深拷贝</strong>：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>图书查询系统</title>
    <url>/2019/03/21/%E5%9B%BE%E4%B9%A6%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>@<a href="https://blog.csdn.net/qq_41971768/article/details/88713826">TOC</a></p>
<h2 id="1、数据结构课程设计"><a href="#1、数据结构课程设计" class="headerlink" title="1、数据结构课程设计"></a>1、数据结构课程设计</h2><p><img src="https://img-blog.csdnimg.cn/20190321191903232.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2、题目要求"><a href="#2、题目要求" class="headerlink" title="2、题目要求"></a>2、题目要求</h2><p><img src="https://img-blog.csdnimg.cn/20190321191311187.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<span id="more"></span>

<h2 id="3、需求分析"><a href="#3、需求分析" class="headerlink" title="3、需求分析"></a>3、需求分析</h2><p><img src="https://img-blog.csdnimg.cn/20190321191323697.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="4、系统设计"><a href="#4、系统设计" class="headerlink" title="4、系统设计"></a>4、系统设计</h2><p><img src="https://img-blog.csdnimg.cn/20190321191335281.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="5、功能设计"><a href="#5、功能设计" class="headerlink" title="5、功能设计"></a>5、功能设计</h2><p><img src="https://img-blog.csdnimg.cn/20190321191345455.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="6、排序算法"><a href="#6、排序算法" class="headerlink" title="6、排序算法"></a>6、排序算法</h2><p><img src="https://img-blog.csdnimg.cn/20190321200528328.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019032119144615.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="7、String比较方法"><a href="#7、String比较方法" class="headerlink" title="7、String比较方法"></a>7、String比较方法</h2><p><img src="https://img-blog.csdnimg.cn/20190321191458396.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="8、字典排序"><a href="#8、字典排序" class="headerlink" title="8、字典排序"></a>8、字典排序</h2><p><img src="https://img-blog.csdnimg.cn/20190321191508174.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="9、查找算法"><a href="#9、查找算法" class="headerlink" title="9、查找算法"></a>9、查找算法</h2><p><img src="https://img-blog.csdnimg.cn/20190321191516933.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190321191526847.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="10、IO流设计"><a href="#10、IO流设计" class="headerlink" title="10、IO流设计"></a>10、IO流设计</h2><p><img src="https://img-blog.csdnimg.cn/2019032119153711.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="11、存储结构"><a href="#11、存储结构" class="headerlink" title="11、存储结构"></a>11、存储结构</h2><p><img src="https://img-blog.csdnimg.cn/20190321191547185.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="12、类设计"><a href="#12、类设计" class="headerlink" title="12、类设计"></a>12、类设计</h2><p><img src="https://img-blog.csdnimg.cn/20190321191558641.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="13、类成员"><a href="#13、类成员" class="headerlink" title="13、类成员"></a>13、类成员</h2><p><img src="https://img-blog.csdnimg.cn/20190321191613567.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="14、结束"><a href="#14、结束" class="headerlink" title="14、结束"></a>14、结束</h2><p><img src="https://img-blog.csdnimg.cn/20190321191625111.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTcxNzY4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="15、源代码"><a href="#15、源代码" class="headerlink" title="15、源代码"></a>15、源代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Book.java<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"> import java.io.*;<br> import java.util.*;<br>public class Book implements Serializable&#123;  //使用Serializable接口，使Book对象序列化，便于使用对象流存入文件。<br><br>	String[] attribute;<br>	static int amount;<br>    Scanner re=new Scanner(System.in);<br>    /*<br>     *主属性（primary attribute）：征订号<br>     *主码（primary key）：征订号<br>     *<br>     *<br>     ***属性****   **编号**<br>     *本季征订号      0	<br>     *分册	          1<br>     *出版社          2<br>     *ISBN			  3<br>     *书名			  4<br>     *著作者		  5<br>     *适用分级		  6<br>     *价格			  7<br>     *出版年月		  8<br>     *社内分类	      9<br>     *中图法分类	  10<br>     *学科分类编码	  11<br>     *学科分类1		  12<br>     *学科分类2		  13<br>     *<br>     */<br>	public void setAttribute(int i)&#123;<br>		this.attribute[i]=re.next();<br>	&#125;<br>	<br>	public String getAttribute(int i)&#123;<br>		return this.attribute[i];<br>	&#125;<br>   	public Book()   &#123;  //无参构造方法<br>   <br>   	&#125;<br>   	public Book(String[] s)&#123;<br>   		this.attribute=new String[this.amount];       //初始化该数组；长度为表头属性个数<br>   		for(int i=0;i&lt;s.length;i++)&#123;<br>   			this.attribute[i]=s[i];                   //为该图书各个属性赋值<br>   		&#125;<br>   	&#125;<br>   	public void ruleToString()&#123;<br>   		System.out.println(&quot;\t       ***属性****    **属性值**\n&quot;);<br> 		System.out.println(&quot;\t       *本季征订号     &quot;+this.attribute[0]);<br> 		System.out.println(&quot;\t       *分册           &quot;+this.attribute[1]);<br> 		System.out.println(&quot;\t       *出版社         &quot;+this.attribute[2]);<br> 		System.out.println(&quot;\t       *ISBN           &quot;+this.attribute[3]);<br> 		System.out.println(&quot;\t       *书名           &quot;+this.attribute[4]);<br> 		System.out.println(&quot;\t       *著作者         &quot;+this.attribute[5]);<br> 		System.out.println(&quot;\t       *适用分级       &quot;+this.attribute[6]);<br> 		System.out.println(&quot;\t       *价格           &quot;+this.attribute[7]); 		<br> 		System.out.println(&quot;\t       *出版年月       &quot;+this.attribute[8]);<br> 		System.out.println(&quot;\t       *社内分类       &quot;+this.attribute[9]);<br> 		System.out.println(&quot;\t       *中图法分类     &quot;+this.attribute[10]);<br> 		System.out.println(&quot;\t       *学科分类编码   &quot;+this.attribute[11]);<br> 		System.out.println(&quot;\t       *学科分类1      &quot;+this.attribute[12]);<br> 		System.out.println(&quot;\t       *学科分类2      &quot;+this.attribute[13]);<br> 		System.out.println(&quot;\t-----------------------------&quot;);<br><br>   	&#125;<br>    public String toString()&#123;                         //重写toString()方法<br> 			String str=attribute[0];<br> 			for(int j=1;j&lt;attribute.length;j++)&#123;<br> 				str=str.concat(&quot;,&quot;);<br> 				str=str.concat(attribute[j]);        //将指定字符串连接到此字符串的结尾。<br> 			&#125;<br>    	return str;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Lirary.java<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"> import java.io.*;<br> import java.util.*;<br>public class Library&#123;<br>	Book []books;   			//创建图书数组对象<br>	int amount;     			//存入图书的种类数<br>	String f_Path;              //当前图书库源文件路径<br>	String f_Name;				//当前图书库源文件名称<br>	NormalComparator NC=new NormalComparator();<br>    Scanner re=new Scanner(System.in);<br>	Library() &#123;<br>		books = new Book[1000];  //定义图书数组长度为1000<br>		this.amount=0;<br>	&#125;<br>//求长度	<br>    public int length()&#123;<br>    	return this.amount;<br>    &#125;<br>//堆排序  ：表头不参与排序<br>    //将以low为根的子树调整成大顶堆，low、high是序列下界和上界<br>    public void sift(int low, int high,int w) &#123;<br>        int i = low;                            //子树的根<br>        int j = 2 * i ;                         //j为i结点的左孩子<br>        Book temp = books[i];<br>        while (j&lt;high) &#123;  				    	//沿较小值孩子结点向下筛选<br>            if (j&lt;high-1 &amp;&amp; (NC.compare(books[j].attribute[w],books[j + 1].attribute[w]))&lt;=0) &#123; //有右孩子<br>                j++; 							//数组元素比较,j为左右孩子的较大者<br>            &#125;<br>            if (NC.compare(temp.attribute[w],books[j].attribute[w]) &lt;= 0) &#123; //若父母结点值较小<br>                books[i] = books[j];            //孩子结点中的较大值上移<br>                i = j;<br>                j = 2 * i ;<br>            &#125; else &#123;<br>                j = high + 1;         			//退出循环<br>            &#125;<br>        &#125;<br>        books[i] = temp;                   		//当前子树的原根值调整后的位置<br>    &#125;<br>    <br>    public void heapSort(int w) &#123;               // w 为关键字属性对应编号<br>        int n = this.amount;                    //元素数<br>        Book temp;<br>        for (int i = n/2;i&gt;0;i--) &#123;             //创建堆<br>            sift(i, n, w);<br>        &#125;<br>        for (int i=n-1; i&gt;1;i--) &#123;              //每趟将最大值交换到后面，再调整成堆<br>            temp = books[1];<br>            books[1] = books[i];<br>            books[i] = temp;<br>            sift(1, i, w);<br>        &#125;<br>   &#125;<br>   <br>       <br>//添加图书<br>	public void addBook(Book a_book) &#123;  //添加图书<br>    	if(amount==books.length)&#123;<br>    		Book[] B = books;<br>    		books = new Book[amount+500];	//扩大可存储书目数量，每次扩容500<br>    		for(int j=0;j&lt;B.length;j++)&#123;<br>    			books[j]=B[j];<br>    		&#125;<br>    	&#125;<br>     	books[amount]=a_book;<br>     	amount++;<br>	&#125;<br>	<br>	<br>	<br>//删除图书<br>	public void del_Book(int i)&#123;<br>		if(i&gt;0&amp;&amp;i&lt;this.amount)&#123;<br>			this.books[i].toString();<br>			this.books[i]=this.books[--this.amount];<br>		&#125;<br>		else<br>			System.out.println(&quot;使用了非法索引！&quot;);<br>	&#125;<br>	<br>	<br>//修改图书<br>	public void alter_Book(int i,int w)&#123;       //修改books[i]图书的第w个属性值<br>		if(i&gt;0&amp;&amp;i&lt;this.amount)&#123;<br>			this.books[i].attribute[w]=re.next();<br>		&#125;<br>		else<br>			System.out.println(&quot;使用了非法索引！&quot;);<br>	&#125;	<br>//查找图书（完整关键字查找） ：表头不参与查找<br>	/*<br>	 *先排序  查找所在位置<br>	 *有序记录下的，折半查找：精确查找需要输入完整的属性值<br>	 */<br>  	public int binarySearch(String key,int w)&#123;<br> 		if(length()&gt;0)&#123;<br> 			int low=1,high=length()-1;<br> 			while(low&lt;=high)&#123;<br> 				int n=(low+high)/2;<br> 				if((NC.compare(books[n].attribute[w],key))==0)<br> 					return n;<br> 				else if((NC.compare(books[n].attribute[w],key))&gt;0)   //关键字值小于中间值<br> 					high=n-1;<br> 				else<br> 					low=n+1;		<br> 			&#125;<br> 		&#125;<br> 		return -1;         //查找不成功<br> 	&#125;<br> 	//递归形式<br> 	public int binarySearch(int low,int high,String key,int w)&#123;<br>  		while(low&lt;=high)&#123;<br> 			int n=(low+high)/2;<br> 			if((NC.compare(books[n].attribute[w],key))==0)<br> 				return n;<br> 			else if((NC.compare(books[n].attribute[w],key))&gt;0)<br> 				return binarySearch(low,n-1,key,w);<br> 			else<br> 				return binarySearch(n+1,high,key,w);<br> 		&#125;<br> 		return -1;         //查找不成功<br> 	&#125;<br> 	<br> 	  <br>//查找图书（部分关键字查找）  ：表头不参与<br>	 <br>	 //顺序查找   ：返回位置<br>	 public int seqSearch(String key,int w)&#123;<br>	 	int i=0,n=length();<br>	 	while((books[n].attribute[w].indexOf(key))==-1)&#123;<br>	 		i++;<br>	 	&#125;<br>	 	if(i&lt;n)  return i;<br>	 	else    return -1;<br>	 &#125;<br>	 <br>	 <br>	 //顺序查找所有     ：返回一个Lirary类型<br>	 public Library seqAllSearch(String key,int w)&#123;<br>	 	Library lib=new Library();<br>	 	lib.addBook(this.books[0]);      //将表头插入<br>	 	int i=0,n=length();<br>	 	while(i&lt;n)&#123;<br>		 	if((books[i].attribute[w].indexOf(key))!=-1)&#123;<br>		 		lib.addBook(this.books[i]);<br>		 	&#125;<br>			i++;<br>	 	&#125;<br>	 	return lib;<br>	 &#125;<br>	 <br>	 <br>//保存到源文件 	   <br>    public void save_File()&#123;<br>	    try&#123;<br>	    	Object_io io=new Object_io();<br>	    	io.object_io_out(this,new File(this.f_Path.concat(this.f_Name)));<br>	      &#125;<br>	    catch(Exception e)&#123;<br>	    	System.out.print(e);<br>	    &#125;<br>    &#125;<br>//另存为新文件    <br>    public void save_As_File(Library lib,String str)&#123;<br>	    try&#123;	<br>	    	Object_io io=new Object_io();<br>	    	str=str.concat(&quot;.csv&quot;);<br>	    	str=lib.f_Path.concat(str);<br>	    	io.object_io_out(lib,new File(str));<br>	      &#125;<br>	    catch(Exception e)&#123;<br>	    	System.out.print(e);<br>	    &#125;	<br>    &#125;<br><br>&#125;<br> <br><br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Menu.java<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"> import java.io.*;<br> import java.util.*;<br>public class Menu&#123;<br>    Scanner re=new Scanner(System.in);<br>	Library lib;<br>	boolean label;<br>	<br>	public Menu(Library lib)&#123;<br>		this.lib=lib;<br>		this.label=true;<br>		while(this.label)&#123;<br>			this.first_Meun();<br>		&#125;<br>	&#125;<br><br>//主菜单<br>	public void first_Meun()&#123;<br>		System.out.println(&quot;\t==============================&quot;);<br> 		System.out.println(&quot;\t---------[ 主菜单 ]-----------&quot;);<br> 		System.out.println(&quot;\t[1]  插入图书：&quot;);<br> 		System.out.println(&quot;\t[2]  删除图书：&quot;);<br> 		System.out.println(&quot;\t[3]  修改图书：&quot;);<br> 		System.out.println(&quot;\t[4]  查询图书：&quot;);<br> 		System.out.println(&quot;\t[5]  排序图书：&quot;);<br> 		System.out.println(&quot;\t[6]  保存至源文件：&quot;);<br> 		System.out.println(&quot;\t[7]  另存为新文件：&quot;);<br> 		System.out.println(&quot;\t[0]  退出系统：&quot;);<br> 		System.out.println(&quot;\t-----------------------------&quot;);<br> 		System.out.print(&quot;\t请输入选项编号：&quot;);<br> 		int ser=re.nextInt();<br> 		switch(ser)&#123;<br> 			case 1:this.insert_Book();break;<br> 			case 2:this.del_Book();break;<br> 			case 3:this.amend_Book();break;<br> 			case 4:this.search_Menu();break;<br> 			case 5:this.sort();break;<br> 			case 6:this.lib.save_File();break;<br> 			case 7:System.out.print(&quot;请输入新的文件名：&quot;);<br> 					String str=re.next();<br> 					this.lib.save_As_File(this.lib,str);<br> 					break;<br> 			case 0:	System.out.println(&quot;请选择：[1]保存并退出；[2]直接退出；[3]取消退出&quot;);<br> 					int xu=re.nextInt();<br> 					if(xu==1) &#123;  this.lib.save_File();this.label=false;break;	&#125;<br> 					if(xu==2) &#123;  this.label=false;break;	&#125;<br> 					if(xu==3) &#123;  break;	&#125;<br> 					else  break;<br>            default:System.out.println(&quot;\t----无此选项!------&quot;);break;<br> 		&#125;			<br>	&#125;<br>//查找子菜单<br>	public void search_Menu()&#123;<br>		System.out.println(&quot;\t==============================&quot;);<br> 		System.out.println(&quot;\t----------[ 查找 ]------------&quot;);<br> 		System.out.println(&quot;\t[1]  精确查找：&quot;);<br> 		System.out.println(&quot;\t[2]  模糊查找：&quot;);<br> 		System.out.println(&quot;\t-----------------------------&quot;);<br> 		System.out.print(&quot;\t请输入选项编号：&quot;);<br> 		int ser=re.nextInt();<br> 		this.attribute_Meun();<br> 		switch(ser)&#123;<br> 			case 1:this.search_True();break;<br> 			case 2:this.search_Flase();break;<br>            default:System.out.println(&quot;\t----无此选项!------&quot;);break;<br> 		&#125;<br>	&#125;<br>//属性菜单	<br>	public void attribute_Meun()&#123;<br>		System.out.println(&quot;\t==============================&quot;);<br> 		System.out.println(&quot;\t-----[ attribute_Meun ]-------&quot;);<br> 		System.out.println(&quot;\t       ***属性****   **编号**\n&quot;);<br> 		System.out.println(&quot;\t       *本季征订号      0&quot;);<br> 		System.out.println(&quot;\t       *分册            1&quot;);<br> 		System.out.println(&quot;\t       *出版社          2&quot;);<br> 		System.out.println(&quot;\t       *ISBN            3&quot;);<br> 		System.out.println(&quot;\t       *书名            4&quot;);<br> 		System.out.println(&quot;\t       *著作者          5&quot;);<br> 		System.out.println(&quot;\t       *适用分级        6&quot;);<br> 		System.out.println(&quot;\t       *价格            7&quot;); 		<br> 		System.out.println(&quot;\t       *出版年月        8&quot;);<br> 		System.out.println(&quot;\t       *社内分类        9&quot;);<br> 		System.out.println(&quot;\t       *中图法分类      10&quot;);<br> 		System.out.println(&quot;\t       *学科分类编码    11&quot;);<br> 		System.out.println(&quot;\t       *学科分类1       12&quot;);<br> 		System.out.println(&quot;\t       *学科分类2       13&quot;);<br> 		System.out.println(&quot;\t-----------------------------&quot;);<br>	&#125;<br>//插入图书<br>	public void insert_Book()&#123;<br>		String []str=new String[this.lib.books[0].attribute.length];<br>		this.attribute_Meun();<br>		System.out.println(&quot;请依次输入对应的属性值：&quot;);<br>		for(int i=0;i&lt;str.length;i++)&#123;<br>			str[i]=re.next();<br>		&#125;<br>		Book book=new Book(str);<br>		this.lib.addBook(book);<br>	&#125;<br>//删除<br>	public void del_Book()&#123;<br>		System.out.println(&quot;请输入要删除图书所在的位置：&quot;);<br>		int i=re.nextInt();<br>		this.lib.books[i].ruleToString();<br>		this.lib.del_Book(i);<br>		System.out.println(&quot;已删除！&quot;);<br>	&#125;<br>//修改<br>	public void amend_Book()&#123;<br>		System.out.println(&quot;请输入要修改图书所在的位置：&quot;);<br>		int i=re.nextInt();<br>		int p=1;;<br>		System.out.println(this.lib.books[i].toString());<br>		this.attribute_Meun();<br>		while(p&gt;=0&amp;&amp;p&lt;this.lib.books[i].amount)&#123;<br>			System.out.println(&quot;请输入要修改的属性，对应的编号;输入-1 退出修改:&quot;);<br>			p=re.nextInt();<br>			if(p!=-1)&#123;<br>				System.out.println(&quot;请输入修改后的值：&quot;);<br>				this.lib.books[i].attribute[p]=re.next();<br>			&#125;<br>		&#125;<br>		System.out.println(&quot;已修改为：&quot;);<br>		this.lib.books[i].ruleToString();<br>	&#125;<br>//查询<br>	//精确<br>	public void search_True()&#123;<br>		System.out.println(&quot;请输入要查询的属性编号：&quot;);<br>		int w=re.nextInt();<br>		System.out.println(&quot;请输入要查询的属性值：&quot;);<br>		String str=re.next();<br>		this.lib.heapSort(w);<br>		Library we=new Library();                  //查询结果保存到临时图书库<br>		we.f_Path=this.lib.f_Path;                 //设置默认路径<br>		we.addBook(this.lib.books[0]);             //将表头添加进去<br>		NormalComparator NC=new NormalComparator();<br>	    int mark=this.lib.binarySearch(str,w);<br>	    int high=mark++,low=mark--;<br>		if(mark==-1)&#123;<br>			System.out.println(&quot;未找到&quot;);<br>		&#125;<br>		else&#123;<br>			we.addBook(this.lib.books[mark]);<br>			while(low&gt;0&amp;&amp;(NC.compare(this.lib.books[low].attribute[w],str))==0)<br>				we.addBook(this.lib.books[low--]);<br>			while(high&lt;this.lib.amount&amp;&amp;(NC.compare(this.lib.books[high].attribute[w],str))==0)<br>				we.addBook(this.lib.books[high++]);<br>		&#125;<br>		str=str.concat(&quot;_&quot;.concat(Integer.toString(we.amount)));<br>		str=&quot;查找结果_&quot;.concat(str);<br>		lib.save_As_File(we,str);<br>		System.out.println(&quot;查询结果，已保存到文件；文件名为：&quot;+str);<br>	&#125;<br>	//模糊<br>	public void search_Flase()&#123;<br>		System.out.println(&quot;请输入要查询的属性编号：&quot;);<br>		int w=re.nextInt();<br>		System.out.println(&quot;请输入要查询的属性值：&quot;);<br>		String str=re.next();<br>		Library we=this.lib.seqAllSearch(str,w);<br>		we.f_Path=this.lib.f_Path;<br>		str=str.concat(&quot;_&quot;.concat(Integer.toString(we.amount)));<br>		str=&quot;查找结果_&quot;.concat(str);<br>		lib.save_As_File(we,str);<br>		System.out.println(&quot;查询结果，已保存到文件；文件名为：&quot;+str);<br>	&#125;<br>//排序<br>	public void sort()&#123;<br>		this.attribute_Meun();<br>		System.out.println(&quot;请输入作为排序条件的属性编号：&quot;);<br>		int w=re.nextInt();<br>		this.lib.heapSort(w);<br>		String str=this.lib.books[0].attribute[w];<br>		str=str.concat(&quot;_&quot;.concat(Integer.toString(this.lib.amount)));<br>		str=&quot;排序结果_&quot;.concat(str);<br>		this.lib.save_As_File(this.lib,str);<br>		System.out.println(&quot;查询结果，已保存到文件；文件名为：&quot;+str);<br>	&#125;<br>	<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Object_io.java<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"> import java.io.*;<br>public class Object_io //对象流类<br> &#123;<br> 	int DB_Limit=-1;      //测试所用数据量<br> 	void object_io_out(Library lib,File file) throws Exception   //向文件写入<br> 	&#123;<br> 		FileWriter outOne = new FileWriter(file);<br> 		BufferedWriter outTwo=new BufferedWriter(outOne);<br> 		for(int i=0;i&lt;lib.amount;i++)&#123;<br> 			String[] s=lib.books[i].attribute;<br> 			int j=0;<br> 			String str=s[j++];<br> 			for(;j&lt;s.length;j++)&#123;<br> 				str=str.concat(&quot;,&quot;);<br> 				str=str.concat(s[j]);    //将指定字符串连接到此字符串的结尾。<br> 			&#125;<br> 			outTwo.write(str);           //写入一行<br> 			outTwo.newLine();            //写入换行<br> 		&#125;<br> 		outTwo.close();<br> 		outOne.close();<br> 	&#125;<br> 	void object_io_in(Library lib,File file) throws Exception   //从文件读出<br> 	&#123;<br> 		FileReader inOne = new FileReader(file);<br> 		BufferedReader inTwo=new BufferedReader(inOne);<br> 		String strLine = null;<br> 		int x=0;                                        		//读出的数据条数<br> 		while((strLine = inTwo.readLine())!=null)        		//逐行读取<br> 		&#123;<br> 			String item[]=strLine.split(&quot;,&quot;,14);         		//分离每行数据,根据给定正则表达式的匹配拆分此字符串。<br> 			if(x==0)   Book.amount=item.length;                  //将表头属性数量存入<br> 			if(item.length==14)&#123;<br>	 			Book book=new Book(item);<br>	 			lib.addBook(book);<br> 				x++;<br> 			&#125;<br> 			if(this.DB_Limit!=-1&amp;&amp;x&gt;this.DB_Limit)  			//判断是否存在数据上限要求<br>	 			 break;<br> 		&#125;<br> 		System.out.println(&quot;读取到的数据为&quot;+x+&quot;条;（包括表头）&quot;);<br> 		inOne.close();<br> 		inTwo.close();<br>  	&#125;<br> &#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">NormalComparator.java<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">import java.util.Comparator;<br><br>/*<br> *Collator 类执行区分语言环境的 String 比较。使用此类可为自然语言文本构建搜索和排序例程。 <br> *Collator 是一个抽象基类。其子类实现具体的整理策略。<br> *Java 平台目前提供了 RuleBasedCollator 子类，它适用于很多种语言。<br> *还可以创建其他子类，以处理更多的专门需要。 <br> *与其他区分语言环境的类一样，可以使用静态工厂方法 getInstance 来为给定的语言环境获得适当的 Collator 对象。<br> *如果需要理解特定整理策略的细节或者需要修改策略，只需查看 Collator 的子类即可。 <br> *下面的示例显示了如何使用针对默认语言环境的 Collator 比较两个字符串。<br> *<br> *<br> */<br>import java.text.RuleBasedCollator;<br>import java.text.Collator;<br>import java.util.Locale;<br>public class NormalComparator implements Comparator&lt;Object&gt; &#123;    <br>	/*<br>	 *RuleBasedCollator 为 Collator 的子类<br>	 */<br>  <br>    RuleBasedCollator collator = (RuleBasedCollator)Collator.getInstance(Locale.CHINA);//public static final Locale CHINA 指定中国的语言环境<br>    <br>    /*<br>     *比较用来排序的两个参数。根据第一个参数小于、等于或大于第二个参数分别返回负整数、零或正整数。<br>     */<br>    public int compare(Object o1, Object o2) &#123;<br>    return collator.compare(o1.toString(), o2.toString());<br><br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Date_s.java<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">import java.util.Date;//导入日期类<br>import java.text.SimpleDateFormat;//导入简单的日期格式类<br>public class Date_s&#123;<br>	public static String h_Date()&#123;  //静态方法<br>    	long startTime = System.currentTimeMillis();//获取当前时间（以毫秒为单位）<br>    	Date time=new Date(startTime);//创建日期对象；Date t=new Date(long ms)<br>    	String pattern=&quot;yyyy/MM/dd  E HH:mm&quot;;//创建字符型日期格式模板<br>    	SimpleDateFormat SDF=new SimpleDateFormat(pattern);//创建简单日期格式；以模板为参数<br>    	String timePattern=SDF.format(time);<br>    	return timePattern;	<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Main.java<br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/*<br> *主菜单<br> */<br> import java.io.*;<br> import java.util.*;<br>public class Main&#123;<br>	public static void main(String []args) throws Exception 	&#123;<br>    	Scanner re=new Scanner(System.in);<br>        System.out.println(&quot;\n\n-------------------------欢迎来到图书查询系统------------------------\n&quot;);<br>            System.out.println(&quot;                       &quot;+Date_s.h_Date()+&quot;                          \n&quot;);<br>            System.out.println(&quot;   注意：在使用过程中，请保证系统正常退出；否则可能会出现数据丢失！  \n&quot;);<br>          System.out.println(&quot;\n   注意：本次为测试过程；请输入合适的测试数据量（1--6万）            \n&quot;);<br>            System.out.println(&quot;   \t\t谢谢配合！                                                    \n&quot;);<br>            System.out.println(&quot;                                            您可以进入系统了         \n\n&quot;);<br>		    System.out.print(&quot;请输入测试所用数据量：&quot;);<br>		    int max_data=re.nextInt();<br>		Library lib=new Library();<br>		Object_io io=new Object_io();<br>		io.DB_Limit=max_data;<br>		lib.f_Path=&quot;Access\\Object\\&quot;;              //当前图书库源文件路径<br>		lib.f_Name=&quot;2019春教材书目数据_(源).csv&quot;;   //当前图书库源文件名称<br>    	File  file=new File(lib.f_Path.concat(lib.f_Name));<br>  		io.object_io_in(lib,file);<br>		Menu m=new Menu(lib);<br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>



<h2 id="资源链接："><a href="#资源链接：" class="headerlink" title="资源链接："></a>资源链接：</h2><p>Github：<a href="https://github.com/kleinlsl/BookInquirySystem">here</a></p>
<p>百度网盘：<a href="https://pan.baidu.com/s/1akeCc9VDpskhXKw1pFNQHg">https://pan.baidu.com/s/1akeCc9VDpskhXKw1pFNQHg</a><br>提取码：c4di </p>
]]></content>
  </entry>
  <entry>
    <title>hexo+github搭建个人博客</title>
    <url>/2019/01/15/hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>记录使用 hexo+GitHub搭建个人博客。</p>
</blockquote>
<h2 id="1、前置工作"><a href="#1、前置工作" class="headerlink" title="1、前置工作"></a>1、前置工作</h2><ul>
<li><p>了解GitHub、git</p>
</li>
<li><p>能够通过Windows和git向GitHub提交代码</p>
</li>
<li><p>安装node.js、npm，并了解其用法</p>
</li>
<li><p>安装git客户端</p>
</li>
<li><p>Github创建名为：<code>你的用户名.github.io</code></p>
<blockquote>
<a id="more"></a>
</blockquote>
</li>
<li><p>配置SSH key</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> ~/. ssh <span class="hljs-comment">#检查本机已存在的ssh密钥</span><br></code></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;邮件地址&quot;<br></code></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>测试是否成功：<code>ssh -T git@github.com # 注意邮箱地址不用改</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git config --global user.name <span class="hljs-string">&quot;liuxianan&quot;</span>// 你的github用户名，非昵称</span><br><span class="hljs-meta">$</span><span class="bash"> git config --global user.email  <span class="hljs-string">&quot;xxx@qq.com&quot;</span>// 填写你的github注册邮箱</span><br></code></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2、hexo写博客"><a href="#2、hexo写博客" class="headerlink" title="2、hexo写博客"></a>2、hexo写博客</h2><ul>
<li><p>Hexo：<a href="http://hexo.io/">官网</a> 、 <a href="https://github.com/hexojs/hexo">github</a></p>
</li>
<li><p>原理： hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。 </p>
</li>
<li><p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm install -g hexo</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>初始化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /d/Workspaces/blog/</span><br><span class="hljs-meta">$</span><span class="bash"> hexo init</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p> hexo会自动下载一些文件到这个目录，包括node_modules， </p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo g <span class="hljs-comment"># 生成</span></span><br><span class="hljs-meta">$</span><span class="bash"> hexo s <span class="hljs-comment"># 开启本地预览服务，打开浏览器访问 http://localhost:4000</span></span><br><span class="hljs-meta">$</span><span class="bash"> hexo d <span class="hljs-comment"># 部署到Github</span></span><br></code></pre></td></tr></table></figure>
</li>
<li><p>修改主题：<a href="https://hexo.io/themes/">官方主题</a></p>
<ul>
<li><p>下载主题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /d/Workspaces/blog/</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>配置主题：</p>
<p> 修改<code>_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: yilia</code>，然后重新执行<code>hexo clean</code> 、 <code>hexo g</code>来重新生成。 </p>
</li>
</ul>
</li>
<li><p>上传到GitHub：</p>
<blockquote>
<p> <code>ssh key</code>肯定要配置好。</p>
</blockquote>
<ul>
<li><p>配置Github： </p>
<blockquote>
<p>配置<code>_config.yml</code>中有关deploy的部分： </p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:kleinlsl/kleinlsl.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>提交代码：<code>hexo d</code></p>
</li>
</ul>
</li>
</ul>
<h2 id="3、常用命令"><a href="#3、常用命令" class="headerlink" title="3、常用命令"></a>3、常用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo new &quot;postName&quot; #新建文章<br>hexo new page &quot;pageName&quot; #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）<br>hexo deploy #部署到GitHub<br>hexo help  # 查看帮助<br>hexo version  #查看Hexo的版本<br></code></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy<br></code></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo s -g #生成并本地预览<br>hexo d -g #生成并上传<br></code></pre></td></tr></table></figure>

<h2 id="4、写博客"><a href="#4、写博客" class="headerlink" title="4、写博客"></a>4、写博客</h2><ul>
<li><p>新建博客： <code>hexo new &#39;my-first-blog&#39;</code>  hexo会帮我们在<code>_posts</code>下生成相关md文件： </p>
</li>
<li><p>打开编辑：<code>/source/_posts/my-first-blog.md</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">---<br>title: postName #文章页面上的显示名称，一般是中文<br>date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改<br>categories: 默认分类 #分类<br>tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格<br>description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面<br>---<br><br>以下是正文<br><span class="xml"><span class="hljs-comment">&lt;!--more--&gt;</span></span><br>以下是更多<br></code></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="5、添加分类和标签"><a href="#5、添加分类和标签" class="headerlink" title="5、添加分类和标签"></a>5、添加分类和标签</h2><h4 id="5-1-创建“分类”选项"><a href="#5-1-创建“分类”选项" class="headerlink" title="5.1  创建“分类”选项"></a>5.1  创建“分类”选项</h4><ul>
<li>生成“分类”页 ：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ hexo <span class="hljs-keyword">new</span> page categories<br></code></pre></td></tr></table></figure>

<ul>
<li>打开index.md,添加tpye属性:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">---</span><br><span class="hljs-selector-tag">title</span>: 分类<br><span class="hljs-selector-tag">date</span>: 2019<span class="hljs-selector-tag">-04-24</span> 15<span class="hljs-selector-pseudo">:30</span><span class="hljs-selector-pseudo">:30</span><br><span class="hljs-selector-tag">type</span>: <span class="hljs-selector-tag">categories</span><br><span class="hljs-selector-tag">---</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>保存并关闭文件。</p>
</blockquote>
<ul>
<li>给文章添加“categories”属性</li>
</ul>
<blockquote>
<p>打开需要添加分类的文章，为其添加categories属性。下方的categories:Hexo表示这篇文章添加到到“Hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">---</span><br><span class="hljs-selector-tag">title</span>: <span class="hljs-selector-tag">Hexo</span> 添加分类及标签<br><span class="hljs-selector-tag">date</span>: 2017<span class="hljs-selector-tag">-05-26</span> 12<span class="hljs-selector-pseudo">:12</span><span class="hljs-selector-pseudo">:57</span><br><span class="hljs-selector-tag">categories</span>: <span class="hljs-selector-tag">Hexo</span><br><span class="hljs-selector-tag">---</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中</p>
</blockquote>
<h4 id="5-2-创建“标签”选项"><a href="#5-2-创建“标签”选项" class="headerlink" title="5.2 创建“标签”选项"></a>5.2 创建“标签”选项</h4><ul>
<li>生成“标签”页:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ hexo <span class="hljs-keyword">new</span> page tags<br></code></pre></td></tr></table></figure>

<ul>
<li>找到index.md这个文件,并添加tpye属性:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">---</span><br><span class="hljs-selector-tag">title</span>: 标签<br><span class="hljs-selector-tag">date</span>: 2019<span class="hljs-selector-tag">-04-24</span> 15<span class="hljs-selector-pseudo">:40</span><span class="hljs-selector-pseudo">:24</span><br><span class="hljs-selector-tag">type</span>: <span class="hljs-selector-tag">tags</span><br><span class="hljs-selector-tag">---</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>保存并关闭文件。</p>
</blockquote>
<ul>
<li>给文章添加“tags”属性,打开需要添加标签的文章，为其添加tags属性。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">---</span><br><span class="hljs-selector-tag">title</span>: <span class="hljs-selector-tag">Hexo</span> 添加分类及标签<br><span class="hljs-selector-tag">date</span>: 2019<span class="hljs-selector-tag">-04-24</span> 15<span class="hljs-selector-pseudo">:40</span><span class="hljs-selector-pseudo">:24</span><br><span class="hljs-selector-tag">categories</span>: <br>           <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">Hexo</span><br><span class="hljs-selector-tag">tags</span>:<br>           <span class="hljs-selector-tag">-</span> 博客<br><span class="hljs-selector-tag">---</span><br></code></pre></td></tr></table></figure>

<h2 id="6、-Front-matter-区域配置："><a href="#6、-Front-matter-区域配置：" class="headerlink" title="6、 Front-matter 区域配置："></a>6、 Front-matter 区域配置：</h2><ul>
<li><p>使用YAML块标记，用于配置作品设置。</p>
<table>
<thead>
<tr>
<th align="left">设置</th>
<th align="left">描述</th>
<th align="left">默认</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>layout</code></td>
<td align="left">布局</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>title</code></td>
<td align="left">标题</td>
<td align="left">文件名（仅帖子）</td>
</tr>
<tr>
<td align="left"><code>date</code></td>
<td align="left">发布日期</td>
<td align="left">文件创建日期</td>
</tr>
<tr>
<td align="left"><code>updated</code></td>
<td align="left">更新日期</td>
<td align="left">文件更新日期</td>
</tr>
<tr>
<td align="left"><code>comments</code></td>
<td align="left">为帖子启用评论功能</td>
<td align="left">真正</td>
</tr>
<tr>
<td align="left"><code>tags</code></td>
<td align="left">标签（不适用于页面）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>categories</code></td>
<td align="left">类别（不适用于页面）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>permalink</code></td>
<td align="left">覆盖帖子的默认永久链接</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>excerpt</code></td>
<td align="left">纯文本的页面摘录。使用<a href="https://hexo.io/docs/tag-plugins#Post-Excerpt">此插件</a>格式化文本</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>disableNunjucks</code></td>
<td align="left">启用时禁用Nunjucks标签<code>&#123;&#123; &#125;&#125;</code>/<code>&#123;% %&#125;</code>和<a href="https://hexo.io/docs/tag-plugins">标签插件的</a>呈现</td>
<td align="left"></td>
</tr>
</tbody></table>
</li>
<li><p>案例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">categories:<br>	- Sports<br>	- Baseball<br>tags:<br>	- Injury<br>	- Fight<br>	- Shocking<br></code></pre></td></tr></table></figure>
</li>
<li><p>其他设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">top: true   # 是否置顶文章<br>photos: [ &quot;img_url_01&quot;,&quot;img_url_02&quot;]  # 文章封面图<br></code></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="7、开启相关功能"><a href="#7、开启相关功能" class="headerlink" title="7、开启相关功能"></a>7、开启相关功能</h2><blockquote>
<p>搜索、目录、评论、置顶、相册等</p>
</blockquote>
<h3 id="7-1-开启搜索"><a href="#7-1-开启搜索" class="headerlink" title="7.1 开启搜索"></a>7.1 开启搜索</h3><ul>
<li><p><a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 本地检索</p>
<ul>
<li>安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm install hexo-generator-searchdb --save</span><br></code></pre></td></tr></table></figure>

<ul>
<li>配置：<br>Hexo 的配置文件 <code>_config.yml</code> 添加插件配置（注意：不是主题的配置文件）：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">search:</span>  <br>	<span class="hljs-attr">path:</span> <span class="hljs-string">search.xml</span>  <br>	<span class="hljs-attr">field:</span> <span class="hljs-string">post</span>  <br>	<span class="hljs-attr">content:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="7-2-开启目录"><a href="#7-2-开启目录" class="headerlink" title="7.2 开启目录"></a>7.2 开启目录</h3><p>使用 <a href="http://tscanlin.github.io/tocbot/">Tocbot</a> 解析内容中的标题标签 (h1~h6) 并插入目录。使用方法：</p>
<blockquote>
<p>Ocean 配置 Toc 只作用于 Post 页面，在其他 Page 中不作用。</p>
</blockquote>
<ul>
<li>在主题配置文件 <code>ocean/_config.yml</code> 中开启</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Toc</span><br><span class="hljs-attr">toc:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>

<ul>
<li>在 Post 中关闭 Toc</li>
</ul>
<p>如果在 <code>ocean/_config.yml</code> 开启了 Toc ，那么 Tocbot 会在每一篇 Blog 都解析内容中的标题标签生成 Toc 文章目录，但并不是所有的 Blog 中都需要 Toc，所以在 markdown 的 Front-matter 部分可以关闭：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">toc:</span> <span class="hljs-literal">false</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure>

<h3 id="7-3-开启评论：here"><a href="#7-3-开启评论：here" class="headerlink" title="7.3 开启评论：here"></a>7.3 开启评论：<a href="https://zhwangart.github.io/2018/12/06/Gitalk/">here</a></h3><h3 id="7-4-开启置顶"><a href="#7-4-开启置顶" class="headerlink" title="7.4 开启置顶"></a>7.4 开启置顶</h3><ul>
<li><p>安装</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">cnpm</span> <span class="hljs-string">uninstall</span> <span class="hljs-string">hexo-generator-index</span> <span class="hljs-string">--save</span><br><span class="hljs-string">$</span> <span class="hljs-string">cnpm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-generator-index-pin-top</span> <span class="hljs-string">--save</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>开启</p>
<p>在需要置顶的文章的 Front-matter 区域加上 <code>top: ture</code> ，示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">---</span> <br><span class="hljs-attr">title:</span> <span class="hljs-string">新增文章置顶</span> <br><span class="hljs-attr">author:</span> <span class="hljs-string">zhwangart</span> <br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-07-18 15:45:03</span> <br><span class="hljs-attr">top:</span> <span class="hljs-string">ture</span> <br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="7-5-开启相册"><a href="#7-5-开启相册" class="headerlink" title="7.5 开启相册"></a>7.5 开启相册</h3><p>首先需要创建一个 page ，关于页面也一样需要创建。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo new page gallery</span><br></code></pre></td></tr></table></figure>

<p>然后在编辑 markdown 的时候需要写在 Front-matter 部分，这种写法可能不是特别特别的好，希望能有更好的方法。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Gallery</span><br><span class="hljs-attr">albums:</span> [        <br>	[<span class="hljs-string">&quot;img_url&quot;</span>,<span class="hljs-string">&quot;img_caption&quot;</span>],<br>    [<span class="hljs-string">&quot;img_url&quot;</span>,<span class="hljs-string">&quot;img_caption&quot;</span>]<br>    ]<br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure>

<h3 id="7-6-开启RSS"><a href="#7-6-开启RSS" class="headerlink" title="7.6 开启RSS"></a>7.6 开启RSS</h3><ul>
<li><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm install hexo-generator-feed --save</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>配置<br>Hexo 的配置文件 <code>_config.yml</code> 添加插件配置（注意：不是主题的配置文件）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feed:</span>     <br>	<span class="hljs-attr">type:</span> <span class="hljs-string">atom</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">atom.xml</span><br>    <span class="hljs-attr">limit:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">hub:</span><br>    <span class="hljs-attr">content:</span><br>    <span class="hljs-attr">content_limit:</span> <span class="hljs-number">140</span><br>    <span class="hljs-attr">content_limit_delim:</span> <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br></code></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="推荐主题"><a href="#推荐主题" class="headerlink" title="推荐主题"></a>推荐主题</h2><ul>
<li><p><a href="https://github.com/zhwangart/hexo-theme-ocean">Ocean</a></p>
<ul>
<li>克隆： <code> git clone https://github.com/zhwangart/hexo-theme-ocean.git themes/ocean</code></li>
</ul>
</li>
<li><p>配置文档：<a href="https://zhwangart.github.io/2018/11/30/Ocean/">https://zhwangart.github.io/2018/11/30/Ocean/</a></p>
<ul>
<li>展示：<a href="https://zhwangart.github.io/">https://zhwangart.github.io/</a></li>
</ul>
</li>
</ul>
<h2 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h2><ul>
<li><p>错误：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">D:\Workspaces\blog&gt;hexo version<br>INFO  Validating config<br>WARN  Deprecated config detected: <span class="hljs-string">&quot;use_date_for_updated&quot;</span> is deprecated, please use <span class="hljs-string">&quot;updated_option&quot;</span> instead. See https://hexo.io/docs/configuration <span class="hljs-keyword">for</span> more details.<br></code></pre></td></tr></table></figure>

<ul>
<li><p>解决方案：</p>
<p>​    找到hexo的配置文件：<code>_config.yml</code> 更改其中的：<code>use_date_for_updated</code> 为 <code>updated_option</code></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Node.js</tag>
        <tag>git</tag>
      </tags>
  </entry>
</search>
